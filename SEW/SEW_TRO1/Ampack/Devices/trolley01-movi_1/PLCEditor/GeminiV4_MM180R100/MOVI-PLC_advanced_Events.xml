<targettaskinfo>
  <supportmicroseconds>false</supportmicroseconds>
  <supportinterval>true</supportinterval>
  <maxintervaltasks>8</maxintervaltasks>
  <cycletimemin>1000</cycletimemin>
  <cycletimemax>1000000</cycletimemax>
  <supportfreewheeling>true</supportfreewheeling>
  <maxfreetasks>1</maxfreetasks>
  <supportevent>true</supportevent>
  <maxeventtasks>5</maxeventtasks>
  <supportexternal>false</supportexternal>
  <maxnumoftasks>8</maxnumoftasks>
  <defaulttaskpriority>8</defaulttaskpriority>
  <mintaskpriority>1</mintaskpriority>
  <maxtaskpriority>8</maxtaskpriority>
  <checkduplicatepriority>true</checkduplicatepriority>
  <priorityinfo priority="1">1=highest, ..., 8=lowest</priorityinfo>
  <priorityinfo priority="2">1=highest, ..., 8=lowest</priorityinfo>
  <priorityinfo priority="3">1=highest, ..., 8=lowest</priorityinfo>
  <priorityinfo priority="4">1=highest, ..., 8=lowest</priorityinfo>
  <priorityinfo priority="5">1=highest, ..., 8=lowest</priorityinfo>
  <priorityinfo priority="6">1=highest, ..., 8=lowest</priorityinfo>
  <priorityinfo priority="7">1=highest, ..., 8=lowest</priorityinfo>
  <priorityinfo priority="8">1=highest, ..., 8=lowest</priorityinfo>
  <supportextendedwatchdog>true</supportextendedwatchdog>
  <supportextendedtaskcontrol>true</supportextendedtaskcontrol>
<systemevent>
  <name>start</name>
  <description>Called when program starts</description>
    <id>1</id>
    <interface>
      <![CDATA[(* ATTENTION: The name of the systemevent must start with 'callback' e.g. 'callbackSystemEventStart'! *)
FUNCTION systemevent : DWORD
VAR_INPUT
	dwEvent: DWORD;
	dwFilter: DWORD;
	dwOwner: DWORD;
END_VAR
VAR
	(* WARNING: Do not modify this interface. You are not allowed to use local variables here! *)
END_VAR
]]>
  </interface>
</systemevent>
<systemevent>
  <name>stop</name>
  <description>Called when program stops</description>
  <id>2</id>
  <interface>
    <![CDATA[(* ATTENTION: The name of the systemevent must start with 'callback' e.g. 'callbackSystemEventStop'! *)
FUNCTION systemevent : DWORD
VAR_INPUT
	dwEvent: DWORD;
	dwFilter: DWORD;
	dwOwner: DWORD;
END_VAR
VAR
	(* WARNING: Do not modify this interface. You are not allowed to use local variables here! *)
END_VAR
]]>
    </interface>
  </systemevent>
  <systemevent>
    <name>before_reset</name>
    <description>Called before reset takes place</description>
    <id>3</id>
    <interface>
      <![CDATA[(* ATTENTION: The name of the systemevent must start with 'callback' e.g. 'callbackSystemEventBeforeReset'! *)
FUNCTION systemevent : DWORD
VAR_INPUT
	dwEvent: DWORD;
	dwFilter: DWORD;
	dwOwner: DWORD;
END_VAR
VAR
	(* WARNING: Do not modify this interface. You are not allowed to use local variables here! *)
END_VAR
]]>
  </interface>
</systemevent>
<systemevent>
  <name>after_reset</name>
  <description>Called after reset took place</description>
  <id>4</id>
  <interface>
    <![CDATA[(* ATTENTION: The name of the systemevent must start with 'callback' e.g. 'callbackSystemEventAfterReset'! *)
FUNCTION systemevent : DWORD
VAR_INPUT
	dwEvent: DWORD;
	dwFilter: DWORD;
	dwOwner: DWORD;
END_VAR
VAR
	(* WARNING: Do not modify this interface. You are not allowed to use local variables here! *)
END_VAR
]]>
    </interface>
  </systemevent>
  <systemevent>
    <name>shutdown</name>
    <description>Called before shutdown is performed</description>
    <id>5</id>
    <interface>
      <![CDATA[(* ATTENTION: The name of the systemevent must start with 'callback' e.g. 'callbackSystemEventShutdown'! *)
FUNCTION systemevent : DWORD
VAR_INPUT
	dwEvent: DWORD;
	dwFilter: DWORD;
	dwOwner: DWORD;
END_VAR
VAR
	(* WARNING: Do not modify this interface. You are not allowed to use local variables here! *)
END_VAR
]]>
  </interface>
</systemevent>
<systemevent>
  <name>excpt_cycletime_overflow</name>
  <description>Called when a cycletime overflow happened</description>
  <id>6</id>
  <interface>
    <![CDATA[(* ATTENTION: The name of the systemevent must start with 'callback' e.g. 'callbackSystemEventExcptCycletimeOverflow'! *)
FUNCTION systemevent : DWORD
VAR_INPUT
	dwEvent: DWORD;
	dwFilter: DWORD;
	dwOwner: DWORD;
END_VAR
VAR
	(* WARNING: Do not modify this interface. You are not allowed to use local variables here! *)
END_VAR
]]>
  </interface>
</systemevent>
<systemevent>
  <name>excpt_watchdog</name>
  <description>Software watchdog of IEC-task expired</description>
  <id>7</id>
  <interface>
    <![CDATA[(* ATTENTION: The name of the systemevent must start with 'callback' e.g. 'callbackSystemEventExcptWatchdog'! *)
FUNCTION systemevent : DWORD
VAR_INPUT
	dwEvent: DWORD;
	dwFilter: DWORD;
	dwOwner: DWORD;
END_VAR
VAR
	(* WARNING: Do not modify this interface. You are not allowed to use local variables here! *)
END_VAR
]]>
    </interface>
  </systemevent>
</targettaskinfo>
