

(* @NESTEDCOMMENTS := 'Yes' *)
(* @PATH := '\/CodeSamples\/CANopen\/UniversalMaster' *)
(* @OBJECTFLAGS := '0, 8' *)
(* @SYMFILEFLAGS := '2048' *)
(*######################################################
Functionblock:
- to send sync for the slave, to auto-detection of baudrate.
- set baudrate 
- set address 
#######################################################*)
FUNCTION_BLOCK CANopen_activ
VAR_INPUT
	Node: CAN_NODE; (* CAN_NODE_1 or CAN_NODE_2*)
	Address_Default : WORD;(* 0...127*)
	Address: WORD;			(* 1...63 *)
	Baudrate: WORD;(* 0 = 1 M , 2 = 500 k , 3 = 250 k baud*)
END_VAR
VAR_OUTPUT
	Done: BOOL; 				(* Connection to the CAN module successfully started *)
	Error: BOOL; 				(* Error within the function block *)
	ErrorID: UDINT; 			(* Error identification *)
END_VAR
VAR
	Init: BOOL;
	CanMsg: ST_CanAcyclicMsg;
	Timer: TON;
	l_State: UINT;
	StartAdresse_Diag: UINT;
	StartAdresse_Input: UINT;
	StartAdresse_Output: UINT;
	bMerkerCANSuspended: BOOL;
	SComCtrl1: SComControl;
	Counter: INT;
	fbSComCheckId: SComCheckId;
	SComRecSDO: SComReceive;
	SComRecNMT: SComReceive;
	SComRecEmergency: SComReceive;
	sSDORecDataTemp : sTwoDWORDData;
	NMT_Default_Byte : BYTE;
	NMT_Byte : BYTE;
	AbortCode: DWORD;
END_VAR
(* @END_DECLARATION := '0' *)
CASE l_State OF
(* ============ Initialisierung  Variablen =============== *)
	0:
		l_State := 10;

	10:
		IF ( Address < 1 ) OR ( Address > 63 ) OR (Address_Default > 127) THEN
			Error := TRUE;
			ErrorID := E_CAN_IO_MODULE_INVALID_PARAMETERS;
			RETURN;
		END_IF

		l_State := 50;

	50:
	(* SBus suspend --> damit können neue Objekte eingerichtet werden*)
      (* SCOM SUSPEND *)
	IF fTestAndSet( stInterlock.yTaskLock_CANSuspend ) THEN		(* CAN "belegen" damit keine andere Instanz Objekte anlegen will *)
		SEWMotionIntern.SComAllocationMax_I := SEWMotionIntern.SComAllocationMax_I - ( 12 + 4 * 2(*( xx.NbTxPDO + xx.NbCyclicRxPDO )*));
		SEWMotionIntern.SComAllocationMax_M := SEWMotionIntern.SComAllocationMax_M - ( 12 + 4 *2(* ( xx.NbTxPDO + xx.NbCyclicRxPDO )*));
		SEWMotionIntern.SComAllocationMax_Q := SEWMotionIntern.SComAllocationMax_Q - ( 12 + 4 * 2(*( xx.NbTxPDO + xx.NbCyclicRxPDO )*));
		StartAdresse_Diag := DWORD_TO_UINT (SEWMotionIntern.SComAllocationMax_M );
		StartAdresse_Input := DWORD_TO_UINT( SEWMotionIntern.SComAllocationMax_I );
		StartAdresse_Output := DWORD_TO_UINT( SEWMotionIntern.SComAllocationMax_Q );
		bMerkerCANSuspended := TRUE;
		SComCtrl1( Execute := FALSE );
		l_State := 60;
	END_IF

	60:
	(* SBus suspend --> damit können neue Objekte eingerichtet werden*)
      (* SCOM SUSPEND *)
	SComCtrl1(
		Execute := TRUE,
		Node := Node,
	 	Control := SCOM_CONTROL_SUSPEND,
		Error => Error,
		ErrorID => ErrorID );
       IF SComCtrl1.Done THEN
		l_State := 65;
	END_IF

	65:
	(* ID´s überprüfen für Adresse Default --> könnte durch andere SCOM Objekte schon belegt sein *)
	FOR Counter := 1 TO 6 DO
		IF (Counter = 6 )  THEN
			fbSComCheckId(
				Enable := TRUE,
				Node := Node,
				Id := 16#80);
		ELSE
			fbSComCheckId(
				Enable := TRUE,
				Node := Node,
				Id := ( Address_Default + aCOB_IDs_general_CO[Counter] ));
		END_IF
		IF fbSComCheckId.IsUsed OR NOT fbSComCheckId.Done OR ((Counter < 6 ) AND ( fbSComCheckId.Id = 16#80)) THEN
			Error := TRUE;
			ErrorID := E_CAN_IO_MODULE_CAN_ID_ERROR ;
			RETURN;
		ELSIF fbSComCheckId.Error THEN
			Error := TRUE;
			ErrorID := fbSComCheckId.ErrorID;
			RETURN;
		END_IF
	END_FOR
	l_State := 66;

	66:
	(* ID´s überprüfen für Adresse  --> könnte durch andere SCOM Objekte schon belegt sein *)
	FOR Counter := 1 TO 6 DO
		IF (Counter = 6 )  THEN
			fbSComCheckId(
				Enable := TRUE,
				Node := Node,
				Id := 16#80);
		ELSE
			fbSComCheckId(
				Enable := TRUE,
				Node := Node,
				Id := ( Address + aCOB_IDs_general_CO[Counter] ));
		END_IF
		IF fbSComCheckId.IsUsed OR NOT fbSComCheckId.Done OR ((Counter < 6 ) AND ( fbSComCheckId.Id = 16#80)) THEN
			Error := TRUE;
			ErrorID := E_CAN_IO_MODULE_CAN_ID_ERROR ;
			RETURN;
		ELSIF fbSComCheckId.Error THEN
			Error := TRUE;
			ErrorID := fbSComCheckId.ErrorID;
			RETURN;
		END_IF
	END_FOR
	SComRecSDO( Execute := FALSE );
	l_State := 70;

	70:
	(* Receive Objekt für Antwort Hochlauf Address_Default anlegen SDO*)
	SComRecSDO(
		Execute := TRUE,
		Node := Node,
		ID := 16#580 + Address_Default,
		Length := 8,
		DataDest := StartAdresse_Input,
		DiagDest := StartAdresse_Diag,
		Error => Error,
		ErrorID => ErrorID );
	IF SComRecSDO.Done THEN
		StartAdresse_Input := StartAdresse_Input + 4;
		StartAdresse_Diag := StartAdresse_Diag + 4;
		StartAdresse_Output := StartAdresse_Output + 4;
		SEWInternCOSlave[Address_Default].LibIn := SComRecSDO.DataDest;
		SComRecNMT( Execute := FALSE );
   		 l_State := 72;
	END_IF

	72:
	(* Receive Objekt für Antwort Hochlauf Address_Default anlegen NMT*)
	SComRecNMT(
		Execute := TRUE,
		Node := Node,
		ID := 16#700 + Address_Default,
		Length := 1,
		DataDest := StartAdresse_Input,
		DiagDest := StartAdresse_Diag,
		Error => Error,
		ErrorID => ErrorID );
	IF SComRecSDO.Done THEN
		StartAdresse_Input := StartAdresse_Input + 2;
		StartAdresse_Diag := StartAdresse_Diag + 2;
		StartAdresse_Output := StartAdresse_Output + 2;
		SComRecNMT( Execute := FALSE );
   		 l_State := 73;
	END_IF

	73:
	(* Receive Objekt für Antwort Hochlauf Address anlegen NMT*)
	SComRecNMT(
		Execute := TRUE,
		Node := Node,
		ID := 16#700 + Address,
		Length := 8,
		DataDest := StartAdresse_Input,
		DiagDest := StartAdresse_Diag,
		Error => Error,
		ErrorID => ErrorID );
	IF SComRecSDO.Done THEN
		StartAdresse_Input := StartAdresse_Input + 2;
		StartAdresse_Diag := StartAdresse_Diag + 2;
		StartAdresse_Output := StartAdresse_Output + 2;
		SComRecEmergency( Execute := FALSE );
   		 l_State := 74;
	END_IF

	74:
	(* Receive Objekt für Emergency Object einstellen *)
   	 SComRecEmergency(
		Execute := TRUE,
		Node := Node,
		ID := 16#80 + Address_Default,
		Length := 8,
		DataDest := StartAdresse_Input,
		DiagDest := StartAdresse_Diag,
		Error => Error,
		ErrorID => ErrorID);
	IF SComRecEmergency.Done THEN
		SComCtrl1( Execute := FALSE );
		l_State := 80;
	END_IF

	80:
	(* SBUS einschalten *)
	SComCtrl1(
		Execute := TRUE,
		Node := Node,
		Control := SCOM_CONTROL_ON );
	(* SBUS Initialisierung abgeschlossen *)
	IF SComCtrl1.Done THEN
		stInterlock.yTaskLock_CANSuspend := 0;
		bMerkerCANSuspended := FALSE;
		l_State := 90;
	END_IF

	90:
	(* Synch senden damit der Slave die Baudrate erkennt *)
		IF NOT Init THEN
			CanMsg := F_WriteCanMsg(
										Node := Node,
										ID := 16#80,
										Length := 1,
										Data1:= 0,
										Data2 := 0,
										Data3 := 0,
										Data4 := 0,
										SBUSGateway_LogAdr := 0 );
			IF ( CanMsg.State = GEN_1_BUFFSTATE_INSERTED ) THEN
				Init :=TRUE;
			END_IF
		ELSIF Init THEN
			CanMsg.Result :=F_ResultCanMsg(CanAcyclicMsg := CanMsg);
			IF ( CanMsg.Result = GEN_3_BUFFSTATE_COMPLETED_SUCCESSFUL ) THEN
				Init := FALSE;
				l_State := 92;
			(* Fehler beim Senden --> Nachricht ging verloren --> nochmals *)
			ELSIF (CanMsg.Result = GEN_5_BUFFSTATE_COMPLETED_MSG_LOST ) THEN
				Init := FALSE;
			(* Fehler beim Senden --> Non-recovery error from CAN --> nochmals *)
			ELSIF (CanMsg.Result = GEN_4_BUFFSTATE_COMPLETED_ERROR ) THEN
				Init := FALSE;
			END_IF
		END_IF

	92: (* Kontrolle ob Slave mit Address_Default antwortet *)
	Timer(	IN := TRUE, PT := t#1s );
	IF NOT Timer.Q THEN
		ConfDataEx_ReadFromIoBuffer( SEWInternCOSlave[Address_Default].LibIn+4, BUFSEL_IN, ADR(NMT_Default_Byte), 1);
		ConfDataEx_ReadFromIoBuffer( SEWInternCOSlave[Address_Default].LibIn+6, BUFSEL_IN, ADR(NMT_Byte), 1);
		IF NMT_Default_Byte = 0 THEN
			IF NMT_Byte = 0 THEN
				l_State := 90;
			ELSE
				l_State := 100;
			END_IF
		ELSE
			l_State := 100;
		END_IF
	ELSE
		l_State := 100;
	END_IF

	100:
	(* Baudrate einstellen *)
	Timer(	IN := TRUE, PT := t#100ms );
	IF Timer.Q THEN
		IF NOT Init THEN
			CanMsg := F_WriteCanMsg(
										Node := Node,
										ID := 16#600+Address_Default,
										Length := 8,
										Data1:= 16#2F00,
										Data2 := 16#2100,
										Data3 := SHL(Baudrate,8),
										Data4 := 0,
										SBUSGateway_LogAdr := 0 );
			IF ( CanMsg.State = GEN_1_BUFFSTATE_INSERTED ) THEN
				Init :=TRUE;
			END_IF
		ELSIF Init THEN
			CanMsg.Result :=F_ResultCanMsg(CanAcyclicMsg := CanMsg);
			IF ( CanMsg.Result = GEN_3_BUFFSTATE_COMPLETED_SUCCESSFUL ) THEN
				Init := FALSE;
				Timer( IN := FALSE );
				l_State := 110;
			(* Fehler beim Senden --> Nachricht ging verloren --> nochmals *)
			ELSIF (CanMsg.Result = GEN_5_BUFFSTATE_COMPLETED_MSG_LOST ) THEN
				Init := FALSE;
				Timer( IN := FALSE );
			(* Fehler beim Senden --> Non-recovery error from CAN --> nochmals *)
			ELSIF (CanMsg.Result = GEN_4_BUFFSTATE_COMPLETED_ERROR ) THEN
				Init := FALSE;
				Timer( IN := FALSE );
			END_IF
		END_IF
	END_IF

	110:
		ConfDataEx_ReadFromIoBuffer( SEWInternCOSlave[Address_Default].LibIn, BUFSEL_IN, ADR(sSDORecDataTemp), 8);
		IF MAX_NUMBER_AXIS <> 12 THEN
			sSDORecDataTemp.DWORD1 := fSwapUDINTtoIntel(sSDORecDataTemp.DWORD1);
			sSDORecDataTemp.DWORD2 := fSwapUDINTtoIntel(sSDORecDataTemp.DWORD2);
		END_IF
		IF (sSDORecDataTemp.DWORD1 AND 16#FFFF_FFF0) = (16#0021002F AND 16#FFFF_FF00) + 16#60 THEN
				l_State := 120;
		ELSIF sSDORecDataTemp.DWORD1= (16#0021002F AND 16#FFFF_FF00) + 16#80 THEN
			Error := TRUE;
			ErrorID := E_CAN_IO_MODULE_INVALID_PARAMETERS;			(* Parameter error *)
			AbortCode := sSDORecDataTemp.DWORD2;	(* SDO abort code *)
		ELSE
			(* Time out *)
			Timer( IN := TRUE, PT := T#500ms);
			IF Timer.Q THEN
				Error := TRUE;
				ErrorID := E_CAN_IO_MODULE_TIME_OUT_SBUS;			(* Parameter transfer Time out *)
			END_IF
		END_IF

	120:
	(* ID einstellen *)
	Timer(	IN := TRUE, PT := t#100ms );
	IF Timer.Q THEN
		IF NOT Init THEN
			CanMsg := F_WriteCanMsg(
										Node := Node,
										ID := 16#600+Address_Default,
										Length := 8,
										Data1:= 16#2F01,
										Data2 := 16#2100,
										Data3 := SHL(Address,8),
										Data4 := 0,
										SBUSGateway_LogAdr := 0 );
			IF ( CanMsg.State = GEN_1_BUFFSTATE_INSERTED ) THEN
				Init :=TRUE;
			END_IF
		ELSIF Init THEN
			CanMsg.Result :=F_ResultCanMsg(CanAcyclicMsg := CanMsg);
			IF ( CanMsg.Result = GEN_3_BUFFSTATE_COMPLETED_SUCCESSFUL ) THEN
				Init := FALSE;
				Timer( IN := FALSE );
				l_State := 130;
			(* Fehler beim Senden --> Nachricht ging verloren --> nochmals *)
			ELSIF (CanMsg.Result = GEN_5_BUFFSTATE_COMPLETED_MSG_LOST ) THEN
				Init := FALSE;
				Timer( IN := FALSE );
			(* Fehler beim Senden --> Non-recovery error from CAN --> nochmals *)
			ELSIF (CanMsg.Result = GEN_4_BUFFSTATE_COMPLETED_ERROR ) THEN
				Init := FALSE;
				Timer( IN := FALSE );
			END_IF
		END_IF
	END_IF

	130:
		ConfDataEx_ReadFromIoBuffer( SEWInternCOSlave[Address_Default].LibIn, BUFSEL_IN, ADR(sSDORecDataTemp), 8);
		IF MAX_NUMBER_AXIS <> 12 THEN
			sSDORecDataTemp.DWORD1 := fSwapUDINTtoIntel(sSDORecDataTemp.DWORD1);
			sSDORecDataTemp.DWORD2 := fSwapUDINTtoIntel(sSDORecDataTemp.DWORD2);
		END_IF
		IF (sSDORecDataTemp.DWORD1 AND 16#FFFF_FFF0) = (16#0021012F AND 16#FFFF_FF00) + 16#60 THEN
				l_State := 140;
		ELSIF sSDORecDataTemp.DWORD1= (16#0021012F AND 16#FFFF_FF00) + 16#80 THEN
			Error := TRUE;
			ErrorID := E_CAN_IO_MODULE_INVALID_PARAMETERS;			(* Parameter error *)
			AbortCode := sSDORecDataTemp.DWORD2;	(* SDO abort code *)
		ELSE
			(* Time out *)
			Timer( IN := TRUE, PT := T#500ms);
			IF Timer.Q THEN
				Error := TRUE;
				ErrorID := E_CAN_IO_MODULE_TIME_OUT_SBUS;			(* Parameter transfer Time out *)
			END_IF
		END_IF

	140:
	(* Parameter save *)
	Timer(	IN := TRUE, PT := t#100ms );
	IF Timer.Q THEN
		IF NOT Init THEN
			CanMsg := F_WriteCanMsg(
										Node := Node,
										ID := 16#600+Address_Default,
										Length := 8,
										Data1:= 16#2310,
										Data2 := 16#1001,
										Data3 := 16#7361,
										Data4 := 16#7665,
										SBUSGateway_LogAdr := 0 );
			IF ( CanMsg.State = GEN_1_BUFFSTATE_INSERTED ) THEN
				Init :=TRUE;
			END_IF
		ELSIF Init THEN
			CanMsg.Result :=F_ResultCanMsg(CanAcyclicMsg := CanMsg);
			IF ( CanMsg.Result = GEN_3_BUFFSTATE_COMPLETED_SUCCESSFUL ) THEN
				Init := FALSE;
				Timer( IN := FALSE );
				l_State := 150;
			(* Fehler beim Senden --> Nachricht ging verloren --> nochmals *)
			ELSIF (CanMsg.Result = GEN_5_BUFFSTATE_COMPLETED_MSG_LOST ) THEN
				Init := FALSE;
				Timer( IN := FALSE );
			(* Fehler beim Senden --> Non-recovery error from CAN --> nochmals *)
			ELSIF (CanMsg.Result = GEN_4_BUFFSTATE_COMPLETED_ERROR ) THEN
				Init := FALSE;
				Timer( IN := FALSE );
			END_IF
		END_IF
	END_IF

	150:
		ConfDataEx_ReadFromIoBuffer( SEWInternCOSlave[Address_Default].LibIn, BUFSEL_IN, ADR(sSDORecDataTemp), 8);
		IF MAX_NUMBER_AXIS <> 12 THEN
			sSDORecDataTemp.DWORD1 := fSwapUDINTtoIntel(sSDORecDataTemp.DWORD1);
			sSDORecDataTemp.DWORD2 := fSwapUDINTtoIntel(sSDORecDataTemp.DWORD2);
		END_IF
		IF (sSDORecDataTemp.DWORD1 AND 16#FFFF_FFF0) = (16#01101023 AND 16#FFFF_FF00) + 16#60 THEN
				l_State := 200;
		ELSIF sSDORecDataTemp.DWORD1= (16#01101023 AND 16#FFFF_FF00) + 16#80 THEN
			Error := TRUE;
			ErrorID := E_CAN_IO_MODULE_INVALID_PARAMETERS;			(* Parameter error *)
			AbortCode := sSDORecDataTemp.DWORD2;	(* SDO abort code *)
		ELSE
			(* Time out *)
			Timer( IN := TRUE, PT := T#500ms);
			IF Timer.Q THEN
				Error := TRUE;
				ErrorID := E_CAN_IO_MODULE_TIME_OUT_SBUS;			(* Parameter transfer Time out *)
			END_IF
		END_IF

	200:
		Done := TRUE;
		Error := FALSE;
		ErrorID := 0;

END_CASE

END_FUNCTION_BLOCK


(* @NESTEDCOMMENTS := 'Yes' *)
(* @PATH := '\/CodeSamples\/CANopen\/UniversalMaster' *)
(* @OBJECTFLAGS := '0, 8' *)
(* @SYMFILEFLAGS := '2048' *)
FUNCTION_BLOCK FB_Configuration_CANopenSlave_Beckhoff_BK5120
VAR_INPUT
	Enable: BOOL; 			(* Activate config *)
END_VAR
VAR_OUTPUT
	Done: BOOL;				(* Config done *)
END_VAR
VAR_IN_OUT
	ExtConfig : MC_EXTENDEDCONFIG_COSLAVE	;
	(*
		########################################################################################################
			MC_EXTENDEDCONFIG_COSLAVE
		#########################################################################################################

						
		Variable								Value			Description
		-------------------------------------------------------------------------------------------------------------------------------------------------------------
		bWaitBeforeOperational 				BOOL;			When TRUE, after the coupler has been parameterized, it won't be switched in operational
																before this variable is FALSE. This can be used for example, to store the configuration with the FB
																MPLC_Universal_CANopen, with Service "SEWIOS_STORE", after a reset of the coppler 
		-------------------------------------------------------------------------------------------------------------------------------------------------------------
		bNoSettingsDownload 				BOOL;			TRUE : No configuration of the module. The configuration has to be done manually.
		-------------------------------------------------------------------------------------------------------------------------------------------------------------
		bResetUnconditional 					BOOL;			Even if the Connect FB isn't in fault it is possible to reset the bus coppler
		-------------------------------------------------------------------------------------------------------------------------------------------------------------
		bIOHold 								BOOL;			TRUE : Input data remain unchanged and the output data are not resetet also if the FB is in fault 
		-------------------------------------------------------------------------------------------------------------------------------------------------------------
		TimeOutHeartBeat					UINT;			If this value (ms) is different to zero, HeartbeatMode will be activated
		-------------------------------------------------------------------------------------------------------------------------------------------------------------
		TimeOutNodeGuarding 				UINT;			If this value (ms) is different to zero, NodeGuarding will be activated. 
																Caution ! The MOVI-PLC basic doesn´t support NodeGuarding 
		-------------------------------------------------------------------------------------------------------------------------------------------------------------
		TimeOutInitSequence					UINT;			Timeout for initialisation sequence (seconds) 
		-------------------------------------------------------------------------------------------------------------------------------------------------------------
		NumberOfRxPDO 					UINT;			Receive PDO : MOVI-PLC --> Slave  max. 32 
		-------------------------------------------------------------------------------------------------------------------------------------------------------------
		NumberOfTxPDO 						UINT;			Send PDO :      Slave --> MOVI-PLC  max 32 
		-------------------------------------------------------------------------------------------------------------------------------------------------------------	
		SyncTime 								USINT;			Cycle time of the sync telegram in ms. 
																Default = 0 : no sync will be started.
																If  SyncTime > 0, this FB initializes a sync telegram with the ID set at SyncCOBID. 
																The slave has to support synchronous communication 
		-------------------------------------------------------------------------------------------------------------------------------------------------------------
		SyncCOBID							UINT;			Index 1005h. ID of the sync telegram. Usually 16#80. IF 0, the ID won't be written.
		-------------------------------------------------------------------------------------------------------------------------------------------------------------
		SyncTimeOut 							INT := -1;		Index 1006h. Normally equal to SyncTime. 
																The slave usually set SyncTimeOut equal to SyncTime * 1.5. 
																If < 0, the index won't be written. 0 means no control over the sync interval 
		-------------------------------------------------------------------------------------------------------------------------------------------------------------
		stInitialParameter_COSlave 			MC_INITIALPARAMETER_COSLAVE;
												(*#################################################################
												With this struct, user defined parameters will be written to the BusCoupler after the
												initialization of the MPLC_ConnectUniversalSlave_CANopen. 
												Add the following code to your program to initialise the struct : 
												Example:
												Index 16#6423:	Activates the event-driven transmission of PDOs with analog inputs
												Index 16#3500:	Index from the manufacturer specific profile area
	
													stInitialParameter_COSlave.aIndex[1] := 16#6423;  	(* Index to write to *)
													stInitialParameter_COSlave.aSubIndex[1] := 0;   	(* SubIndex to write to *)
													stInitialParameter_COSlave.aBytes[1] := 1;   		(* Number of bytes to write  *)
													stInitialParameter_COSlave.aData[1] := 1;   			(* Data *)
	
													stInitialParameter_COSlave.aIndex[2] := 16#3500;  	(* Index to write to *)
													stInitialParameter_COSlave.aSubIndex[2] := 0;   	(* SubIndex to write to *)
													stInitialParameter_COSlave.aBytes[2] := 2;   		(* Number of bytes to write *)
													stInitialParameter_COSlave.aData[2] := 5;   			(* Data *)
	
												If there are more than 10 (DHP11B) or 64 (DHx41B) parameters to write, declare 
												NUMOF_INITIALPARAMETER in your program.
	
													VAR_GLOBAL CONSTANT
														NUMOF_INITIALPARAMETER : UDINT := 20;	
													END_VAR
	
												##################################################################*)
			-------------------------------------------------------------------------------------------------------------------------------------------------------------
		(* IDs of the PDO telegrams. The IDs are always calculated with the following IDs as a basis + the address of the bus coupler *)

		RxPDO 								ARRAY[1..32] OF MC_PDO_COSLAVE;			(* MOVI-PLC --> Slave *)
												(* := 16#200,16#300,16#400,16#500,16#780,16#240,16#340,16#440,16#540,16#7C0;	*)
		-------------------------------------------------------------------------------------------------------------------------------------------------------------
		TxPDO 								ARRAY[1..32] OF MC_PDO_COSLAVE; 			(* Slave --> MOVI-PLC *)
												(*:= 16#180,16#280,16#380,16#480,16#680,16#1C0,16#2C0,16#3C0,16#4C0,16#6C0;*)
	*)
END_VAR

(* @END_DECLARATION := '0' *)
IF Enable AND NOT Done THEN

	(*########################################################

		Configuration of CANopenSlave (Beckhoff BK5120)
		
	#########################################################

		TransmissionType for TxPDOs and RxPDOs:

			0:										Event controlled and sychron (with SYNC-Object)
			1-240:									Cyclic and synchron (with SYNC-Object)
			254:									Producer specified
			255:									Acyclic and eventcontrolled 
			255 and EventTime = InhibitTime:	Cyclic

	#########################################################	*)


	(*************************************************** TxPDOs of CANOpenSlave ( MOVI-PLC ReceiveObjects) ***********************************************************)

	ExtConfig.NumberOfTxPDO				:= 2;		(*  TxPDO ---> CANopenSlave Transmit *)

	ExtConfig.TxPDO[1].EventTime			:= 200;		(* Slave: Index 0x18xx SubIndex 5: CycleTime in ms for CANopenSlave TXPDO *)
	ExtConfig.TxPDO[1].InhibitTime			:= 5;		(* Slave: Index 0x18xx SubIndex 3: InhibitTime in ms for CANopenSlave TxPDO *)
	ExtConfig.TxPDO[1].TransmissionType	:= 255;		(* Slave: Index 0x18xx SubIndex 2: TransmissionType for this TxPDO *)

	ExtConfig.TxPDO[2].EventTime			:= 100;		(* Slave: Index 0x18xx SubIndex 5: CycleTime in ms for CANopenSlave TXPDO *)
	ExtConfig.TxPDO[2].InhibitTime			:= 100;		(* Slave: Index 0x18xx SubIndex 3: InhibitTime in ms for CANopenSlave TxPDO *)
	ExtConfig.TxPDO[2].TransmissionType	:= 255;		(* Slave: Index 0x18xx SubIndex 2: TransmissionType for this TxPDO *)


	(*************************************************** RxPDOs of CANOpenSlave ( MOVI-PLC TransmitObjects) **********************************************************)

	ExtConfig.NumberOfRxPDO				:= 2;		(*  RxPDO ---> CANopenSlave Receive *)

	ExtConfig.RxPDO[1].EventTime			:= 200;		(* Master: CycleTime in ms for TransmitObjects (MOVI-PLC) *)
	ExtConfig.RxPDO[1].InhibitTime			:= 5;		(* Master: InhibitTime in ms for TransmitObjects (MOVI-PLC) *)
	ExtConfig.RxPDO[1].Length				:= 8;		(* Master: Length of this TransmitObject in bytes *)
	ExtConfig.RxPDO[1].TransmissionType	:= 255;		(* Slave: Index 0x14xx SubIndex 2: TransmissionType for this RxPDO *)

	ExtConfig.RxPDO[2].EventTime			:= 100;		(* Master: CycleTime in ms for TransmitObjects (MOVI-PLC) *)
	ExtConfig.RxPDO[2].InhibitTime			:= 100;		(* Master: InhibitTime in ms for TransmitObjects (MOVI-PLC) *)
	ExtConfig.RxPDO[2].Length				:= 8;		(* Master: Length of this TransmitObject in bytes *)
	ExtConfig.RxPDO[2].TransmissionType	:= 255;		(* Slave: Index 0x14xx SubIndex 2: TransmissionType for this RxPDO *)


	(***************************************************** Additional parameters to set in the CANOpenSlave  ***************************************************************)

	(* Enable transmission of analog inputs *)
	ExtConfig.stInitialParameter_COSlave.aIndex[1]			:= 16#6423;
	ExtConfig.stInitialParameter_COSlave.aSubIndex[1]	:= 0;
	ExtConfig.stInitialParameter_COSlave.aBytes[1]		:= 1;
	ExtConfig.stInitialParameter_COSlave.aData[1]			:= 1;

(*	(* Disable write protection, step 1 *)
	ExtConfig.stInitialParameter_COSlave.aIndex[2]			:= 16#4500;
	ExtConfig.stInitialParameter_COSlave.aSubIndex[2]	:= 0;
	ExtConfig.stInitialParameter_COSlave.aBytes[2]		:= 4;
	ExtConfig.stInitialParameter_COSlave.aData[2]			:= 16#E302_AFFE;

	(* Disable write protection, step 2 *)
	ExtConfig.stInitialParameter_COSlave.aIndex[3]			:= 16#4500;
	ExtConfig.stInitialParameter_COSlave.aSubIndex[3]	:= 0;
	ExtConfig.stInitialParameter_COSlave.aBytes[3]		:= 4;
	ExtConfig.stInitialParameter_COSlave.aData[3]			:= 16#E301_0001;

	(* Disable write protection, step 3 *)
	ExtConfig.stInitialParameter_COSlave.aIndex[4]			:= 16#4500;
	ExtConfig.stInitialParameter_COSlave.aSubIndex[4]	:= 0;
	ExtConfig.stInitialParameter_COSlave.aBytes[4]		:= 4;
	ExtConfig.stInitialParameter_COSlave.aData[4]			:= 16#E300_0101;
*)

	(********************************************** Additional configuration. Default values are in most cases sufficient *****************************************************)

	ExtConfig.bIOHold						:= FALSE;
	ExtConfig.bNoSettingsDownload			:= FALSE;
	ExtConfig.bWaitBeforeOperational		:= FALSE;
	ExtConfig.bResetUnconditional			:= FALSE;

	ExtConfig.TimeOutHeartBeat				:= 400;				(* [ms] *)
	ExtConfig.TimeOutNodeGuarding		:= 0;				(* [ms]. CAUTION ! DHP11B (MOVI-PLC basic) does NOT support NodeGuarding *)
	ExtConfig.TimeOutInitSequence			:= 10;				(* [seconds]. If the Init-Sequence takes longer than this TimeOut time --> Error *)
	ExtConfig.SyncCOBID						:= 0;				(* SyncObject ID for TransmissionType 0-240 (RxPDO). Usually 128. If 0, the ID will not be written *)
	ExtConfig.SyncTime						:= 0;				(* CycleTime for the SYNC-Object *)

	ExtConfig.TxPDO[1].COBID				:= 16#180;			(* In order to disable the use of RTR frames for the PDOs, set bit 30 = "RTR not allowed" *)
	ExtConfig.TxPDO[2].COBID				:= 16#280;			(* Ex. 16#4000_0280 *)
	ExtConfig.TxPDO[3].COBID				:= 16#380;
	ExtConfig.TxPDO[4].COBID				:= 16#480;			(* NOTE! These values are base values. The input "Address" will automatically be added *)
	ExtConfig.TxPDO[5].COBID				:= 16#680;
	ExtConfig.TxPDO[6].COBID				:= 16#1C0;
	ExtConfig.TxPDO[7].COBID				:= 16#2C0;
	ExtConfig.TxPDO[8].COBID				:= 16#3C0;
	ExtConfig.TxPDO[9].COBID				:= 16#4C0;
	ExtConfig.TxPDO[10].COBID				:= 16#6C0;

	ExtConfig.RxPDO[1].COBID				:= 16#200;
	ExtConfig.RxPDO[2].COBID				:= 16#300;
	ExtConfig.RxPDO[3].COBID				:= 16#400;
	ExtConfig.RxPDO[4].COBID				:= 16#500;
	ExtConfig.RxPDO[5].COBID				:= 16#780;
	ExtConfig.RxPDO[6].COBID				:= 16#240;
	ExtConfig.RxPDO[7].COBID				:= 16#340;
	ExtConfig.RxPDO[8].COBID				:= 16#440;
	ExtConfig.RxPDO[9].COBID				:= 16#540;
	ExtConfig.RxPDO[10].COBID				:= 16#7C0;

	Done := TRUE;

END_IF
END_FUNCTION_BLOCK


(* @NESTEDCOMMENTS := 'Yes' *)
(* @PATH := '\/CodeSamples\/CANopen\/UniversalMaster' *)
(* @OBJECTFLAGS := '0, 8' *)
(* @SYMFILEFLAGS := '2048' *)
FUNCTION_BLOCK FB_Configuration_CANopenSlave_FESTO_CPX
VAR_INPUT
	Enable: BOOL; 			(* Activate config *)
END_VAR
VAR_OUTPUT
	Done: BOOL;				(* Config done *)
END_VAR
VAR_IN_OUT
	ExtConfig : MC_EXTENDEDCONFIG_COSLAVE	;
	(*
		########################################################################################################
			MC_EXTENDEDCONFIG_COSLAVE
		#########################################################################################################

						
		Variable								Value			Description
		-------------------------------------------------------------------------------------------------------------------------------------------------------------
		bWaitBeforeOperational 				BOOL;			When TRUE, after the coupler has been parameterized, it won't be switched in operational
																before this variable is FALSE. This can be used for example, to store the configuration with the FB
																MPLC_Universal_CANopen, with Service "SEWIOS_STORE", after a reset of the coppler 
		-------------------------------------------------------------------------------------------------------------------------------------------------------------
		bNoSettingsDownload 				BOOL;			TRUE : No configuration of the module. The configuration has to be done manually.
		-------------------------------------------------------------------------------------------------------------------------------------------------------------
		bResetUnconditional 					BOOL;			Even if the Connect FB isn't in fault it is possible to reset the bus coppler
		-------------------------------------------------------------------------------------------------------------------------------------------------------------
		bIOHold 								BOOL;			TRUE : Input data remain unchanged and the output data are not resetet also if the FB is in fault 
		-------------------------------------------------------------------------------------------------------------------------------------------------------------
		TimeOutHeartBeat					UINT;			If this value (ms) is different to zero, HeartbeatMode will be activated
		-------------------------------------------------------------------------------------------------------------------------------------------------------------
		TimeOutNodeGuarding 				UINT;			If this value (ms) is different to zero, NodeGuarding will be activated. 
																Caution ! The MOVI-PLC basic doesn´t support NodeGuarding 
		-------------------------------------------------------------------------------------------------------------------------------------------------------------
		TimeOutInitSequence					UINT;			Timeout for initialisation sequence (seconds) 
		-------------------------------------------------------------------------------------------------------------------------------------------------------------
		NumberOfRxPDO 					UINT;			Receive PDO : MOVI-PLC --> Slave  max. 32 
		-------------------------------------------------------------------------------------------------------------------------------------------------------------
		NumberOfTxPDO 						UINT;			Send PDO :      Slave --> MOVI-PLC  max 32 
		-------------------------------------------------------------------------------------------------------------------------------------------------------------	
		SyncTime 								USINT;			Cycle time of the sync telegram in ms. 
																Default = 0 : no sync will be started.
																If  SyncTime > 0, this FB initializes a sync telegram with the ID set at SyncCOBID. 
																The slave has to support synchronous communication 
		-------------------------------------------------------------------------------------------------------------------------------------------------------------
		SyncCOBID							UINT;			Index 1005h. ID of the sync telegram. Usually 16#80. IF 0, the ID won't be written.
		-------------------------------------------------------------------------------------------------------------------------------------------------------------
		SyncTimeOut 							INT := -1;		Index 1006h. Normally equal to SyncTime. 
																The slave usually set SyncTimeOut equal to SyncTime * 1.5. 
																If < 0, the index won't be written. 0 means no control over the sync interval 
		-------------------------------------------------------------------------------------------------------------------------------------------------------------
		stInitialParameter_COSlave 			MC_INITIALPARAMETER_COSLAVE;
												(*#################################################################
												With this struct, user defined parameters will be written to the BusCoupler after the
												initialization of the MPLC_ConnectUniversalSlave_CANopen. 
												Add the following code to your program to initialise the struct : 
												Example:
												Index 16#6423:	Activates the event-driven transmission of PDOs with analog inputs
												Index 16#3500:	Index from the manufacturer specific profile area
	
													stInitialParameter_COSlave.aIndex[1] := 16#6423;  	(* Index to write to *)
													stInitialParameter_COSlave.aSubIndex[1] := 0;   	(* SubIndex to write to *)
													stInitialParameter_COSlave.aBytes[1] := 1;   		(* Number of bytes to write  *)
													stInitialParameter_COSlave.aData[1] := 1;   			(* Data *)
	
													stInitialParameter_COSlave.aIndex[2] := 16#3500;  	(* Index to write to *)
													stInitialParameter_COSlave.aSubIndex[2] := 0;   	(* SubIndex to write to *)
													stInitialParameter_COSlave.aBytes[2] := 2;   		(* Number of bytes to write *)
													stInitialParameter_COSlave.aData[2] := 5;   			(* Data *)
	
												If there are more than 10 (DHP11B) or 64 (DHx41B) parameters to write, declare 
												NUMOF_INITIALPARAMETER in your program.
	
													VAR_GLOBAL CONSTANT
														NUMOF_INITIALPARAMETER : UDINT := 20;	
													END_VAR
	
												##################################################################*)
			-------------------------------------------------------------------------------------------------------------------------------------------------------------
		(* IDs of the PDO telegrams. The IDs are always calculated with the following IDs as a basis + the address of the bus coupler *)

		RxPDO 								ARRAY[1..32] OF MC_PDO_COSLAVE;			(* MOVI-PLC --> Slave *)
												(* := 16#200,16#300,16#400,16#500,16#780,16#240,16#340,16#440,16#540,16#7C0;	*)
		-------------------------------------------------------------------------------------------------------------------------------------------------------------
		TxPDO 								ARRAY[1..32] OF MC_PDO_COSLAVE; 			(* Slave --> MOVI-PLC *)
												(*:= 16#180,16#280,16#380,16#480,16#680,16#1C0,16#2C0,16#3C0,16#4C0,16#6C0;*)
	*)
END_VAR

(* @END_DECLARATION := '0' *)
IF Enable AND NOT Done THEN

	(*########################################################

		Configuration of CANopenSlave FESTO CPX FB14
		
	#########################################################

		TransmissionType for TxPDOs and RxPDOs:

			0:										Event controlled and sychron (with SYNC-Object)
			1-240:									Cyclic and synchron (with SYNC-Object)
			254:									Producer specified
			255:									Acyclic and eventcontrolled 
			255 and EventTime = InhibitTime:	Cyclic

	#########################################################	*)


	(*************************************************** TxPDOs of CANOpenSlave ( MOVI-PLC ReceiveObjects) ***********************************************************)

	ExtConfig.NumberOfTxPDO				:= 4;		(*  TxPDO ---> CANopenSlave Transmit *)

	ExtConfig.TxPDO[1].EventTime			:= 200;		(* Slave: Index 0x18xx SubIndex 5: CycleTime in ms for CANopenSlave TXPDO *)
	ExtConfig.TxPDO[1].InhibitTime			:= 5;		(* Slave: Index 0x18xx SubIndex 3: InhibitTime in ms for CANopenSlave TxPDO *)
	ExtConfig.TxPDO[1].TransmissionType	:= 255;		(* Slave: Index 0x18xx SubIndex 2: TransmissionType for this TxPDO *)

	ExtConfig.TxPDO[2].EventTime			:= 100;		(* Slave: Index 0x18xx SubIndex 5: CycleTime in ms for CANopenSlave TXPDO *)
	ExtConfig.TxPDO[2].InhibitTime			:= 100;		(* Slave: Index 0x18xx SubIndex 3: InhibitTime in ms for CANopenSlave TxPDO *)
	ExtConfig.TxPDO[2].TransmissionType	:= 255;		(* Slave: Index 0x18xx SubIndex 2: TransmissionType for this TxPDO *)

	ExtConfig.TxPDO[3].EventTime			:= 100;		(* Slave: Index 0x18xx SubIndex 5: CycleTime in ms for CANopenSlave TXPDO *)
	ExtConfig.TxPDO[3].InhibitTime			:= 100;		(* Slave: Index 0x18xx SubIndex 3: InhibitTime in ms for CANopenSlave TxPDO *)
	ExtConfig.TxPDO[3].TransmissionType	:= 255;		(* Slave: Index 0x18xx SubIndex 2: TransmissionType for this TxPDO *)

	ExtConfig.TxPDO[4].EventTime			:= 100;		(* Slave: Index 0x18xx SubIndex 5: CycleTime in ms for CANopenSlave TXPDO *)
	ExtConfig.TxPDO[4].InhibitTime			:= 100;		(* Slave: Index 0x18xx SubIndex 3: InhibitTime in ms for CANopenSlave TxPDO *)
	ExtConfig.TxPDO[4].TransmissionType	:= 255;		(* Slave: Index 0x18xx SubIndex 2: TransmissionType for this TxPDO *)


	(*************************************************** RxPDOs of CANOpenSlave ( MOVI-PLC TransmitObjects) **********************************************************)

	ExtConfig.NumberOfRxPDO				:= 4;		(*  RxPDO ---> CANopenSlave Receive *)

	ExtConfig.RxPDO[1].EventTime			:= 200;		(* Master: CycleTime in ms for TransmitObjects (MOVI-PLC) *)
	ExtConfig.RxPDO[1].InhibitTime			:= 5;		(* Master: InhibitTime in ms for TransmitObjects (MOVI-PLC) *)
	ExtConfig.RxPDO[1].Length				:= 8;		(* Master: Length of this TransmitObject in bytes *)
	ExtConfig.RxPDO[1].TransmissionType	:= 255;		(* Slave: Index 0x14xx SubIndex 2: TransmissionType for this RxPDO *)

	ExtConfig.RxPDO[2].EventTime			:= 100;		(* Master: CycleTime in ms for TransmitObjects (MOVI-PLC) *)
	ExtConfig.RxPDO[2].InhibitTime			:= 100;		(* Master: InhibitTime in ms for TransmitObjects (MOVI-PLC) *)
	ExtConfig.RxPDO[2].Length				:= 8;		(* Master: Length of this TransmitObject in bytes *)
	ExtConfig.RxPDO[2].TransmissionType	:= 255;		(* Slave: Index 0x14xx SubIndex 2: TransmissionType for this RxPDO *)

	ExtConfig.RxPDO[3].EventTime			:= 100;		(* Master: CycleTime in ms for TransmitObjects (MOVI-PLC) *)
	ExtConfig.RxPDO[3].InhibitTime			:= 100;		(* Master: InhibitTime in ms for TransmitObjects (MOVI-PLC) *)
	ExtConfig.RxPDO[3].Length				:= 8;		(* Master: Length of this TransmitObject in bytes *)
	ExtConfig.RxPDO[3].TransmissionType	:= 255;		(* Slave: Index 0x14xx SubIndex 2: TransmissionType for this RxPDO *)

	ExtConfig.RxPDO[4].EventTime			:= 100;		(* Master: CycleTime in ms for TransmitObjects (MOVI-PLC) *)
	ExtConfig.RxPDO[4].InhibitTime			:= 100;		(* Master: InhibitTime in ms for TransmitObjects (MOVI-PLC) *)
	ExtConfig.RxPDO[4].Length				:= 8;		(* Master: Length of this TransmitObject in bytes *)
	ExtConfig.RxPDO[4].TransmissionType	:= 255;		(* Slave: Index 0x14xx SubIndex 2: TransmissionType for this RxPDO *)


	(***************************************************** Additional parameters to set in the CANOpenSlave  ***************************************************************)

(*	(* Enable transmission of analog inputs *)
	ExtConfig.stInitialParameter_COSlave.aIndex[1]			:= 16#6423;
	ExtConfig.stInitialParameter_COSlave.aSubIndex[1]	:= 0;
	ExtConfig.stInitialParameter_COSlave.aBytes[1]		:= 1;
	ExtConfig.stInitialParameter_COSlave.aData[1]			:= 1;
*)

	(********************************************** Additional configuration. Default values are in most cases sufficient *****************************************************)

	ExtConfig.bIOHold						:= FALSE;
	ExtConfig.bNoSettingsDownload			:= FALSE;
	ExtConfig.bWaitBeforeOperational		:= FALSE;
	ExtConfig.bResetUnconditional			:= FALSE;

	ExtConfig.TimeOutHeartBeat				:= 400;				(* [ms] *)
	ExtConfig.TimeOutNodeGuarding		:= 0;				(* [ms]. CAUTION ! DHP11B (MOVI-PLC basic) does NOT support NodeGuarding *)
	ExtConfig.TimeOutInitSequence			:= 10;				(* [seconds]. If the Init-Sequence takes longer than this TimeOut time --> Error *)
	ExtConfig.SyncCOBID						:= 0;				(* SyncObject ID for TransmissionType 0-240 (RxPDO). Usually 128. If 0, the ID will not be written *)
	ExtConfig.SyncTime						:= 0;				(* CycleTime for the SYNC-Object *)

	ExtConfig.TxPDO[1].COBID				:= 16#180;			(* In order to disable the use of RTR frames for the PDOs, set bit 30 = "RTR not allowed" *)
	ExtConfig.TxPDO[2].COBID				:= 16#280;			(* Ex. 16#4000_0280 *)
	ExtConfig.TxPDO[3].COBID				:= 16#380;
	ExtConfig.TxPDO[4].COBID				:= 16#480;			(* NOTE! These values are base values. The input "Address" will automatically be added *)
	ExtConfig.TxPDO[5].COBID				:= 16#680;
	ExtConfig.TxPDO[6].COBID				:= 16#1C0;
	ExtConfig.TxPDO[7].COBID				:= 16#2C0;
	ExtConfig.TxPDO[8].COBID				:= 16#3C0;
	ExtConfig.TxPDO[9].COBID				:= 16#4C0;
	ExtConfig.TxPDO[10].COBID				:= 16#6C0;

	ExtConfig.RxPDO[1].COBID				:= 16#200;
	ExtConfig.RxPDO[2].COBID				:= 16#300;
	ExtConfig.RxPDO[3].COBID				:= 16#400;
	ExtConfig.RxPDO[4].COBID				:= 16#500;
	ExtConfig.RxPDO[5].COBID				:= 16#780;
	ExtConfig.RxPDO[6].COBID				:= 16#240;
	ExtConfig.RxPDO[7].COBID				:= 16#340;
	ExtConfig.RxPDO[8].COBID				:= 16#440;
	ExtConfig.RxPDO[9].COBID				:= 16#540;
	ExtConfig.RxPDO[10].COBID				:= 16#7C0;

	Done := TRUE;

END_IF

END_FUNCTION_BLOCK


(* @NESTEDCOMMENTS := 'Yes' *)
(* @PATH := '\/CodeSamples\/CANopen\/UniversalMaster' *)
(* @OBJECTFLAGS := '0, 8' *)
(* @SYMFILEFLAGS := '2048' *)
FUNCTION_BLOCK FB_Configuration_CANopenSlave_FRABA_AbsEncoder
VAR_INPUT
	Enable: BOOL; 			(* Activate config *)
END_VAR
VAR_OUTPUT
	Done: BOOL;				(* Config done *)
END_VAR
VAR_IN_OUT
	ExtConfig : MC_EXTENDEDCONFIG_COSLAVE	;
	(*
		########################################################################################################
			MC_EXTENDEDCONFIG_COSLAVE
		#########################################################################################################

						
		Variable								Value			Description
		-------------------------------------------------------------------------------------------------------------------------------------------------------------
		bWaitBeforeOperational 				BOOL;			When TRUE, after the coupler has been parameterized, it won't be switched in operational
																before this variable is FALSE. This can be used for example, to store the configuration with the FB
																MPLC_Universal_CANopen, with Service "SEWIOS_STORE", after a reset of the coppler 
		-------------------------------------------------------------------------------------------------------------------------------------------------------------
		bNoSettingsDownload 				BOOL;			TRUE : No configuration of the module. The configuration has to be done manually.
		-------------------------------------------------------------------------------------------------------------------------------------------------------------
		bResetUnconditional 					BOOL;			Even if the Connect FB isn't in fault it is possible to reset the bus coppler
		-------------------------------------------------------------------------------------------------------------------------------------------------------------
		bIOHold 								BOOL;			TRUE : Input data remain unchanged and the output data are not resetet also if the FB is in fault 
		-------------------------------------------------------------------------------------------------------------------------------------------------------------
		TimeOutHeartBeat					UINT;			If this value (ms) is different to zero, HeartbeatMode will be activated
		-------------------------------------------------------------------------------------------------------------------------------------------------------------
		TimeOutNodeGuarding 				UINT;			If this value (ms) is different to zero, NodeGuarding will be activated. 
																Caution ! The MOVI-PLC basic doesn´t support NodeGuarding 
		-------------------------------------------------------------------------------------------------------------------------------------------------------------
		TimeOutInitSequence					UINT;			Timeout for initialisation sequence (seconds) 
		-------------------------------------------------------------------------------------------------------------------------------------------------------------
		NumberOfRxPDO 					UINT;			Receive PDO : MOVI-PLC --> Slave  max. 32 
		-------------------------------------------------------------------------------------------------------------------------------------------------------------
		NumberOfTxPDO 						UINT;			Send PDO :      Slave --> MOVI-PLC  max 32 
		-------------------------------------------------------------------------------------------------------------------------------------------------------------	
		SyncTime 								USINT;			Cycle time of the sync telegram in ms. 
																Default = 0 : no sync will be started.
																If  SyncTime > 0, this FB initializes a sync telegram with the ID set at SyncCOBID. 
																The slave has to support synchronous communication 
		-------------------------------------------------------------------------------------------------------------------------------------------------------------
		SyncCOBID							UINT;			Index 1005h. ID of the sync telegram. Usually 16#80. IF 0, the ID won't be written.
		-------------------------------------------------------------------------------------------------------------------------------------------------------------
		SyncTimeOut 							INT := -1;		Index 1006h. Normally equal to SyncTime. 
																The slave usually set SyncTimeOut equal to SyncTime * 1.5. 
																If < 0, the index won't be written. 0 means no control over the sync interval 
		-------------------------------------------------------------------------------------------------------------------------------------------------------------
		stInitialParameter_COSlave 			MC_INITIALPARAMETER_COSLAVE;
												(*#################################################################
												With this struct, user defined parameters will be written to the BusCoupler after the
												initialization of the MPLC_ConnectUniversalSlave_CANopen. 
												Add the following code to your program to initialise the struct : 
												Example:
												Index 16#6423:	Activates the event-driven transmission of PDOs with analog inputs
												Index 16#3500:	Index from the manufacturer specific profile area
	
													stInitialParameter_COSlave.aIndex[1] := 16#6423;  	(* Index to write to *)
													stInitialParameter_COSlave.aSubIndex[1] := 0;   	(* SubIndex to write to *)
													stInitialParameter_COSlave.aBytes[1] := 1;   		(* Number of bytes to write  *)
													stInitialParameter_COSlave.aData[1] := 1;   			(* Data *)
	
													stInitialParameter_COSlave.aIndex[2] := 16#3500;  	(* Index to write to *)
													stInitialParameter_COSlave.aSubIndex[2] := 0;   	(* SubIndex to write to *)
													stInitialParameter_COSlave.aBytes[2] := 2;   		(* Number of bytes to write *)
													stInitialParameter_COSlave.aData[2] := 5;   			(* Data *)
	
												If there are more than 10 (DHP11B) or 64 (DHx41B) parameters to write, declare 
												NUMOF_INITIALPARAMETER in your program.
	
													VAR_GLOBAL CONSTANT
														NUMOF_INITIALPARAMETER : UDINT := 20;	
													END_VAR
	
												##################################################################*)
			-------------------------------------------------------------------------------------------------------------------------------------------------------------
		(* IDs of the PDO telegrams. The IDs are always calculated with the following IDs as a basis + the address of the bus coupler *)

		RxPDO 								ARRAY[1..32] OF MC_PDO_COSLAVE;			(* MOVI-PLC --> Slave *)
												(* := 16#200,16#300,16#400,16#500,16#780,16#240,16#340,16#440,16#540,16#7C0;	*)
		-------------------------------------------------------------------------------------------------------------------------------------------------------------
		TxPDO 								ARRAY[1..32] OF MC_PDO_COSLAVE; 			(* Slave --> MOVI-PLC *)
												(*:= 16#180,16#280,16#380,16#480,16#680,16#1C0,16#2C0,16#3C0,16#4C0,16#6C0;*)
	*)
END_VAR

(* @END_DECLARATION := '0' *)
IF Enable AND NOT Done THEN

	(*########################################################

		Configuration of CANopenSlave (FRABA AbsEncoder)
		
		NOTE! 
		The FRABA AbsEncoder occupy the chosen CAN address plus 1 on the
		CAN bus. Example: Switch inside the Absolute encoder is set to 9. The IDs
		used for CAN bus communication will correspond to adress 10.
		IMPORTANT! Set the address switch to one address lower than you intend
		to use. This way it will work well together with other CANopen modules on 
		the same bus, i.e. I/O modules etc.

			Wanted address:			10
			Abs.Enc. switch setting:	  9
			Input to function block:	10

	#########################################################

		TransmissionType for TxPDOs and RxPDOs:

			0:										Event controlled and sychron (with SYNC-Object)
			1-240:									Cyclic and synchron (with SYNC-Object)
			254:									Producer specified
			255:									Acyclic and eventcontrolled 
			255 and EventTime = InhibitTime:	Cyclic

	#########################################################	*)


	(*************************************************** TxPDOs of CANOpenSlave ( MOVI-PLC ReceiveObjects) ***********************************************************)

	ExtConfig.NumberOfTxPDO				:= 1;		(*  TxPDO ---> CANopenSlave Transmit *)

	ExtConfig.TxPDO[1].EventTime			:= 20;		(* Slave: Index 0x18xx SubIndex 5: CycleTime in ms for CANopenSlave TXPDO *)
	ExtConfig.TxPDO[1].InhibitTime			:= 20;		(* Slave: Index 0x18xx SubIndex 3: InhibitTime in ms for CANopenSlave TxPDO *)
	ExtConfig.TxPDO[1].TransmissionType	:= 255;		(* Slave: Index 0x18xx SubIndex 2: TransmissionType for this TxPDO *)


	(*************************************************** RxPDOs of CANOpenSlave ( MOVI-PLC TransmitObjects) **********************************************************)

	ExtConfig.NumberOfRxPDO				:= 0;		(*  RxPDO ---> CANopenSlave Receive *)

	(* ExtConfig.RxPDO[1].EventTime		:= 0;		(* Master: CycleTime in ms for TransmitObjects (MOVI-PLC) *)
	ExtConfig.RxPDO[1].InhibitTime			:= 0;		(* Master: InhibitTime in ms for TransmitObjects (MOVI-PLC) *)
	ExtConfig.RxPDO[1].Length				:= 2;		(* Master: Length of this TransmitObject in bytes *)
	ExtConfig.RxPDO[1].TransmissionType	:= 255;		(* Slave: Index 0x14xx SubIndex 2: TransmissionType for this RxPDO *)*)


	(***************************************************** Additional parameters to set in the CANOpenSlave  ***************************************************************)

	(* Set rotation direction *)
	ExtConfig.stInitialParameter_COSlave.aIndex[1]			:= 16#6000;
	ExtConfig.stInitialParameter_COSlave.aSubIndex[1]	:= 0;
	ExtConfig.stInitialParameter_COSlave.aBytes[1]		:= 2;
	ExtConfig.stInitialParameter_COSlave.aData[1]			:= 0;			(* 0 = CV, 1 = CCV *)

	(* Write reference offset to AbsEncoder, Index 2103.0, data = new position *)
	(* Save values in Flash memory in the AbsEncoder, Index 1010.1, data = 16#65766173 (evas) *)
	(* Write Delivery state to AbsEncoder, Index 1011.1, data = 16#64616F6C (daol) *)


	(********************************************** Additional configuration. Default values are in most cases sufficient *****************************************************)

	ExtConfig.bIOHold						:= FALSE;
	ExtConfig.bNoSettingsDownload			:= FALSE;
	ExtConfig.bWaitBeforeOperational		:= FALSE;
	ExtConfig.bResetUnconditional			:= FALSE;

	ExtConfig.bNoHeartBeat_Consumer			:= TRUE;
	ExtConfig.TimeOutHeartBeat				:= 400;				(* [ms] *)
	ExtConfig.TimeOutNodeGuarding		:= 0;				(* [ms]. CAUTION ! DHP11B (MOVI-PLC basic) does NOT support NodeGuarding *)
	ExtConfig.TimeOutInitSequence			:= 16;				(* [seconds]. If the Init-Sequence takes longer than this TimeOut time --> Error *)
	ExtConfig.SyncCOBID						:= 0;				(* SyncObject ID for TransmissionType 0-240 (RxPDO). Usually 128. If 0, the ID will not be written *)
	ExtConfig.SyncTime						:= 0;				(* CycleTime for the SYNC-Object *)

	ExtConfig.SBUSGateway_Address			:= 0(*1001*);			(* OSC71B Address,when used *)

	ExtConfig.TxPDO[1].COBID				:= 16#180;			(* In order to disable the use of RTR frames for the PDOs, set bit 30 = "RTR not allowed" *)
	ExtConfig.TxPDO[2].COBID				:= 16#280;			(* Ex. 16#4000_0280 *)
	ExtConfig.TxPDO[3].COBID				:= 16#380;
	ExtConfig.TxPDO[4].COBID				:= 16#480;			(* NOTE! These values are base values. The input "Address" will automatically be added *)
	ExtConfig.TxPDO[5].COBID				:= 16#680;
	ExtConfig.TxPDO[6].COBID				:= 16#1C0;
	ExtConfig.TxPDO[7].COBID				:= 16#2C0;
	ExtConfig.TxPDO[8].COBID				:= 16#3C0;
	ExtConfig.TxPDO[9].COBID				:= 16#4C0;
	ExtConfig.TxPDO[10].COBID				:= 16#6C0;

	ExtConfig.RxPDO[1].COBID				:= 16#200;
	ExtConfig.RxPDO[2].COBID				:= 16#300;
	ExtConfig.RxPDO[3].COBID				:= 16#400;
	ExtConfig.RxPDO[4].COBID				:= 16#500;
	ExtConfig.RxPDO[5].COBID				:= 16#780;
	ExtConfig.RxPDO[6].COBID				:= 16#240;
	ExtConfig.RxPDO[7].COBID				:= 16#340;
	ExtConfig.RxPDO[8].COBID				:= 16#440;
	ExtConfig.RxPDO[9].COBID				:= 16#540;
	ExtConfig.RxPDO[10].COBID				:= 16#7C0;

	Done := TRUE;

END_IF
END_FUNCTION_BLOCK


(* @NESTEDCOMMENTS := 'Yes' *)
(* @PATH := '\/CodeSamples\/CANopen\/UniversalMaster' *)
(* @OBJECTFLAGS := '0, 8' *)
(* @SYMFILEFLAGS := '2048' *)
FUNCTION_BLOCK FB_Configuration_CANopenSlave_HBM
(*Configuration for scalemodule HBM AD103C*)
VAR_INPUT
	Enable: BOOL; 			(* Activate config *)
END_VAR
VAR_OUTPUT
	Done: BOOL;				(* Config done *)
END_VAR
VAR_IN_OUT
	ExtConfig : MC_EXTENDEDCONFIG_COSLAVE	;
	(*
		########################################################################################################
			MC_EXTENDEDCONFIG_COSLAVE
		#########################################################################################################

						
		Variable								Value			Description
		-------------------------------------------------------------------------------------------------------------------------------------------------------------
		bWaitBeforeOperational 				BOOL;			When TRUE, after the coupler has been parameterized, it won't be switched in operational
																before this variable is FALSE. This can be used for example, to store the configuration with the FB
																MPLC_Universal_CANopen, with Service "SEWIOS_STORE", after a reset of the coppler 
		-------------------------------------------------------------------------------------------------------------------------------------------------------------
		bNoSettingsDownload 				BOOL;			TRUE : No configuration of the module. The configuration has to be done manually.
		-------------------------------------------------------------------------------------------------------------------------------------------------------------
		bResetUnconditional 					BOOL;			Even if the Connect FB isn't in fault it is possible to reset the bus coppler
		-------------------------------------------------------------------------------------------------------------------------------------------------------------
		bIOHold 								BOOL;			TRUE : Input data remain unchanged and the output data are not resetet also if the FB is in fault 
		-------------------------------------------------------------------------------------------------------------------------------------------------------------
		TimeOutHeartBeat					UINT;			If this value (ms) is different to zero, HeartbeatMode will be activated

		bNoHeartBeat_Producer:				BOOL := FALSE; (*Index 1017 SubIndex 0 not available *)
		-------------------------------------------------------------------------------------------------------------------------------------------------------------
		TimeOutNodeGuarding 				UINT;			If this value (ms) is different to zero, NodeGuarding will be activated. 
																Caution ! The MOVI-PLC basic doesn´t support NodeGuarding 
	
		bNoNodeGuarding:					BOOL:=FALSE; (* the Index of NodeGuarding isn`t available *)
		-------------------------------------------------------------------------------------------------------------------------------------------------------------
		TimeOutInitSequence					UINT;			Timeout for initialisation sequence (seconds) 
		-------------------------------------------------------------------------------------------------------------------------------------------------------------
		NumberOfRxPDO 					UINT;			Receive PDO : MOVI-PLC --> Slave  max. 32 
		-------------------------------------------------------------------------------------------------------------------------------------------------------------
		NumberOfTxPDO 						UINT;			Send PDO :      Slave --> MOVI-PLC  max 32 
		-------------------------------------------------------------------------------------------------------------------------------------------------------------	
		OffsetOfRxPDO:						UINT;			Offset for the 1. RxPDO
		-------------------------------------------------------------------------------------------------------------------------------------------------------------		
		OffsetOfTxPDO:						UINT;			Offset for the 1. TxPDO
		-------------------------------------------------------------------------------------------------------------------------------------------------------------	
		SyncTime 								USINT;			Cycle time of the sync telegram in ms. 
																Default = 0 : no sync will be started.
																If  SyncTime > 0, this FB initializes a sync telegram with the ID set at SyncCOBID. 
																The slave has to support synchronous communication 
		-------------------------------------------------------------------------------------------------------------------------------------------------------------
		SyncCOBID							UINT;			Index 1005h. ID of the sync telegram. Usually 16#80. IF 0, the ID won't be written.
		-------------------------------------------------------------------------------------------------------------------------------------------------------------
		SyncTimeOut 							INT := -1;		Index 1006h. Normally equal to SyncTime. 
																The slave usually set SyncTimeOut equal to SyncTime * 1.5. 
																If < 0, the index won't be written. 0 means no control over the sync interval 
		-------------------------------------------------------------------------------------------------------------------------------------------------------------
		stInitialParameter_COSlave 			MC_INITIALPARAMETER_COSLAVE;
												(*#################################################################
												With this struct, user defined parameters will be written to the BusCoupler after the
												initialization of the MPLC_ConnectUniversalSlave_CANopen. 
												Add the following code to your program to initialise the struct : 
												Example:
												Index 16#6423:	Activates the event-driven transmission of PDOs with analog inputs
												Index 16#3500:	Index from the manufacturer specific profile area
	
													stInitialParameter_COSlave.aIndex[1] := 16#6423;  	(* Index to write to *)
													stInitialParameter_COSlave.aSubIndex[1] := 0;   	(* SubIndex to write to *)
													stInitialParameter_COSlave.aBytes[1] := 1;   		(* Number of bytes to write  *)
													stInitialParameter_COSlave.aData[1] := 1;   			(* Data *)
	
													stInitialParameter_COSlave.aIndex[2] := 16#3500;  	(* Index to write to *)
													stInitialParameter_COSlave.aSubIndex[2] := 0;   	(* SubIndex to write to *)
													stInitialParameter_COSlave.aBytes[2] := 2;   		(* Number of bytes to write *)
													stInitialParameter_COSlave.aData[2] := 5;   			(* Data *)
	
												If there are more than 10 (DHP11B) or 64 (DHx41B) parameters to write, declare 
												NUMOF_INITIALPARAMETER in your program.
	
													VAR_GLOBAL CONSTANT
														NUMOF_INITIALPARAMETER : UDINT := 20;	
													END_VAR
	
												##################################################################*)

		bNoDeactivatePDO:			BOOL := FALSE; (* Change of Transmission Type, Inhibit- and Event- Time without deactivate RxPDO and TxPDO*)

			-------------------------------------------------------------------------------------------------------------------------------------------------------------
		(* IDs of the PDO telegrams. The IDs are always calculated with the following IDs as a basis + the address of the bus coupler *)

		RxPDO 								ARRAY[1..32] OF MC_PDO_COSLAVE;			(* MOVI-PLC --> Slave *)
												(* := 16#200,16#300,16#400,16#500,16#780,16#240,16#340,16#440,16#540,16#7C0;	*)
		-------------------------------------------------------------------------------------------------------------------------------------------------------------
		TxPDO 								ARRAY[1..32] OF MC_PDO_COSLAVE; 			(* Slave --> MOVI-PLC *)
												(*:= 16#180,16#280,16#380,16#480,16#680,16#1C0,16#2C0,16#3C0,16#4C0,16#6C0;*)
	*)
END_VAR


(* @END_DECLARATION := '0' *)
IF Enable AND NOT Done THEN

	(*########################################################

		Configuration of CANopenSlave HBM Waage)
		
		NOTE! 
		
	#########################################################

		TransmissionType for TxPDOs and RxPDOs:

			0:										Event controlled and sychron (with SYNC-Object)
			1-240:									Cyclic and synchron (with SYNC-Object)
			254:									Producer specified
			255:									Acyclic and eventcontrolled 
			255 and EventTime = InhibitTime:	Cyclic

	#########################################################	*)

	ExtConfig.bWaitBeforeOperational			:=FALSE;
	ExtConfig.bNoSettingsDownload				:=FALSE;
	ExtConfig.bResetUnconditional 				:=FALSE;
	ExtConfig.bIOHold							 :=FALSE;
	ExtConfig.TimeOutHeartBeat					 :=0;
	ExtConfig.bNoHeartBeat_Producer			 := FALSE; (*Index 1017 SubIndex 0 not available *)
	ExtConfig.TimeOutNodeGuarding			 :=100;
	ExtConfig.bNoNodeGuarding 				:= FALSE;(* the Index of NodeGuarding isn`t available *)
	ExtConfig.TimeOutInitSequence 				:=10;
	ExtConfig.SyncCOBID							:= 0;				(* SyncObject ID for TransmissionType 0-240 (RxPDO). Usually 128. If 0, the ID will not be written *)
	ExtConfig.SyncTime							:= 0;				(* CycleTime for the SYNC-Object *)



	(**************************************************** TxPDOs of CANOpenSlave ( MOVI-PLC ReceiveObjects) ************************************************************)

	ExtConfig.NumberOfTxPDO			:= 5;		(*  TxPDO ---> CANopenSlave Transmit *)
	ExtConfig.bNoTransmissionTyp_TxPDO := FALSE;(* Transmission Type for TxPDO not changeable *)
(* TxPDO ---> Sende-PDO1: Messwert/Status *)
	ExtConfig.TxPDO[1].EventTime		:= 0;		(* Master: CycleTime in ms for TransmitObjects (MOVI-PLC) *)
	ExtConfig.TxPDO[1].Length			:= 6;		(* Master: Length of this TransmitObject in bytes *)
	ExtConfig.TxPDO[1].TransmissionType := 254;
(*  TxPDO ---> Sende-PDO2: Triggerergebnis/Status *)
	ExtConfig.TxPDO[2].EventTime		:= 00;		(* Master: CycleTime in ms for TransmitObjects (MOVI-PLC) *)
	ExtConfig.TxPDO[2].Length			:= 6;		(* Master: Length of this TransmitObject in bytes *)
	ExtConfig.TxPDO[2].TransmissionType := 254;
(*  Sende PDO3: Dosierergebnis/Status  *)
	ExtConfig.TxPDO[3].EventTime		:= 00;		(* Master: CycleTime in ms for TransmitObjects (MOVI-PLC) *)
	ExtConfig.TxPDO[3].Length			:= 6;		(* Master: Length of this TransmitObject in bytes *)
	ExtConfig.TxPDO[3].TransmissionType := 254;
(*  TxPDO ---> Sende PDO4: Spitzenwerte Min und Max  *)
	ExtConfig.TxPDO[4].EventTime		:= 00;		(* Master: CycleTime in ms for TransmitObjects (MOVI-PLC) *)
	ExtConfig.TxPDO[4].Length			:= 8;		(* Master: Length of this TransmitObject in bytes *)
	ExtConfig.TxPDO[4].TransmissionType := 254;
(*  TxPDO ---> Sende-PDO5: Alarm Status *)
	ExtConfig.TxPDO[5].EventTime		:= 00;		(* Master: CycleTime in ms for TransmitObjects (MOVI-PLC) *)
	ExtConfig.TxPDO[5].Length			:= 4;	(* Master: Length of this TransmitObject in bytes *)
	ExtConfig.TxPDO[5].TransmissionType := 254;

	(*************************************************** RxPDOs of CANOpenSlave ( MOVI-PLC TransmitObjects) **********************************************************)

	ExtConfig.NumberOfRxPDO			:= 1;		(*  RxPDO ---> CANopenSlave Receive *)
	ExtConfig.bNoTransmissionTyp_RxPDO := FALSE;(* Transmission Type for RxPDO not changeable *)
	(* Empfangs-PDO: (Steuerwort)	^*)
	ExtConfig.RxPDO[1].InhibitTime		:= 0;		(* Master: InhibitTime in ms for TransmitObjects (MOVI-PLC) *)
	ExtConfig.RxPDO[1].Length			:= 2;		(* Master: Length of this TransmitObject in bytes *)
	ExtConfig.RxPDO[1].TransmissionType := 255;

	(***************************************************** Additional parameters to set in the CANOpenSlave  ***************************************************************)

	(* Set rotation direction *)
	ExtConfig.stInitialParameter_COSlave.aIndex[1]			:= 16#3400;
	ExtConfig.stInitialParameter_COSlave.aSubIndex[1]	:= 0;
	ExtConfig.stInitialParameter_COSlave.aBytes[1]		:= 4;
	ExtConfig.stInitialParameter_COSlave.aData[1]			:= 20;

	(********************************************** Additional configuration. Default values are in most cases sufficient *****************************************************)

	ExtConfig.bNoDeactivatePDO		 := TRUE; (* Change of Transmission Type, Inhibit- and Event- Time without deactivate RxPDO and TxPDO*)

	ExtConfig.TxPDO[1].COBID			:= 16#180;			(* Impossible to change*)
	ExtConfig.TxPDO[2].COBID			:= 16#280;			(* Impossible to change*)
	ExtConfig.TxPDO[3].COBID			:= 16#380;			 (* Impossible to change*)
	ExtConfig.TxPDO[4].COBID			:= 16#480;			(*480+	 Impossible to change*)
	ExtConfig.TxPDO[5].COBID			:= 16#1C0;			(* 300 + 3F Impossible to change*)

	ExtConfig.RxPDO[1].COBID			:= 16#200;		(* Impossible to change*)
	Done									 := TRUE;

END_IF
END_FUNCTION_BLOCK


(* @NESTEDCOMMENTS := 'Yes' *)
(* @PATH := '\/CodeSamples\/CANopen\/UniversalMaster' *)
(* @OBJECTFLAGS := '0, 8' *)
(* @SYMFILEFLAGS := '2048' *)
FUNCTION_BLOCK FB_Configuration_CANopenSlave_IVO_AbsEncoder
VAR_INPUT
	Enable: BOOL; 			(* Activate config *)
END_VAR
VAR_OUTPUT
	Done: BOOL;				(* Config done *)
END_VAR
VAR_IN_OUT
	ExtConfig : MC_EXTENDEDCONFIG_COSLAVE	;
	(*
		########################################################################################################
			MC_EXTENDEDCONFIG_COSLAVE
		#########################################################################################################

						
		Variable								Value			Description
		-------------------------------------------------------------------------------------------------------------------------------------------------------------
		bWaitBeforeOperational 				BOOL;			When TRUE, after the coupler has been parameterized, it won't be switched in operational
																before this variable is FALSE. This can be used for example, to store the configuration with the FB
																MPLC_Universal_CANopen, with Service "SEWIOS_STORE", after a reset of the coppler 
		-------------------------------------------------------------------------------------------------------------------------------------------------------------
		bNoSettingsDownload 				BOOL;			TRUE : No configuration of the module. The configuration has to be done manually.
		-------------------------------------------------------------------------------------------------------------------------------------------------------------
		bResetUnconditional 					BOOL;			Even if the Connect FB isn't in fault it is possible to reset the bus coppler
		-------------------------------------------------------------------------------------------------------------------------------------------------------------
		bIOHold 								BOOL;			TRUE : Input data remain unchanged and the output data are not resetet also if the FB is in fault 
		-------------------------------------------------------------------------------------------------------------------------------------------------------------
		TimeOutHeartBeat					UINT;			If this value (ms) is different to zero, HeartbeatMode will be activated
		-------------------------------------------------------------------------------------------------------------------------------------------------------------
		TimeOutNodeGuarding 				UINT;			If this value (ms) is different to zero, NodeGuarding will be activated. 
																Caution ! The MOVI-PLC basic doesn´t support NodeGuarding 
		-------------------------------------------------------------------------------------------------------------------------------------------------------------
		TimeOutInitSequence					UINT;			Timeout for initialisation sequence (seconds) 
		-------------------------------------------------------------------------------------------------------------------------------------------------------------
		NumberOfRxPDO 					UINT;			Receive PDO : MOVI-PLC --> Slave  max. 32 
		-------------------------------------------------------------------------------------------------------------------------------------------------------------
		NumberOfTxPDO 						UINT;			Send PDO :      Slave --> MOVI-PLC  max 32 
		-------------------------------------------------------------------------------------------------------------------------------------------------------------	
		SyncTime 								USINT;			Cycle time of the sync telegram in ms. 
																Default = 0 : no sync will be started.
																If  SyncTime > 0, this FB initializes a sync telegram with the ID set at SyncCOBID. 
																The slave has to support synchronous communication 
		-------------------------------------------------------------------------------------------------------------------------------------------------------------
		SyncCOBID							UINT;			Index 1005h. ID of the sync telegram. Usually 16#80. IF 0, the ID won't be written.
		-------------------------------------------------------------------------------------------------------------------------------------------------------------
		SyncTimeOut 							INT := -1;		Index 1006h. Normally equal to SyncTime. 
																The slave usually set SyncTimeOut equal to SyncTime * 1.5. 
																If < 0, the index won't be written. 0 means no control over the sync interval 
		-------------------------------------------------------------------------------------------------------------------------------------------------------------
		stInitialParameter_COSlave 			MC_INITIALPARAMETER_COSLAVE;
												(*#################################################################
												With this struct, user defined parameters will be written to the BusCoupler after the
												initialization of the MPLC_ConnectUniversalSlave_CANopen. 
												Add the following code to your program to initialise the struct : 
												Example:
												Index 16#6423:	Activates the event-driven transmission of PDOs with analog inputs
												Index 16#3500:	Index from the manufacturer specific profile area
	
													stInitialParameter_COSlave.aIndex[1] := 16#6423;  	(* Index to write to *)
													stInitialParameter_COSlave.aSubIndex[1] := 0;   	(* SubIndex to write to *)
													stInitialParameter_COSlave.aBytes[1] := 1;   		(* Number of bytes to write  *)
													stInitialParameter_COSlave.aData[1] := 1;   			(* Data *)
	
													stInitialParameter_COSlave.aIndex[2] := 16#3500;  	(* Index to write to *)
													stInitialParameter_COSlave.aSubIndex[2] := 0;   	(* SubIndex to write to *)
													stInitialParameter_COSlave.aBytes[2] := 2;   		(* Number of bytes to write *)
													stInitialParameter_COSlave.aData[2] := 5;   			(* Data *)
	
												If there are more than 10 (DHP11B) or 64 (DHx41B) parameters to write, declare 
												NUMOF_INITIALPARAMETER in your program.
	
													VAR_GLOBAL CONSTANT
														NUMOF_INITIALPARAMETER : UDINT := 20;	
													END_VAR
	
												##################################################################*)
			-------------------------------------------------------------------------------------------------------------------------------------------------------------
		(* IDs of the PDO telegrams. The IDs are always calculated with the following IDs as a basis + the address of the bus coupler *)

		RxPDO 								ARRAY[1..32] OF MC_PDO_COSLAVE;			(* MOVI-PLC --> Slave *)
												(* := 16#200,16#300,16#400,16#500,16#780,16#240,16#340,16#440,16#540,16#7C0;	*)
		-------------------------------------------------------------------------------------------------------------------------------------------------------------
		TxPDO 								ARRAY[1..32] OF MC_PDO_COSLAVE; 			(* Slave --> MOVI-PLC *)
												(*:= 16#180,16#280,16#380,16#480,16#680,16#1C0,16#2C0,16#3C0,16#4C0,16#6C0;*)
	*)
END_VAR

(* @END_DECLARATION := '0' *)
IF Enable AND NOT Done THEN

	(*########################################################

		Configuration of CANopenSlave (IVO AbsEncoder)
		
	#########################################################

		TransmissionType for TxPDOs and RxPDOs:

			0:										Event controlled and sychron (with SYNC-Object)
			1-240:									Cyclic and synchron (with SYNC-Object)
			254:									Producer specified
			255:									Acyclic and eventcontrolled 
			255 and EventTime = InhibitTime:	Cyclic

	#########################################################	*)


	(*************************************************** TxPDOs of CANOpenSlave ( MOVI-PLC ReceiveObjects) ***********************************************************)

	ExtConfig.NumberOfTxPDO				:= 1;		(*  TxPDO ---> CANopenSlave Transmit *)

	ExtConfig.TxPDO[1].EventTime			:= 20;		(* Slave: Index 0x18xx SubIndex 5: CycleTime in ms for CANopenSlave TXPDO *)
	ExtConfig.TxPDO[1].InhibitTime			:= 20;		(* Slave: Index 0x18xx SubIndex 3: InhibitTime in ms for CANopenSlave TxPDO *)
	ExtConfig.TxPDO[1].TransmissionType	:= 254;		(* Slave: Index 0x18xx SubIndex 2: TransmissionType for this TxPDO *)


	(*************************************************** RxPDOs of CANOpenSlave ( MOVI-PLC TransmitObjects) **********************************************************)

	ExtConfig.NumberOfRxPDO				:= 0;		(*  RxPDO ---> CANopenSlave Receive *)

	(* ExtConfig.RxPDO[1].EventTime		:= 0;		(* Master: CycleTime in ms for TransmitObjects (MOVI-PLC) *)
	ExtConfig.RxPDO[1].InhibitTime			:= 0;		(* Master: InhibitTime in ms for TransmitObjects (MOVI-PLC) *)
	ExtConfig.RxPDO[1].Length				:= 2;		(* Master: Length of this TransmitObject in bytes *)
	ExtConfig.RxPDO[1].TransmissionType	:= 255;		(* Slave: Index 0x14xx SubIndex 2: TransmissionType for this RxPDO *)*)


	(***************************************************** Additional parameters to set in the CANOpenSlave  ***************************************************************)

	(* Set rotation direction *)
	ExtConfig.stInitialParameter_COSlave.aIndex[1]			:= 16#6000;
	ExtConfig.stInitialParameter_COSlave.aSubIndex[1]	:= 0;
	ExtConfig.stInitialParameter_COSlave.aBytes[1]		:= 2;
	ExtConfig.stInitialParameter_COSlave.aData[1]			:= 0;		(* 0 = CV, 1 = CCV *)

	(* Write reference offset to AbsEncoder, Index 6003.0, data = new position *)
	(* Write Delivery state to AbsEncoder, Index 1011.1, data = 16#6C_6F_61_64 (load) *)
	(* Save values in Flash memory in the AbsEncoder, Index 1010.1, data = 16#73_61_76_65 (save) *)


	(********************************************** Additional configuration. Default values are in most cases sufficient *****************************************************)

	ExtConfig.bIOHold						:= FALSE;
	ExtConfig.bNoSettingsDownload			:= FALSE;
	ExtConfig.bWaitBeforeOperational		:= FALSE;
	ExtConfig.bResetUnconditional			:= FALSE;

	ExtConfig.TimeOutHeartBeat				:= 400;				(* [ms] *)
	ExtConfig.TimeOutNodeGuarding		:= 0;				(* [ms]. CAUTION ! DHP11B (MOVI-PLC basic) does NOT support NodeGuarding *)
	ExtConfig.TimeOutInitSequence			:= 5;				(* [seconds]. If the Init-Sequence takes longer than this TimeOut time --> Error *)
	ExtConfig.SyncCOBID						:= 0;				(* SyncObject ID for TransmissionType 0-240 (RxPDO). Usually 128. If 0, the ID will not be written *)
	ExtConfig.SyncTime						:= 0;				(* CycleTime for the SYNC-Object *)

	ExtConfig.TxPDO[1].COBID				:= 16#180;			(* In order to disable the use of RTR frames for the PDOs, set bit 30 = "RTR not allowed" *)
	ExtConfig.TxPDO[2].COBID				:= 16#280;			(* Ex. 16#4000_0280 *)
	ExtConfig.TxPDO[3].COBID				:= 16#380;
	ExtConfig.TxPDO[4].COBID				:= 16#480;			(* NOTE! These values are base values. The input "Address" will automatically be added *)
	ExtConfig.TxPDO[5].COBID				:= 16#680;
	ExtConfig.TxPDO[6].COBID				:= 16#1C0;
	ExtConfig.TxPDO[7].COBID				:= 16#2C0;
	ExtConfig.TxPDO[8].COBID				:= 16#3C0;
	ExtConfig.TxPDO[9].COBID				:= 16#4C0;
	ExtConfig.TxPDO[10].COBID				:= 16#6C0;

	ExtConfig.RxPDO[1].COBID				:= 16#200;
	ExtConfig.RxPDO[2].COBID				:= 16#300;
	ExtConfig.RxPDO[3].COBID				:= 16#400;
	ExtConfig.RxPDO[4].COBID				:= 16#500;
	ExtConfig.RxPDO[5].COBID				:= 16#780;
	ExtConfig.RxPDO[6].COBID				:= 16#240;
	ExtConfig.RxPDO[7].COBID				:= 16#340;
	ExtConfig.RxPDO[8].COBID				:= 16#440;
	ExtConfig.RxPDO[9].COBID				:= 16#540;
	ExtConfig.RxPDO[10].COBID				:= 16#7C0;

	Done := TRUE;

END_IF
END_FUNCTION_BLOCK


(* @NESTEDCOMMENTS := 'Yes' *)
(* @PATH := '\/CodeSamples\/CANopen\/UniversalMaster' *)
(* @OBJECTFLAGS := '0, 8' *)
(* @SYMFILEFLAGS := '2048' *)
FUNCTION_BLOCK FB_Configuration_CANopenSlave_LumbergCSL
VAR_INPUT
	Enable: BOOL; 			(* Activate config *)
	Node: CAN_NODE;		(* Physical CAN where CAN module is connected:
										SBUS_NODE_1 := 1,
  										SBUS_NODE_2 := 2 *)
	Address: WORD; 			(* Address of the CANopen slave 1 - 63 *)
END_VAR
VAR_OUTPUT
	Done: BOOL;				(* Config done *)
END_VAR
VAR_IN_OUT
	ExtConfig : MC_EXTENDEDCONFIG_COSLAVE	;
	(*
		########################################################################################################
			MC_EXTENDEDCONFIG_COSLAVE
		#########################################################################################################

						
		Variable								Value			Description
		-------------------------------------------------------------------------------------------------------------------------------------------------------------
		bWaitBeforeOperational 				BOOL;			When TRUE, after the coupler has been parameterized, it won't be switched in operational
																before this variable is FALSE. This can be used for example, to store the configuration with the FB
																MPLC_Universal_CANopen, with Service "SEWIOS_STORE", after a reset of the coppler 
		-------------------------------------------------------------------------------------------------------------------------------------------------------------
		bNoSettingsDownload 				BOOL;			TRUE : No configuration of the module. The configuration has to be done manually.
		-------------------------------------------------------------------------------------------------------------------------------------------------------------
		bResetUnconditional 					BOOL;			Even if the Connect FB isn't in fault it is possible to reset the bus coppler
		-------------------------------------------------------------------------------------------------------------------------------------------------------------
		bIOHold 								BOOL;			TRUE : Input data remain unchanged and the output data are not resetet also if the FB is in fault 
		-------------------------------------------------------------------------------------------------------------------------------------------------------------
		TimeOutHeartBeat					UINT;			If this value (ms) is different to zero, HeartbeatMode will be activated
		-------------------------------------------------------------------------------------------------------------------------------------------------------------
		TimeOutNodeGuarding 				UINT;			If this value (ms) is different to zero, NodeGuarding will be activated. 
																Caution ! The MOVI-PLC basic doesn´t support NodeGuarding 
		-------------------------------------------------------------------------------------------------------------------------------------------------------------
		TimeOutInitSequence					UINT;			Timeout for initialisation sequence (seconds) 
		-------------------------------------------------------------------------------------------------------------------------------------------------------------
		NumberOfRxPDO 					UINT;			Receive PDO : MOVI-PLC --> Slave  max. 32 
		-------------------------------------------------------------------------------------------------------------------------------------------------------------
		NumberOfTxPDO 						UINT;			Send PDO :      Slave --> MOVI-PLC  max 32 
		-------------------------------------------------------------------------------------------------------------------------------------------------------------	
		SyncTime 								USINT;			Cycle time of the sync telegram in ms. 
																Default = 0 : no sync will be started.
																If  SyncTime > 0, this FB initializes a sync telegram with the ID set at SyncCOBID. 
																The slave has to support synchronous communication 
		-------------------------------------------------------------------------------------------------------------------------------------------------------------
		SyncCOBID							UINT;			Index 1005h. ID of the sync telegram. Usually 16#80. IF 0, the ID won't be written.
		-------------------------------------------------------------------------------------------------------------------------------------------------------------
		SyncTimeOut 							INT := -1;		Index 1006h. Normally equal to SyncTime. 
																The slave usually set SyncTimeOut equal to SyncTime * 1.5. 
																If < 0, the index won't be written. 0 means no control over the sync interval 
		-------------------------------------------------------------------------------------------------------------------------------------------------------------
		stInitialParameter_COSlave 			MC_INITIALPARAMETER_COSLAVE;
												(*#################################################################
												With this struct, user defined parameters will be written to the BusCoupler after the
												initialization of the MPLC_ConnectUniversalSlave_CANopen. 
												Add the following code to your program to initialise the struct : 
												Example:
												Index 16#6423:	Activates the event-driven transmission of PDOs with analog inputs
												Index 16#3500:	Index from the manufacturer specific profile area
	
													stInitialParameter_COSlave.aIndex[1] := 16#6423;  	(* Index to write to *)
													stInitialParameter_COSlave.aSubIndex[1] := 0;   	(* SubIndex to write to *)
													stInitialParameter_COSlave.aBytes[1] := 1;   		(* Number of bytes to write  *)
													stInitialParameter_COSlave.aData[1] := 1;   			(* Data *)
	
													stInitialParameter_COSlave.aIndex[2] := 16#3500;  	(* Index to write to *)
													stInitialParameter_COSlave.aSubIndex[2] := 0;   	(* SubIndex to write to *)
													stInitialParameter_COSlave.aBytes[2] := 2;   		(* Number of bytes to write *)
													stInitialParameter_COSlave.aData[2] := 5;   			(* Data *)
	
												If there are more than 10 (DHP11B) or 64 (DHx41B) parameters to write, declare 
												NUMOF_INITIALPARAMETER in your program.
	
													VAR_GLOBAL CONSTANT
														NUMOF_INITIALPARAMETER : UDINT := 20;	
													END_VAR
	
												##################################################################*)
			-------------------------------------------------------------------------------------------------------------------------------------------------------------
		(* IDs of the PDO telegrams. The IDs are always calculated with the following IDs as a basis + the address of the bus coupler *)

		RxPDO 								ARRAY[1..32] OF MC_PDO_COSLAVE;			(* MOVI-PLC --> Slave *)
												(* := 16#200,16#300,16#400,16#500,16#780,16#240,16#340,16#440,16#540,16#7C0;	*)
		-------------------------------------------------------------------------------------------------------------------------------------------------------------
		TxPDO 								ARRAY[1..32] OF MC_PDO_COSLAVE; 			(* Slave --> MOVI-PLC *)
												(*:= 16#180,16#280,16#380,16#480,16#680,16#1C0,16#2C0,16#3C0,16#4C0,16#6C0;*)
	*)
END_VAR

VAR
	bSend_SDO: BOOL;
	CanMsgSDO: ST_CanAcyclicMsg;
	parameterize: BOOL;
END_VAR
(* @END_DECLARATION := '0' *)
IF Enable AND NOT Done THEN

	(*########################################################

		Configuration of CANopenSlave (Lumberg 940 CSL 601)
		
	#########################################################*)

		IF NOT bSend_SDO THEN

		CanMsgSDO := F_WriteCanMsg(
							Node:=Node,
							ID:= 16#600 + Address,
							Length:= 8,
							Data1:= 16#2F01,
							Data2 := 16#3000,
							Data3 := 16#0200,
							Data4 := 0,
							SBUSGateway_LogAdr := 0 );
			IF CanMsgSDO.State = GEN_1_BUFFSTATE_INSERTED THEN
				bSend_SDO :=TRUE;
			END_IF
		ELSIF bSend_SDO THEN
			CanMsgSDO.Result := F_ResultCanMsg(CanAcyclicMsg:=CanMsgSDO);
			IF CanMsgSDO.Result = GEN_3_BUFFSTATE_COMPLETED_SUCCESSFUL THEN
				bSend_SDO:=FALSE;
				parameterize:=TRUE;
			ELSIF  CanMsgSDO.Result = GEN_5_BUFFSTATE_COMPLETED_MSG_LOST THEN
				(* Fehler beim Senden --> Nachricht ging verloren --> nochmals *)
				bSend_SDO :=FALSE;
			ELSIF  CanMsgSDO.Result = GEN_4_BUFFSTATE_COMPLETED_ERROR THEN
				(* Fehler beim Senden --> Non-recovery error from CAN --> nochmals *)
				bSend_SDO :=FALSE;
			END_IF
		END_IF

		P_AcyclicCommunicationTask_CAN;
	IF parameterize THEN

		(*#########################################################
	
			TransmissionType for TxPDOs and RxPDOs:
	
				0:										Event controlled and sychron (with SYNC-Object)
				1-240:									Cyclic and synchron (with SYNC-Object)
				254:									Producer specified
				255:									Acyclic and eventcontrolled 
				255 and EventTime = InhibitTime:	Cyclic
	
		#########################################################	*)
	
		ExtConfig.bNoDeactivatePDO		 := TRUE; (* Change of Transmission Type, Inhibit- and Event- Time without deactivate RxPDO and TxPDO*)
		(*************************************************** TxPDOs of CANOpenSlave ( MOVI-PLC ReceiveObjects) ***********************************************************)
	
		ExtConfig.NumberOfTxPDO				:= 1;		(*  TxPDO ---> CANopenSlave Transmit *)
	
		ExtConfig.TxPDO[1].EventTime			:= 100;		(* Slave: Index 0x18xx SubIndex 5: CycleTime in ms for CANopenSlave TXPDO *)
		ExtConfig.TxPDO[1].InhibitTime			:= 5;		(* Slave: Index 0x18xx SubIndex 3: InhibitTime in ms for CANopenSlave TxPDO *)
		ExtConfig.TxPDO[1].TransmissionType	:= 255;		(* Slave: Index 0x18xx SubIndex 2: TransmissionType for this TxPDO *)
	(*
		ExtConfig.TxPDO[2].EventTime			:= 100;		(* Slave: Index 0x18xx SubIndex 5: CycleTime in ms for CANopenSlave TXPDO *)
		ExtConfig.TxPDO[2].InhibitTime			:= 5;		(* Slave: Index 0x18xx SubIndex 3: InhibitTime in ms for CANopenSlave TxPDO *)
		ExtConfig.TxPDO[2].TransmissionType	:= 255;		(* Slave: Index 0x18xx SubIndex 2: TransmissionType for this TxPDO *)
	
		ExtConfig.TxPDO[3].EventTime			:= 100;		(* Slave: Index 0x18xx SubIndex 5: CycleTime in ms for CANopenSlave TXPDO *)
		ExtConfig.TxPDO[3].InhibitTime			:= 5;		(* Slave: Index 0x18xx SubIndex 3: InhibitTime in ms for CANopenSlave TxPDO *)
		ExtConfig.TxPDO[3].TransmissionType	:= 255;		(* Slave: Index 0x18xx SubIndex 2: TransmissionType for this TxPDO *)
	
		ExtConfig.TxPDO[4].EventTime			:= 100;		(* Slave: Index 0x18xx SubIndex 5: CycleTime in ms for CANopenSlave TXPDO *)
		ExtConfig.TxPDO[4].InhibitTime			:= 5;		(* Slave: Index 0x18xx SubIndex 3: InhibitTime in ms for CANopenSlave TxPDO *)
		ExtConfig.TxPDO[4].TransmissionType	:= 255;		(* Slave: Index 0x18xx SubIndex 2: TransmissionType for this TxPDO *)
	*)
	
		(*************************************************** RxPDOs of CANOpenSlave ( MOVI-PLC TransmitObjects) **********************************************************)
	
		ExtConfig.NumberOfRxPDO				:= 1;		(*  RxPDO ---> CANopenSlave Receive *)
	
		ExtConfig.RxPDO[1].EventTime			:= 100;		(* Master: CycleTime in ms for TransmitObjects (MOVI-PLC) *)
		ExtConfig.RxPDO[1].InhibitTime			:= 5;		(* Master: InhibitTime in ms for TransmitObjects (MOVI-PLC) *)
		ExtConfig.RxPDO[1].Length				:= 8;		(* Master: Length of this TransmitObject in bytes *)
		ExtConfig.RxPDO[1].TransmissionType	:= 255;		(* Slave: Index 0x14xx SubIndex 2: TransmissionType for this RxPDO *)
	(*
		ExtConfig.RxPDO[2].EventTime			:= 100;		(* Master: CycleTime in ms for TransmitObjects (MOVI-PLC) *)
		ExtConfig.RxPDO[2].InhibitTime			:= 5;		(* Master: InhibitTime in ms for TransmitObjects (MOVI-PLC) *)
		ExtConfig.RxPDO[2].Length				:= 8;		(* Master: Length of this TransmitObject in bytes *)
		ExtConfig.RxPDO[2].TransmissionType	:= 255;		(* Slave: Index 0x14xx SubIndex 2: TransmissionType for this RxPDO *)
	
		ExtConfig.RxPDO[3].EventTime			:= 100;		(* Master: CycleTime in ms for TransmitObjects (MOVI-PLC) *)
		ExtConfig.RxPDO[3].InhibitTime			:= 5;		(* Master: InhibitTime in ms for TransmitObjects (MOVI-PLC) *)
		ExtConfig.RxPDO[3].Length				:= 8;		(* Master: Length of this TransmitObject in bytes *)
		ExtConfig.RxPDO[3].TransmissionType	:= 255;		(* Slave: Index 0x14xx SubIndex 2: TransmissionType for this RxPDO *)
	
		ExtConfig.RxPDO[4].EventTime			:= 100;		(* Master: CycleTime in ms for TransmitObjects (MOVI-PLC) *)
		ExtConfig.RxPDO[4].InhibitTime			:= 5;		(* Master: InhibitTime in ms for TransmitObjects (MOVI-PLC) *)
		ExtConfig.RxPDO[4].Length				:= 8;		(* Master: Length of this TransmitObject in bytes *)
		ExtConfig.RxPDO[4].TransmissionType	:= 255;		(* Slave: Index 0x14xx SubIndex 2: TransmissionType for this RxPDO *)
	*)
	
		(***************************************************** Additional parameters to set in the CANOpenSlave  ***************************************************************)
	
	(*	(* Enable transmission of analog inputs *)
		ExtConfig.stInitialParameter_COSlave.aIndex[1]			:= 16#6423;
		ExtConfig.stInitialParameter_COSlave.aSubIndex[1]	:= 0;
		ExtConfig.stInitialParameter_COSlave.aBytes[1]		:= 1;
		ExtConfig.stInitialParameter_COSlave.aData[1]			:= 1;*)
		(* Enable transmission of analog inputs *)
	
	
		(********************************************** Additional configuration. Default values are in most cases sufficient *****************************************************)
	
		ExtConfig.bIOHold						:= FALSE;
		ExtConfig.bNoSettingsDownload			:= FALSE;
		ExtConfig.bWaitBeforeOperational		:= FALSE;
		ExtConfig.bResetUnconditional			:= FALSE;
	
		ExtConfig.TimeOutHeartBeat				:= 400;				(* [ms] *)
		ExtConfig.TimeOutNodeGuarding		:= 0;				(* [ms]. CAUTION ! DHP11B (MOVI-PLC basic) does NOT support NodeGuarding *)
		ExtConfig.TimeOutInitSequence			:= 10;				(* [seconds]. If the Init-Sequence takes longer than this TimeOut time --> Error *)
		ExtConfig.SyncCOBID						:= 0;				(* SyncObject ID for TransmissionType 0-240 (RxPDO). Usually 128. If 0, the ID will not be written *)
		ExtConfig.SyncTime						:= 0;				(* CycleTime for the SYNC-Object *)
	
		ExtConfig.TxPDO[1].COBID				:= 16#180;			(* In order to disable the use of RTR frames for the PDOs, set bit 30 = "RTR not allowed" *)
		ExtConfig.TxPDO[2].COBID				:= 16#280;			(* Ex. 16#4000_0280 *)
		ExtConfig.TxPDO[3].COBID				:= 16#380;
		ExtConfig.TxPDO[4].COBID				:= 16#480;			(* NOTE! These values are base values. The input "Address" will automatically be added *)
		ExtConfig.TxPDO[5].COBID				:= 16#680;
		ExtConfig.TxPDO[6].COBID				:= 16#1C0;
		ExtConfig.TxPDO[7].COBID				:= 16#2C0;
		ExtConfig.TxPDO[8].COBID				:= 16#3C0;
		ExtConfig.TxPDO[9].COBID				:= 16#4C0;
		ExtConfig.TxPDO[10].COBID				:= 16#6C0;
	
		ExtConfig.RxPDO[1].COBID				:= 16#200;
		ExtConfig.RxPDO[2].COBID				:= 16#300;
		ExtConfig.RxPDO[3].COBID				:= 16#400;
		ExtConfig.RxPDO[4].COBID				:= 16#500;
		ExtConfig.RxPDO[5].COBID				:= 16#780;
		ExtConfig.RxPDO[6].COBID				:= 16#240;
		ExtConfig.RxPDO[7].COBID				:= 16#340;
		ExtConfig.RxPDO[8].COBID				:= 16#440;
		ExtConfig.RxPDO[9].COBID				:= 16#540;
		ExtConfig.RxPDO[10].COBID				:= 16#7C0;
	
	
	
		Done := TRUE;
		parameterize := FALSE;
	END_IF
END_IF
END_FUNCTION_BLOCK


(* @NESTEDCOMMENTS := 'Yes' *)
(* @PATH := '\/CodeSamples\/CANopen\/UniversalMaster' *)
(* @OBJECTFLAGS := '0, 8' *)
(* @SYMFILEFLAGS := '2048' *)
FUNCTION_BLOCK FB_Configuration_CANopenSlave_MURRCUBE67
VAR_INPUT
	Enable: BOOL; 			(* Activate config *)
END_VAR
VAR_OUTPUT
	Done: BOOL;				(* Config done *)
END_VAR
VAR_IN_OUT
	ExtConfig : MC_EXTENDEDCONFIG_COSLAVE	;
	(*
		########################################################################################################
			MC_EXTENDEDCONFIG_COSLAVE
		#########################################################################################################

						
		Variable								Value			Description
		-------------------------------------------------------------------------------------------------------------------------------------------------------------
		bWaitBeforeOperational 				BOOL;			When TRUE, after the coupler has been parameterized, it won't be switched in operational
																before this variable is FALSE. This can be used for example, to store the configuration with the FB
																MPLC_Universal_CANopen, with Service "SEWIOS_STORE", after a reset of the coppler 
		-------------------------------------------------------------------------------------------------------------------------------------------------------------
		bNoSettingsDownload 				BOOL;			TRUE : No configuration of the module. The configuration has to be done manually.
		-------------------------------------------------------------------------------------------------------------------------------------------------------------
		bResetUnconditional 					BOOL;			Even if the Connect FB isn't in fault it is possible to reset the bus coppler
		-------------------------------------------------------------------------------------------------------------------------------------------------------------
		bIOHold 								BOOL;			TRUE : Input data remain unchanged and the output data are not resetet also if the FB is in fault 
		-------------------------------------------------------------------------------------------------------------------------------------------------------------
		TimeOutHeartBeat					UINT;			If this value (ms) is different to zero, HeartbeatMode will be activated
		-------------------------------------------------------------------------------------------------------------------------------------------------------------
		TimeOutNodeGuarding 				UINT;			If this value (ms) is different to zero, NodeGuarding will be activated. 
																Caution ! The MOVI-PLC basic doesn´t support NodeGuarding 
		-------------------------------------------------------------------------------------------------------------------------------------------------------------
		TimeOutInitSequence					UINT;			Timeout for initialisation sequence (seconds) 
		-------------------------------------------------------------------------------------------------------------------------------------------------------------
		NumberOfRxPDO 					UINT;			Receive PDO : MOVI-PLC --> Slave  max. 32 
		-------------------------------------------------------------------------------------------------------------------------------------------------------------
		NumberOfTxPDO 						UINT;			Send PDO :      Slave --> MOVI-PLC  max 32 
		-------------------------------------------------------------------------------------------------------------------------------------------------------------	
		SyncTime 								USINT;			Cycle time of the sync telegram in ms. 
																Default = 0 : no sync will be started.
																If  SyncTime > 0, this FB initializes a sync telegram with the ID set at SyncCOBID. 
																The slave has to support synchronous communication 
		-------------------------------------------------------------------------------------------------------------------------------------------------------------
		SyncCOBID							UINT;			Index 1005h. ID of the sync telegram. Usually 16#80. IF 0, the ID won't be written.
		-------------------------------------------------------------------------------------------------------------------------------------------------------------
		SyncTimeOut 							INT := -1;		Index 1006h. Normally equal to SyncTime. 
																The slave usually set SyncTimeOut equal to SyncTime * 1.5. 
																If < 0, the index won't be written. 0 means no control over the sync interval 
		-------------------------------------------------------------------------------------------------------------------------------------------------------------
		stInitialParameter_COSlave 			MC_INITIALPARAMETER_COSLAVE;
												(*#################################################################
												With this struct, user defined parameters will be written to the BusCoupler after the
												initialization of the MPLC_ConnectUniversalSlave_CANopen. 
												Add the following code to your program to initialise the struct : 
												Example:
												Index 16#6423:	Activates the event-driven transmission of PDOs with analog inputs
												Index 16#3500:	Index from the manufacturer specific profile area
	
													stInitialParameter_COSlave.aIndex[1] := 16#6423;  	(* Index to write to *)
													stInitialParameter_COSlave.aSubIndex[1] := 0;   	(* SubIndex to write to *)
													stInitialParameter_COSlave.aBytes[1] := 1;   		(* Number of bytes to write  *)
													stInitialParameter_COSlave.aData[1] := 1;   			(* Data *)
	
													stInitialParameter_COSlave.aIndex[2] := 16#3500;  	(* Index to write to *)
													stInitialParameter_COSlave.aSubIndex[2] := 0;   	(* SubIndex to write to *)
													stInitialParameter_COSlave.aBytes[2] := 2;   		(* Number of bytes to write *)
													stInitialParameter_COSlave.aData[2] := 5;   			(* Data *)
	
												If there are more than 10 (DHP11B) or 64 (DHx41B) parameters to write, declare 
												NUMOF_INITIALPARAMETER in your program.
	
													VAR_GLOBAL CONSTANT
														NUMOF_INITIALPARAMETER : UDINT := 20;	
													END_VAR
	
												##################################################################*)
			-------------------------------------------------------------------------------------------------------------------------------------------------------------
		(* IDs of the PDO telegrams. The IDs are always calculated with the following IDs as a basis + the address of the bus coupler *)

		RxPDO 								ARRAY[1..32] OF MC_PDO_COSLAVE;			(* MOVI-PLC --> Slave *)
												(* := 16#200,16#300,16#400,16#500,16#780,16#240,16#340,16#440,16#540,16#7C0;	*)
		-------------------------------------------------------------------------------------------------------------------------------------------------------------
		TxPDO 								ARRAY[1..32] OF MC_PDO_COSLAVE; 			(* Slave --> MOVI-PLC *)
												(*:= 16#180,16#280,16#380,16#480,16#680,16#1C0,16#2C0,16#3C0,16#4C0,16#6C0;*)
	*)
END_VAR

(* @END_DECLARATION := '0' *)
IF Enable AND NOT Done THEN

	(*########################################################

		Configuration of CANopenSlave MURR CUBE67
		
	#########################################################

		TransmissionType for TxPDOs and RxPDOs:

			0:										Event controlled and sychron (with SYNC-Object)
			1-240:									Cyclic and synchron (with SYNC-Object)
			254:									Producer specified
			255:									Acyclic and eventcontrolled 
			255 and EventTime = InhibitTime:	Cyclic

	#########################################################	*)


	(*************************************************** TxPDOs of CANOpenSlave ( MOVI-PLC ReceiveObjects) ***********************************************************)

	ExtConfig.NumberOfTxPDO				:= 4;		(*  TxPDO ---> CANopenSlave Transmit *)

	ExtConfig.TxPDO[1].EventTime			:= 100;		(* Slave: Index 0x18xx SubIndex 5: CycleTime in ms for CANopenSlave TXPDO *)
	ExtConfig.TxPDO[1].InhibitTime			:= 10;		(* Slave: Index 0x18xx SubIndex 3: InhibitTime in ms for CANopenSlave TxPDO *)
	ExtConfig.TxPDO[1].TransmissionType	:= 255;		(* Slave: Index 0x18xx SubIndex 2: TransmissionType for this TxPDO *)

	ExtConfig.TxPDO[2].EventTime			:= 100;		(* Slave: Index 0x18xx SubIndex 5: CycleTime in ms for CANopenSlave TXPDO *)
	ExtConfig.TxPDO[2].InhibitTime			:= 10;		(* Slave: Index 0x18xx SubIndex 3: InhibitTime in ms for CANopenSlave TxPDO *)
	ExtConfig.TxPDO[2].TransmissionType	:= 255;		(* Slave: Index 0x18xx SubIndex 2: TransmissionType for this TxPDO *)

	ExtConfig.TxPDO[3].EventTime			:= 100;		(* Slave: Index 0x18xx SubIndex 5: CycleTime in ms for CANopenSlave TXPDO *)
	ExtConfig.TxPDO[3].InhibitTime			:= 10;		(* Slave: Index 0x18xx SubIndex 3: InhibitTime in ms for CANopenSlave TxPDO *)
	ExtConfig.TxPDO[3].TransmissionType	:= 255;		(* Slave: Index 0x18xx SubIndex 2: TransmissionType for this TxPDO *)

	ExtConfig.TxPDO[4].EventTime			:= 100;		(* Slave: Index 0x18xx SubIndex 5: CycleTime in ms for CANopenSlave TXPDO *)
	ExtConfig.TxPDO[4].InhibitTime			:= 10;		(* Slave: Index 0x18xx SubIndex 3: InhibitTime in ms for CANopenSlave TxPDO *)
	ExtConfig.TxPDO[4].TransmissionType	:= 255;		(* Slave: Index 0x18xx SubIndex 2: TransmissionType for this TxPDO *)


	(*************************************************** RxPDOs of CANOpenSlave ( MOVI-PLC TransmitObjects) **********************************************************)

	ExtConfig.NumberOfRxPDO				:= 4;		(*  RxPDO ---> CANopenSlave Receive *)

	ExtConfig.RxPDO[1].EventTime			:= 100;		(* Master: CycleTime in ms for TransmitObjects (MOVI-PLC) *)
	ExtConfig.RxPDO[1].InhibitTime			:= 10;		(* Master: InhibitTime in ms for TransmitObjects (MOVI-PLC) *)
	ExtConfig.RxPDO[1].Length				:= 8;		(* Master: Length of this TransmitObject in bytes *)
	ExtConfig.RxPDO[1].TransmissionType	:= 255;		(* Slave: Index 0x14xx SubIndex 2: TransmissionType for this RxPDO *)

	ExtConfig.RxPDO[2].EventTime			:= 100;		(* Master: CycleTime in ms for TransmitObjects (MOVI-PLC) *)
	ExtConfig.RxPDO[2].InhibitTime			:= 10;		(* Master: InhibitTime in ms for TransmitObjects (MOVI-PLC) *)
	ExtConfig.RxPDO[2].Length				:= 8;		(* Master: Length of this TransmitObject in bytes *)
	ExtConfig.RxPDO[2].TransmissionType	:= 255;		(* Slave: Index 0x14xx SubIndex 2: TransmissionType for this RxPDO *)

	ExtConfig.RxPDO[3].EventTime			:= 100;		(* Master: CycleTime in ms for TransmitObjects (MOVI-PLC) *)
	ExtConfig.RxPDO[3].InhibitTime			:= 10;		(* Master: InhibitTime in ms for TransmitObjects (MOVI-PLC) *)
	ExtConfig.RxPDO[3].Length				:= 8;		(* Master: Length of this TransmitObject in bytes *)
	ExtConfig.RxPDO[3].TransmissionType	:= 255;		(* Slave: Index 0x14xx SubIndex 2: TransmissionType for this RxPDO *)

	ExtConfig.RxPDO[4].EventTime			:= 100;		(* Master: CycleTime in ms for TransmitObjects (MOVI-PLC) *)
	ExtConfig.RxPDO[4].InhibitTime			:= 10;		(* Master: InhibitTime in ms for TransmitObjects (MOVI-PLC) *)
	ExtConfig.RxPDO[4].Length				:= 8;		(* Master: Length of this TransmitObject in bytes *)
	ExtConfig.RxPDO[4].TransmissionType	:= 255;		(* Slave: Index 0x14xx SubIndex 2: TransmissionType for this RxPDO *)


	(***************************************************** Additional parameters to set in the CANOpenSlave  ***************************************************************)
(* Parameter for Cube67 DIO16 (56601) Submodul *)
	ExtConfig.stInitialParameter_COSlave.aIndex[1]			:= 16#2002;(*2. Module*)
	ExtConfig.stInitialParameter_COSlave.aSubIndex[1]	:= 2;(* Input function *)
	ExtConfig.stInitialParameter_COSlave.aBytes[1]		:= 1;
	ExtConfig.stInitialParameter_COSlave.aData[1]			:= 2#00000000;(* 0=Input, 1=Diag Input *)

	ExtConfig.stInitialParameter_COSlave.aIndex[2]			:= 16#2002;(*2. Module*)
	ExtConfig.stInitialParameter_COSlave.aSubIndex[2]	:= 3;(* Inpu/Output selection, channel 0..7,  Pin4*)
	ExtConfig.stInitialParameter_COSlave.aBytes[2]		:= 1;
	ExtConfig.stInitialParameter_COSlave.aData[2]			:= 2#00000000;(* 0=Input, 1=Output *)

	ExtConfig.stInitialParameter_COSlave.aIndex[3]			:= 16#2002;(*2. Module*)
	ExtConfig.stInitialParameter_COSlave.aSubIndex[3]	:= 4;(* Inpu/Output selection, channel 10..17,  Pin2*)
	ExtConfig.stInitialParameter_COSlave.aBytes[3]		:= 1;
	ExtConfig.stInitialParameter_COSlave.aData[3]			:= 2#00000000;(* 0=Input, 1=Output *)

	ExtConfig.stInitialParameter_COSlave.aIndex[4]			:= 16#2002;(*2. Module*)
	ExtConfig.stInitialParameter_COSlave.aSubIndex[4]	:= 5;(*Failsafe Mode, channel 0..7,  Pin4*)
	ExtConfig.stInitialParameter_COSlave.aBytes[4]		:= 1;
	ExtConfig.stInitialParameter_COSlave.aData[4]			:= 2#00000000;(* 0=last state, 1=Failsafe value *)

	ExtConfig.stInitialParameter_COSlave.aIndex[5]			:= 16#2002;(*2. Module*)
	ExtConfig.stInitialParameter_COSlave.aSubIndex[5]	:= 6;(*Failsafe Mode, channel 10..17,  Pin2*)
	ExtConfig.stInitialParameter_COSlave.aBytes[5]		:= 1;
	ExtConfig.stInitialParameter_COSlave.aData[5]			:= 2#00000000;(* 0=last state, 1=Failsafe value *)

	ExtConfig.stInitialParameter_COSlave.aIndex[6]			:= 16#2002;(*2. Module*)
	ExtConfig.stInitialParameter_COSlave.aSubIndex[6]	:= 7;(*Failsafe Value, channel 0..7,  Pin4*)
	ExtConfig.stInitialParameter_COSlave.aBytes[6]		:= 1;
	ExtConfig.stInitialParameter_COSlave.aData[6]			:= 2#00000000;(* 0=output low, 1=output high *)

	ExtConfig.stInitialParameter_COSlave.aIndex[7]			:= 16#2002;(*2. Module*)
	ExtConfig.stInitialParameter_COSlave.aSubIndex[7]	:= 8;(*Failsafe Value, channel 10..17,  Pin2*)
	ExtConfig.stInitialParameter_COSlave.aBytes[7]		:= 1;
	ExtConfig.stInitialParameter_COSlave.aData[7]			:= 2#00000000;(* 0=output low, 1=output high *)

	ExtConfig.stInitialParameter_COSlave.aIndex[8]			:= 16#2002;(*2. Module*)
	ExtConfig.stInitialParameter_COSlave.aSubIndex[8]	:= 9;(*function, channel 0..7,  Pin4*)
	ExtConfig.stInitialParameter_COSlave.aBytes[8]		:= 1;
	ExtConfig.stInitialParameter_COSlave.aData[8]			:= 2#00000000;(* 0=input no, 1=input nc *)

	ExtConfig.stInitialParameter_COSlave.aIndex[9]			:= 16#2002;(*2. Module*)
	ExtConfig.stInitialParameter_COSlave.aSubIndex[9]	:= 10;(*function, channel 10..17,  Pin2*)
	ExtConfig.stInitialParameter_COSlave.aBytes[9]		:= 1;
	ExtConfig.stInitialParameter_COSlave.aData[9]			:= 2#00000000;(* 0=input no, 1=input nc *)

(* Parameter for Cube67 DIO8 (56610) Submodul *)
	ExtConfig.stInitialParameter_COSlave.aIndex[10]		:= 16#2003;(*3 Module*)
	ExtConfig.stInitialParameter_COSlave.aSubIndex[10]	:= 2;(* Input function *)
	ExtConfig.stInitialParameter_COSlave.aBytes[10]		:= 1;
	ExtConfig.stInitialParameter_COSlave.aData[10]		:= 2#0000;(* 0=Input, 1=Diag Input *)

	ExtConfig.stInitialParameter_COSlave.aIndex[11]		:= 16#2003;(*3 Module*)
	ExtConfig.stInitialParameter_COSlave.aSubIndex[11]	:= 3;(* Inpu/Output selection, channel 0..3  Pin4*)
	ExtConfig.stInitialParameter_COSlave.aBytes[11]		:= 1;
	ExtConfig.stInitialParameter_COSlave.aData[11]		:= 2#0000;(* 0=Input, 1=Output *)

	ExtConfig.stInitialParameter_COSlave.aIndex[12]		:= 16#2003;(*3. Module*)
	ExtConfig.stInitialParameter_COSlave.aSubIndex[12]	:= 4;(* Inpu/Output selection, channel 10..13  Pin2*)
	ExtConfig.stInitialParameter_COSlave.aBytes[12]		:= 1;
	ExtConfig.stInitialParameter_COSlave.aData[12]		:= 2#0000;(* 0=Input, 1=Output *)

	ExtConfig.stInitialParameter_COSlave.aIndex[13]		:= 16#2003;(*3. Module*)
	ExtConfig.stInitialParameter_COSlave.aSubIndex[13]	:= 5;(*Failsafe Mode, channel 0..3,  Pin4*)
	ExtConfig.stInitialParameter_COSlave.aBytes[13]		:= 1;
	ExtConfig.stInitialParameter_COSlave.aData[13]		:= 2#0000;(* 0=last state, 1=Failsafe value *)

	ExtConfig.stInitialParameter_COSlave.aIndex[14]		:= 16#2003;(*3. Module*)
	ExtConfig.stInitialParameter_COSlave.aSubIndex[14]	:= 6;(*Failsafe Mode, channel 10..13,  Pin2*)
	ExtConfig.stInitialParameter_COSlave.aBytes[14]		:= 1;
	ExtConfig.stInitialParameter_COSlave.aData[14]		:= 2#0000;(* 0=last state, 1=Failsafe value *)

	ExtConfig.stInitialParameter_COSlave.aIndex[15]		:= 16#2003;(*3. Module*)
	ExtConfig.stInitialParameter_COSlave.aSubIndex[15]	:= 7;(*Failsafe Value, channel 0..3,  Pin4*)
	ExtConfig.stInitialParameter_COSlave.aBytes[15]		:= 1;
	ExtConfig.stInitialParameter_COSlave.aData[15]		:= 2#0000;(* 0=output low, 1=output high *)

	ExtConfig.stInitialParameter_COSlave.aIndex[16]		:= 16#2003;(*3. Module*)
	ExtConfig.stInitialParameter_COSlave.aSubIndex[16]	:= 8;(*Failsafe Value, channel 10..13,  Pin2*)
	ExtConfig.stInitialParameter_COSlave.aBytes[16]		:= 1;
	ExtConfig.stInitialParameter_COSlave.aData[16]		:= 2#0000;(* 0=output low, 1=output high *)

	ExtConfig.stInitialParameter_COSlave.aIndex[17]		:= 16#2003;(*3. Module*)
	ExtConfig.stInitialParameter_COSlave.aSubIndex[17]	:= 9;(*function, channel 0..3,  Pin4*)
	ExtConfig.stInitialParameter_COSlave.aBytes[17]		:= 1;
	ExtConfig.stInitialParameter_COSlave.aData[17]		:= 2#0000;(* 0=input no, 1=input nc *)

	ExtConfig.stInitialParameter_COSlave.aIndex[18]		:= 16#2003;(*3. Module*)
	ExtConfig.stInitialParameter_COSlave.aSubIndex[18]	:= 10;(*function, channel 10..13,  Pin2*)
	ExtConfig.stInitialParameter_COSlave.aBytes[18]		:= 1;
	ExtConfig.stInitialParameter_COSlave.aData[18]		:= 2#0000;(* 0=input no, 1=input nc *)

(* Parameter for Cube67 DIO8/DI8 (56691) Submodul *)
	ExtConfig.stInitialParameter_COSlave.aIndex[19]		:= 16#2001;(*1. Module*)
	ExtConfig.stInitialParameter_COSlave.aSubIndex[19]	:= 1;(* Inpu/Output selection, channel 0..7*)
	ExtConfig.stInitialParameter_COSlave.aBytes[19]		:= 1;
	ExtConfig.stInitialParameter_COSlave.aData[19]		:= 2#00000010;(* 0=Input, 1=Output *)

	ExtConfig.stInitialParameter_COSlave.aIndex[20]		:= 16#2001;(*1.. Module*)
	ExtConfig.stInitialParameter_COSlave.aSubIndex[20]	:= 2;(*Failsafe Mode, channel 0..7*)
	ExtConfig.stInitialParameter_COSlave.aBytes[20]		:= 1;
	ExtConfig.stInitialParameter_COSlave.aData[20]		:= 2#0000;(* 0=last state, 1=Failsafe value *)

	ExtConfig.stInitialParameter_COSlave.aIndex[21]		:= 16#2001;(*1. Module*)
	ExtConfig.stInitialParameter_COSlave.aSubIndex[21]	:= 3;(*Failsafe Value, channel 0..7*)
	ExtConfig.stInitialParameter_COSlave.aBytes[21]		:= 1;
	ExtConfig.stInitialParameter_COSlave.aData[21]		:= 2#0000;(* 0=output low, 1=output high *)

	ExtConfig.stInitialParameter_COSlave.aIndex[22]		:= 16#2001;(*1. Module*)
	ExtConfig.stInitialParameter_COSlave.aSubIndex[22]	:= 4;(*function, channel 0..7*)
	ExtConfig.stInitialParameter_COSlave.aBytes[22]		:= 1;
	ExtConfig.stInitialParameter_COSlave.aData[22]		:= 2#0000;(* 0=input no, 1=input nc *)

	ExtConfig.stInitialParameter_COSlave.aIndex[23]		:= 16#2001;(*1. Module*)
	ExtConfig.stInitialParameter_COSlave.aSubIndex[23]	:= 5;(*function, channel 10..17*)
	ExtConfig.stInitialParameter_COSlave.aBytes[23]		:= 1;
	ExtConfig.stInitialParameter_COSlave.aData[23]		:= 2#0000;(* 0=input no, 1=input nc *)


(*	(* Enable transmission of analog inputs *)
	ExtConfig.stInitialParameter_COSlave.aIndex[24]		:= 16#6423;
	ExtConfig.stInitialParameter_COSlave.aSubIndex[24]	:= 0;
	ExtConfig.stInitialParameter_COSlave.aBytes[24]		:= 1;
	ExtConfig.stInitialParameter_COSlave.aData[24]		:= 1;
*)

(* Enable automatic PDO mapping *)
	ExtConfig.stInitialParameter_COSlave.aIndex[24]		:= 16#2100;
	ExtConfig.stInitialParameter_COSlave.aSubIndex[24]	:= 0;
	ExtConfig.stInitialParameter_COSlave.aBytes[24]		:= 1;
	ExtConfig.stInitialParameter_COSlave.aData[24]		:= 1;

	(********************************************** Additional configuration. Default values are in most cases sufficient *****************************************************)

	ExtConfig.bIOHold						:= FALSE;
	ExtConfig.bNoSettingsDownload			:= FALSE;
	ExtConfig.bWaitBeforeOperational		:= FALSE;
	ExtConfig.bResetUnconditional			:= FALSE;

	ExtConfig.TimeOutHeartBeat				:= 250;				(* [ms] *)
(*	ExtConfig.DivTimeOutHeartBeat			:= 2;				(* Heartbeat Consumer = ExtConfig.TimeOutHeartBeat	 / ExtConfig.DivTimeOutHeartBeat *)*)
	ExtConfig.TimeOutNodeGuarding		:= 0;				(* [ms]. CAUTION ! DHP11B (MOVI-PLC basic) does NOT support NodeGuarding *)
	ExtConfig.TimeOutInitSequence			:= 10;				(* [seconds]. If the Init-Sequence takes longer than this TimeOut time --> Error *)
	ExtConfig.SyncCOBID						:= 0;				(* SyncObject ID for TransmissionType 0-240 (RxPDO). Usually 128. If 0, the ID will not be written *)
	ExtConfig.SyncTime						:= 0;				(* CycleTime for the SYNC-Object *)

	ExtConfig.TxPDO[1].COBID				:= 16#180;			(* In order to disable the use of RTR frames for the PDOs, set bit 30 = "RTR not allowed" *)
	ExtConfig.TxPDO[2].COBID				:= 16#280;			(* Ex. 16#4000_0280 *)
	ExtConfig.TxPDO[3].COBID				:= 16#380;
	ExtConfig.TxPDO[4].COBID				:= 16#480;			(* NOTE! These values are base values. The input "Address" will automatically be added *)
	ExtConfig.TxPDO[5].COBID				:= 16#680;
	ExtConfig.TxPDO[6].COBID				:= 16#1C0;
	ExtConfig.TxPDO[7].COBID				:= 16#2C0;
	ExtConfig.TxPDO[8].COBID				:= 16#3C0;
	ExtConfig.TxPDO[9].COBID				:= 16#4C0;
	ExtConfig.TxPDO[10].COBID				:= 16#6C0;

	ExtConfig.RxPDO[1].COBID				:= 16#200;
	ExtConfig.RxPDO[2].COBID				:= 16#300;
	ExtConfig.RxPDO[3].COBID				:= 16#400;
	ExtConfig.RxPDO[4].COBID				:= 16#500;
	ExtConfig.RxPDO[5].COBID				:= 16#780;
	ExtConfig.RxPDO[6].COBID				:= 16#240;
	ExtConfig.RxPDO[7].COBID				:= 16#340;
	ExtConfig.RxPDO[8].COBID				:= 16#440;
	ExtConfig.RxPDO[9].COBID				:= 16#540;
	ExtConfig.RxPDO[10].COBID				:= 16#7C0;

	Done := TRUE;

END_IF

END_FUNCTION_BLOCK


(* @NESTEDCOMMENTS := 'Yes' *)
(* @PATH := '\/CodeSamples\/CANopen\/UniversalMaster' *)
(* @OBJECTFLAGS := '0, 8' *)
(* @SYMFILEFLAGS := '2048' *)
FUNCTION_BLOCK FB_Configuration_CANopenSlave_Phoenix_FLS_CO_DI8
VAR_INPUT
	Enable: BOOL; 			(* Activate config *)
END_VAR
VAR_OUTPUT
	Done: BOOL;				(* Config done *)
END_VAR
VAR_IN_OUT
	ExtConfig : MC_EXTENDEDCONFIG_COSLAVE	;
	(*
		########################################################################################################
			MC_EXTENDEDCONFIG_COSLAVE
		#########################################################################################################

						
		Variable								Value			Description
		-------------------------------------------------------------------------------------------------------------------------------------------------------------
		bWaitBeforeOperational 				BOOL;			When TRUE, after the coupler has been parameterized, it won't be switched in operational
																before this variable is FALSE. This can be used for example, to store the configuration with the FB
																MPLC_Universal_CANopen, with Service "SEWIOS_STORE", after a reset of the coppler 
		-------------------------------------------------------------------------------------------------------------------------------------------------------------
		bNoSettingsDownload 				BOOL;			TRUE : No configuration of the module. The configuration has to be done manually.
		-------------------------------------------------------------------------------------------------------------------------------------------------------------
		bResetUnconditional 					BOOL;			Even if the Connect FB isn't in fault it is possible to reset the bus coppler
		-------------------------------------------------------------------------------------------------------------------------------------------------------------
		bIOHold 								BOOL;			TRUE : Input data remain unchanged and the output data are not resetet also if the FB is in fault 
		-------------------------------------------------------------------------------------------------------------------------------------------------------------
		TimeOutHeartBeat					UINT;			If this value (ms) is different to zero, HeartbeatMode will be activated
		-------------------------------------------------------------------------------------------------------------------------------------------------------------
		TimeOutNodeGuarding 				UINT;			If this value (ms) is different to zero, NodeGuarding will be activated. 
																Caution ! The MOVI-PLC basic doesn´t support NodeGuarding 
		-------------------------------------------------------------------------------------------------------------------------------------------------------------
		TimeOutInitSequence					UINT;			Timeout for initialisation sequence (seconds) 
		-------------------------------------------------------------------------------------------------------------------------------------------------------------
		NumberOfRxPDO 					UINT;			Receive PDO : MOVI-PLC --> Slave  max. 32 
		-------------------------------------------------------------------------------------------------------------------------------------------------------------
		NumberOfTxPDO 						UINT;			Send PDO :      Slave --> MOVI-PLC  max 32 
		-------------------------------------------------------------------------------------------------------------------------------------------------------------	
		SyncTime 								USINT;			Cycle time of the sync telegram in ms. 
																Default = 0 : no sync will be started.
																If  SyncTime > 0, this FB initializes a sync telegram with the ID set at SyncCOBID. 
																The slave has to support synchronous communication 
		-------------------------------------------------------------------------------------------------------------------------------------------------------------
		SyncCOBID							UINT;			Index 1005h. ID of the sync telegram. Usually 16#80. IF 0, the ID won't be written.
		-------------------------------------------------------------------------------------------------------------------------------------------------------------
		SyncTimeOut 							INT := -1;		Index 1006h. Normally equal to SyncTime. 
																The slave usually set SyncTimeOut equal to SyncTime * 1.5. 
																If < 0, the index won't be written. 0 means no control over the sync interval 
		-------------------------------------------------------------------------------------------------------------------------------------------------------------
		stInitialParameter_COSlave 			MC_INITIALPARAMETER_COSLAVE;
												(*#################################################################
												With this struct, user defined parameters will be written to the BusCoupler after the
												initialization of the MPLC_ConnectUniversalSlave_CANopen. 
												Add the following code to your program to initialise the struct : 
												Example:
												Index 16#6423:	Activates the event-driven transmission of PDOs with analog inputs
												Index 16#3500:	Index from the manufacturer specific profile area
	
													stInitialParameter_COSlave.aIndex[1] := 16#6423;  	(* Index to write to *)
													stInitialParameter_COSlave.aSubIndex[1] := 0;   	(* SubIndex to write to *)
													stInitialParameter_COSlave.aBytes[1] := 1;   		(* Number of bytes to write  *)
													stInitialParameter_COSlave.aData[1] := 1;   			(* Data *)
	
													stInitialParameter_COSlave.aIndex[2] := 16#3500;  	(* Index to write to *)
													stInitialParameter_COSlave.aSubIndex[2] := 0;   	(* SubIndex to write to *)
													stInitialParameter_COSlave.aBytes[2] := 2;   		(* Number of bytes to write *)
													stInitialParameter_COSlave.aData[2] := 5;   			(* Data *)
	
												If there are more than 10 (DHP11B) or 64 (DHx41B) parameters to write, declare 
												NUMOF_INITIALPARAMETER in your program.
	
													VAR_GLOBAL CONSTANT
														NUMOF_INITIALPARAMETER : UDINT := 20;	
													END_VAR
	
												##################################################################*)
			-------------------------------------------------------------------------------------------------------------------------------------------------------------
		(* IDs of the PDO telegrams. The IDs are always calculated with the following IDs as a basis + the address of the bus coupler *)

		RxPDO 								ARRAY[1..32] OF MC_PDO_COSLAVE;			(* MOVI-PLC --> Slave *)
												(* := 16#200,16#300,16#400,16#500,16#780,16#240,16#340,16#440,16#540,16#7C0;	*)
		-------------------------------------------------------------------------------------------------------------------------------------------------------------
		TxPDO 								ARRAY[1..32] OF MC_PDO_COSLAVE; 			(* Slave --> MOVI-PLC *)
												(*:= 16#180,16#280,16#380,16#480,16#680,16#1C0,16#2C0,16#3C0,16#4C0,16#6C0;*)
	*)
END_VAR

(* @END_DECLARATION := '0' *)
IF Enable AND NOT Done THEN

	(*########################################################

		Configuration of CANopenSlave (Phoenix FLS CO DI8)
		
	#########################################################

		TransmissionType for TxPDOs and RxPDOs:

			0:										Event controlled and sychron (with SYNC-Object)
			1-240:									Cyclic and synchron (with SYNC-Object)
			254:									Producer specified
			255:									Acyclic and eventcontrolled 
			255 and EventTime = InhibitTime:	Cyclic

	#########################################################	*)


	(*************************************************** TxPDOs of CANOpenSlave ( MOVI-PLC ReceiveObjects) ***********************************************************)

	ExtConfig.NumberOfTxPDO				:= 1;		(*  TxPDO ---> CANopenSlave Transmit *)

	ExtConfig.TxPDO[1].EventTime			:= 0;		(* Slave: Index 0x18xx SubIndex 5: CycleTime in ms for CANopenSlave TXPDO *)
	ExtConfig.TxPDO[1].InhibitTime			:= 0;		(* Slave: Index 0x18xx SubIndex 3: InhibitTime in ms for CANopenSlave TxPDO *)
	ExtConfig.TxPDO[1].TransmissionType	:= 255;		(* Slave: Index 0x18xx SubIndex 2: TransmissionType for this TxPDO *)


	(*************************************************** RxPDOs of CANOpenSlave ( MOVI-PLC TransmitObjects) **********************************************************)

	ExtConfig.NumberOfRxPDO				:= 0;		(*  RxPDO ---> CANopenSlave Receive *)

(*	ExtConfig.RxPDO[1].EventTime			:= 0;		(* Master: CycleTime in ms for TransmitObjects (MOVI-PLC) *)
	ExtConfig.RxPDO[1].InhibitTime			:= 0;		(* Master: InhibitTime in ms for TransmitObjects (MOVI-PLC) *)
	ExtConfig.RxPDO[1].Length				:= 1;		(* Master: Length of this TransmitObject in bytes *)
	ExtConfig.RxPDO[1].TransmissionType	:= 255;		(* Slave: Index 0x14xx SubIndex 2: TransmissionType for this RxPDO *)
*)

	(***************************************************** Additional parameters to set in the CANOpenSlave  ***************************************************************)

(*	Example to write user defined parameters (i.e. Index 16#6200):
	
	ExtConfig.stInitialParameter_COSlave.aIndex[1]			:= 16#6200;
	ExtConfig.stInitialParameter_COSlave.aSubIndex[1]	:= 0;
	ExtConfig.stInitialParameter_COSlave.aBytes[1]		:= 1;
	ExtConfig.stInitialParameter_COSlave.aData[1]			:= 16#64;
*)

	(********************************************** Additional configuration. Default values are in most cases sufficient *****************************************************)

	ExtConfig.bIOHold						:= FALSE;
	ExtConfig.bNoSettingsDownload			:= FALSE;
	ExtConfig.bWaitBeforeOperational		:= FALSE;
	ExtConfig.bResetUnconditional			:= FALSE;

	ExtConfig.TimeOutHeartBeat				:= 0;				(* [ms] *)
	ExtConfig.TimeOutNodeGuarding		:= 400;				(* [ms]. CAUTION ! DHP11B (MOVI-PLC basic) does NOT support NodeGuarding *)
	ExtConfig.TimeOutInitSequence			:= 6;				(* [seconds]. If the Init-Sequence takes longer than this TimeOut time --> Error *)
	ExtConfig.SyncCOBID						:= 0;				(* SyncObject ID for TransmissionType 0-240 (RxPDO). Usually 128. If 0, the ID will not be written *)
	ExtConfig.SyncTime						:= 0;				(* CycleTime for the SYNC-Object *)

	ExtConfig.TxPDO[1].COBID				:= 16#180;			(* In order to disable the use of RTR frames for the PDOs, set bit 30 = "RTR not allowed" *)
	ExtConfig.TxPDO[2].COBID				:= 16#280;			(* Ex. 16#4000_0280 *)
	ExtConfig.TxPDO[3].COBID				:= 16#380;
	ExtConfig.TxPDO[4].COBID				:= 16#480;			(* NOTE! These values are base values. The input "Address" will automatically be added *)
	ExtConfig.TxPDO[5].COBID				:= 16#680;
	ExtConfig.TxPDO[6].COBID				:= 16#1C0;
	ExtConfig.TxPDO[7].COBID				:= 16#2C0;
	ExtConfig.TxPDO[8].COBID				:= 16#3C0;
	ExtConfig.TxPDO[9].COBID				:= 16#4C0;
	ExtConfig.TxPDO[10].COBID				:= 16#6C0;

	ExtConfig.RxPDO[1].COBID				:= 16#200;
	ExtConfig.RxPDO[2].COBID				:= 16#300;
	ExtConfig.RxPDO[3].COBID				:= 16#400;
	ExtConfig.RxPDO[4].COBID				:= 16#500;
	ExtConfig.RxPDO[5].COBID				:= 16#780;
	ExtConfig.RxPDO[6].COBID				:= 16#240;
	ExtConfig.RxPDO[7].COBID				:= 16#340;
	ExtConfig.RxPDO[8].COBID				:= 16#440;
	ExtConfig.RxPDO[9].COBID				:= 16#540;
	ExtConfig.RxPDO[10].COBID				:= 16#7C0;

	Done := TRUE;

END_IF
END_FUNCTION_BLOCK


(* @NESTEDCOMMENTS := 'Yes' *)
(* @PATH := '\/CodeSamples\/CANopen\/UniversalMaster' *)
(* @OBJECTFLAGS := '0, 8' *)
(* @SYMFILEFLAGS := '2048' *)
FUNCTION_BLOCK FB_Configuration_CANopenSlave_Phoenix_FLS_CO_DIO8_8
VAR_INPUT
	Enable: BOOL; 			(* Activate config *)
END_VAR
VAR_OUTPUT
	Done: BOOL;				(* Config done *)
END_VAR
VAR_IN_OUT
	ExtConfig : MC_EXTENDEDCONFIG_COSLAVE	;
	(*
		########################################################################################################
			MC_EXTENDEDCONFIG_COSLAVE
		#########################################################################################################

						
		Variable								Value			Description
		-------------------------------------------------------------------------------------------------------------------------------------------------------------
		bWaitBeforeOperational 				BOOL;			When TRUE, after the coupler has been parameterized, it won't be switched in operational
																before this variable is FALSE. This can be used for example, to store the configuration with the FB
																MPLC_Universal_CANopen, with Service "SEWIOS_STORE", after a reset of the coppler 
		-------------------------------------------------------------------------------------------------------------------------------------------------------------
		bNoSettingsDownload 				BOOL;			TRUE : No configuration of the module. The configuration has to be done manually.
		-------------------------------------------------------------------------------------------------------------------------------------------------------------
		bResetUnconditional 					BOOL;			Even if the Connect FB isn't in fault it is possible to reset the bus coppler
		-------------------------------------------------------------------------------------------------------------------------------------------------------------
		bIOHold 								BOOL;			TRUE : Input data remain unchanged and the output data are not resetet also if the FB is in fault 
		-------------------------------------------------------------------------------------------------------------------------------------------------------------
		TimeOutHeartBeat					UINT;			If this value (ms) is different to zero, HeartbeatMode will be activated
		-------------------------------------------------------------------------------------------------------------------------------------------------------------
		TimeOutNodeGuarding 				UINT;			If this value (ms) is different to zero, NodeGuarding will be activated. 
																Caution ! The MOVI-PLC basic doesn´t support NodeGuarding 
		-------------------------------------------------------------------------------------------------------------------------------------------------------------
		TimeOutInitSequence					UINT;			Timeout for initialisation sequence (seconds) 
		-------------------------------------------------------------------------------------------------------------------------------------------------------------
		NumberOfRxPDO 					UINT;			Receive PDO : MOVI-PLC --> Slave  max. 32 
		-------------------------------------------------------------------------------------------------------------------------------------------------------------
		NumberOfTxPDO 						UINT;			Send PDO :      Slave --> MOVI-PLC  max 32 
		-------------------------------------------------------------------------------------------------------------------------------------------------------------	
		SyncTime 								USINT;			Cycle time of the sync telegram in ms. 
																Default = 0 : no sync will be started.
																If  SyncTime > 0, this FB initializes a sync telegram with the ID set at SyncCOBID. 
																The slave has to support synchronous communication 
		-------------------------------------------------------------------------------------------------------------------------------------------------------------
		SyncCOBID							UINT;			Index 1005h. ID of the sync telegram. Usually 16#80. IF 0, the ID won't be written.
		-------------------------------------------------------------------------------------------------------------------------------------------------------------
		SyncTimeOut 							INT := -1;		Index 1006h. Normally equal to SyncTime. 
																The slave usually set SyncTimeOut equal to SyncTime * 1.5. 
																If < 0, the index won't be written. 0 means no control over the sync interval 
		-------------------------------------------------------------------------------------------------------------------------------------------------------------
		stInitialParameter_COSlave 			MC_INITIALPARAMETER_COSLAVE;
												(*#################################################################
												With this struct, user defined parameters will be written to the BusCoupler after the
												initialization of the MPLC_ConnectUniversalSlave_CANopen. 
												Add the following code to your program to initialise the struct : 
												Example:
												Index 16#6423:	Activates the event-driven transmission of PDOs with analog inputs
												Index 16#3500:	Index from the manufacturer specific profile area
	
													stInitialParameter_COSlave.aIndex[1] := 16#6423;  	(* Index to write to *)
													stInitialParameter_COSlave.aSubIndex[1] := 0;   	(* SubIndex to write to *)
													stInitialParameter_COSlave.aBytes[1] := 1;   		(* Number of bytes to write  *)
													stInitialParameter_COSlave.aData[1] := 1;   			(* Data *)
	
													stInitialParameter_COSlave.aIndex[2] := 16#3500;  	(* Index to write to *)
													stInitialParameter_COSlave.aSubIndex[2] := 0;   	(* SubIndex to write to *)
													stInitialParameter_COSlave.aBytes[2] := 2;   		(* Number of bytes to write *)
													stInitialParameter_COSlave.aData[2] := 5;   			(* Data *)
	
												If there are more than 10 (DHP11B) or 64 (DHx41B) parameters to write, declare 
												NUMOF_INITIALPARAMETER in your program.
	
													VAR_GLOBAL CONSTANT
														NUMOF_INITIALPARAMETER : UDINT := 20;	
													END_VAR
	
												##################################################################*)
			-------------------------------------------------------------------------------------------------------------------------------------------------------------
		(* IDs of the PDO telegrams. The IDs are always calculated with the following IDs as a basis + the address of the bus coupler *)

		RxPDO 								ARRAY[1..32] OF MC_PDO_COSLAVE;			(* MOVI-PLC --> Slave *)
												(* := 16#200,16#300,16#400,16#500,16#780,16#240,16#340,16#440,16#540,16#7C0;	*)
		-------------------------------------------------------------------------------------------------------------------------------------------------------------
		TxPDO 								ARRAY[1..32] OF MC_PDO_COSLAVE; 			(* Slave --> MOVI-PLC *)
												(*:= 16#180,16#280,16#380,16#480,16#680,16#1C0,16#2C0,16#3C0,16#4C0,16#6C0;*)
	*)
END_VAR

(* @END_DECLARATION := '0' *)
IF Enable AND NOT Done THEN

	(*########################################################

		Configuration of CANopenSlave (Phoenix FLS CO DIO8/8)
		
	#########################################################

		TransmissionType for TxPDOs and RxPDOs:

			0:										Event controlled and sychron (with SYNC-Object)
			1-240:									Cyclic and synchron (with SYNC-Object)
			254:									Producer specified
			255:									Acyclic and eventcontrolled 
			255 and EventTime = InhibitTime:	Cyclic

	#########################################################	*)


	(*************************************************** TxPDOs of CANOpenSlave ( MOVI-PLC ReceiveObjects) ***********************************************************)

	ExtConfig.NumberOfTxPDO				:= 1;		(*  TxPDO ---> CANopenSlave Transmit *)

	ExtConfig.TxPDO[1].EventTime			:= 0;		(* Slave: Index 0x18xx SubIndex 5: CycleTime in ms for CANopenSlave TXPDO *)
	ExtConfig.TxPDO[1].InhibitTime			:= 0;		(* Slave: Index 0x18xx SubIndex 3: InhibitTime in ms for CANopenSlave TxPDO *)
	ExtConfig.TxPDO[1].TransmissionType	:= 255;		(* Slave: Index 0x18xx SubIndex 2: TransmissionType for this TxPDO *)


	(*************************************************** RxPDOs of CANOpenSlave ( MOVI-PLC TransmitObjects) **********************************************************)

	ExtConfig.NumberOfRxPDO				:= 1;		(*  RxPDO ---> CANopenSlave Receive *)

	ExtConfig.RxPDO[1].EventTime			:= 0;		(* Master: CycleTime in ms for TransmitObjects (MOVI-PLC) *)
	ExtConfig.RxPDO[1].InhibitTime			:= 0;		(* Master: InhibitTime in ms for TransmitObjects (MOVI-PLC) *)
	ExtConfig.RxPDO[1].Length				:= 1;		(* Master: Length of this TransmitObject in bytes *)
	ExtConfig.RxPDO[1].TransmissionType	:= 255;		(* Slave: Index 0x14xx SubIndex 2: TransmissionType for this RxPDO *)


	(***************************************************** Additional parameters to set in the CANOpenSlave  ***************************************************************)

(*	Example to write user defined parameters (i.e. Index 16#6200):
	
	ExtConfig.stInitialParameter_COSlave.aIndex[1]			:= 16#6200;
	ExtConfig.stInitialParameter_COSlave.aSubIndex[1]	:= 0;
	ExtConfig.stInitialParameter_COSlave.aBytes[1]		:= 1;
	ExtConfig.stInitialParameter_COSlave.aData[1]			:= 16#64;
*)

	(********************************************** Additional configuration. Default values are in most cases sufficient *****************************************************)

	ExtConfig.bIOHold						:= FALSE;
	ExtConfig.bNoSettingsDownload			:= FALSE;
	ExtConfig.bWaitBeforeOperational		:= FALSE;
	ExtConfig.bResetUnconditional			:= FALSE;

	ExtConfig.TimeOutHeartBeat				:= 0;				(* [ms] *)
	ExtConfig.TimeOutNodeGuarding		:= 400;				(* [ms]. CAUTION ! DHP11B (MOVI-PLC basic) does NOT support NodeGuarding *)
	ExtConfig.TimeOutInitSequence			:= 6;				(* [seconds]. If the Init-Sequence takes longer than this TimeOut time --> Error *)
	ExtConfig.SyncCOBID						:= 0;				(* SyncObject ID for TransmissionType 0-240 (RxPDO). Usually 128. If 0, the ID will not be written *)
	ExtConfig.SyncTime						:= 0;				(* CycleTime for the SYNC-Object *)

	ExtConfig.TxPDO[1].COBID				:= 16#180;			(* In order to disable the use of RTR frames for the PDOs, set bit 30 = "RTR not allowed" *)
	ExtConfig.TxPDO[2].COBID				:= 16#280;			(* Ex. 16#4000_0280 *)
	ExtConfig.TxPDO[3].COBID				:= 16#380;
	ExtConfig.TxPDO[4].COBID				:= 16#480;			(* NOTE! These values are base values. The input "Address" will automatically be added *)
	ExtConfig.TxPDO[5].COBID				:= 16#680;
	ExtConfig.TxPDO[6].COBID				:= 16#1C0;
	ExtConfig.TxPDO[7].COBID				:= 16#2C0;
	ExtConfig.TxPDO[8].COBID				:= 16#3C0;
	ExtConfig.TxPDO[9].COBID				:= 16#4C0;
	ExtConfig.TxPDO[10].COBID				:= 16#6C0;

	ExtConfig.RxPDO[1].COBID				:= 16#200;
	ExtConfig.RxPDO[2].COBID				:= 16#300;
	ExtConfig.RxPDO[3].COBID				:= 16#400;
	ExtConfig.RxPDO[4].COBID				:= 16#500;
	ExtConfig.RxPDO[5].COBID				:= 16#780;
	ExtConfig.RxPDO[6].COBID				:= 16#240;
	ExtConfig.RxPDO[7].COBID				:= 16#340;
	ExtConfig.RxPDO[8].COBID				:= 16#440;
	ExtConfig.RxPDO[9].COBID				:= 16#540;
	ExtConfig.RxPDO[10].COBID				:= 16#7C0;

	Done := TRUE;

END_IF
END_FUNCTION_BLOCK


(* @NESTEDCOMMENTS := 'Yes' *)
(* @PATH := '\/CodeSamples\/CANopen\/UniversalMaster' *)
(* @OBJECTFLAGS := '0, 8' *)
(* @SYMFILEFLAGS := '2048' *)
FUNCTION_BLOCK FB_Configuration_CANopenSlave_Phoenix_FLS_CO_DO8
VAR_INPUT
	Enable: BOOL; 			(* Activate config *)
END_VAR
VAR_OUTPUT
	Done: BOOL;				(* Config done *)
END_VAR
VAR_IN_OUT
	ExtConfig : MC_EXTENDEDCONFIG_COSLAVE	;
	(*
		########################################################################################################
			MC_EXTENDEDCONFIG_COSLAVE
		#########################################################################################################

						
		Variable								Value			Description
		-------------------------------------------------------------------------------------------------------------------------------------------------------------
		bWaitBeforeOperational 				BOOL;			When TRUE, after the coupler has been parameterized, it won't be switched in operational
																before this variable is FALSE. This can be used for example, to store the configuration with the FB
																MPLC_Universal_CANopen, with Service "SEWIOS_STORE", after a reset of the coppler 
		-------------------------------------------------------------------------------------------------------------------------------------------------------------
		bNoSettingsDownload 				BOOL;			TRUE : No configuration of the module. The configuration has to be done manually.
		-------------------------------------------------------------------------------------------------------------------------------------------------------------
		bResetUnconditional 					BOOL;			Even if the Connect FB isn't in fault it is possible to reset the bus coppler
		-------------------------------------------------------------------------------------------------------------------------------------------------------------
		bIOHold 								BOOL;			TRUE : Input data remain unchanged and the output data are not resetet also if the FB is in fault 
		-------------------------------------------------------------------------------------------------------------------------------------------------------------
		TimeOutHeartBeat					UINT;			If this value (ms) is different to zero, HeartbeatMode will be activated
		-------------------------------------------------------------------------------------------------------------------------------------------------------------
		TimeOutNodeGuarding 				UINT;			If this value (ms) is different to zero, NodeGuarding will be activated. 
																Caution ! The MOVI-PLC basic doesn´t support NodeGuarding 
		-------------------------------------------------------------------------------------------------------------------------------------------------------------
		TimeOutInitSequence					UINT;			Timeout for initialisation sequence (seconds) 
		-------------------------------------------------------------------------------------------------------------------------------------------------------------
		NumberOfRxPDO 					UINT;			Receive PDO : MOVI-PLC --> Slave  max. 32 
		-------------------------------------------------------------------------------------------------------------------------------------------------------------
		NumberOfTxPDO 						UINT;			Send PDO :      Slave --> MOVI-PLC  max 32 
		-------------------------------------------------------------------------------------------------------------------------------------------------------------	
		SyncTime 								USINT;			Cycle time of the sync telegram in ms. 
																Default = 0 : no sync will be started.
																If  SyncTime > 0, this FB initializes a sync telegram with the ID set at SyncCOBID. 
																The slave has to support synchronous communication 
		-------------------------------------------------------------------------------------------------------------------------------------------------------------
		SyncCOBID							UINT;			Index 1005h. ID of the sync telegram. Usually 16#80. IF 0, the ID won't be written.
		-------------------------------------------------------------------------------------------------------------------------------------------------------------
		SyncTimeOut 							INT := -1;		Index 1006h. Normally equal to SyncTime. 
																The slave usually set SyncTimeOut equal to SyncTime * 1.5. 
																If < 0, the index won't be written. 0 means no control over the sync interval 
		-------------------------------------------------------------------------------------------------------------------------------------------------------------
		stInitialParameter_COSlave 			MC_INITIALPARAMETER_COSLAVE;
												(*#################################################################
												With this struct, user defined parameters will be written to the BusCoupler after the
												initialization of the MPLC_ConnectUniversalSlave_CANopen. 
												Add the following code to your program to initialise the struct : 
												Example:
												Index 16#6423:	Activates the event-driven transmission of PDOs with analog inputs
												Index 16#3500:	Index from the manufacturer specific profile area
	
													stInitialParameter_COSlave.aIndex[1] := 16#6423;  	(* Index to write to *)
													stInitialParameter_COSlave.aSubIndex[1] := 0;   	(* SubIndex to write to *)
													stInitialParameter_COSlave.aBytes[1] := 1;   		(* Number of bytes to write  *)
													stInitialParameter_COSlave.aData[1] := 1;   			(* Data *)
	
													stInitialParameter_COSlave.aIndex[2] := 16#3500;  	(* Index to write to *)
													stInitialParameter_COSlave.aSubIndex[2] := 0;   	(* SubIndex to write to *)
													stInitialParameter_COSlave.aBytes[2] := 2;   		(* Number of bytes to write *)
													stInitialParameter_COSlave.aData[2] := 5;   			(* Data *)
	
												If there are more than 10 (DHP11B) or 64 (DHx41B) parameters to write, declare 
												NUMOF_INITIALPARAMETER in your program.
	
													VAR_GLOBAL CONSTANT
														NUMOF_INITIALPARAMETER : UDINT := 20;	
													END_VAR
	
												##################################################################*)
			-------------------------------------------------------------------------------------------------------------------------------------------------------------
		(* IDs of the PDO telegrams. The IDs are always calculated with the following IDs as a basis + the address of the bus coupler *)

		RxPDO 								ARRAY[1..32] OF MC_PDO_COSLAVE;			(* MOVI-PLC --> Slave *)
												(* := 16#200,16#300,16#400,16#500,16#780,16#240,16#340,16#440,16#540,16#7C0;	*)
		-------------------------------------------------------------------------------------------------------------------------------------------------------------
		TxPDO 								ARRAY[1..32] OF MC_PDO_COSLAVE; 			(* Slave --> MOVI-PLC *)
												(*:= 16#180,16#280,16#380,16#480,16#680,16#1C0,16#2C0,16#3C0,16#4C0,16#6C0;*)
	*)
END_VAR

(* @END_DECLARATION := '0' *)
IF Enable AND NOT Done THEN

	(*########################################################

		Configuration of CANopenSlave (Phoenix FLS CO DO8)
		
	#########################################################

		TransmissionType for TxPDOs and RxPDOs:

			0:										Event controlled and sychron (with SYNC-Object)
			1-240:									Cyclic and synchron (with SYNC-Object)
			254:									Producer specified
			255:									Acyclic and eventcontrolled 
			255 and EventTime = InhibitTime:	Cyclic

	#########################################################	*)


	(*************************************************** TxPDOs of CANOpenSlave ( MOVI-PLC ReceiveObjects) ***********************************************************)

	ExtConfig.NumberOfTxPDO				:= 0;		(*  TxPDO ---> CANopenSlave Transmit *)

(*	ExtConfig.TxPDO[1].EventTime			:= 0;		(* Slave: Index 0x18xx SubIndex 5: CycleTime in ms for CANopenSlave TXPDO *)
	ExtConfig.TxPDO[1].InhibitTime			:= 0;		(* Slave: Index 0x18xx SubIndex 3: InhibitTime in ms for CANopenSlave TxPDO *)
	ExtConfig.TxPDO[1].TransmissionType	:= 255;		(* Slave: Index 0x18xx SubIndex 2: TransmissionType for this TxPDO *)
*)

	(*************************************************** RxPDOs of CANOpenSlave ( MOVI-PLC TransmitObjects) **********************************************************)

	ExtConfig.NumberOfRxPDO				:= 1;		(*  RxPDO ---> CANopenSlave Receive *)

	ExtConfig.RxPDO[1].EventTime			:= 0;		(* Master: CycleTime in ms for TransmitObjects (MOVI-PLC) *)
	ExtConfig.RxPDO[1].InhibitTime			:= 0;		(* Master: InhibitTime in ms for TransmitObjects (MOVI-PLC) *)
	ExtConfig.RxPDO[1].Length				:= 1;		(* Master: Length of this TransmitObject in bytes *)
	ExtConfig.RxPDO[1].TransmissionType	:= 255;		(* Slave: Index 0x14xx SubIndex 2: TransmissionType for this RxPDO *)


	(***************************************************** Additional parameters to set in the CANOpenSlave  ***************************************************************)

(*	Example to write user defined parameters (i.e. Index 16#6200):
	
	ExtConfig.stInitialParameter_COSlave.aIndex[1]			:= 16#6200;
	ExtConfig.stInitialParameter_COSlave.aSubIndex[1]	:= 0;
	ExtConfig.stInitialParameter_COSlave.aBytes[1]		:= 1;
	ExtConfig.stInitialParameter_COSlave.aData[1]			:= 16#64;
*)

	(********************************************** Additional configuration. Default values are in most cases sufficient *****************************************************)

	ExtConfig.bIOHold						:= FALSE;
	ExtConfig.bNoSettingsDownload			:= FALSE;
	ExtConfig.bWaitBeforeOperational		:= FALSE;
	ExtConfig.bResetUnconditional			:= FALSE;

	ExtConfig.TimeOutHeartBeat				:= 0;				(* [ms] *)
	ExtConfig.TimeOutNodeGuarding		:= 400;				(* [ms]. CAUTION ! DHP11B (MOVI-PLC basic) does NOT support NodeGuarding *)
	ExtConfig.TimeOutInitSequence			:= 6;				(* [seconds]. If the Init-Sequence takes longer than this TimeOut time --> Error *)
	ExtConfig.SyncCOBID						:= 0;				(* SyncObject ID for TransmissionType 0-240 (RxPDO). Usually 128. If 0, the ID will not be written *)
	ExtConfig.SyncTime						:= 0;				(* CycleTime for the SYNC-Object *)

	ExtConfig.TxPDO[1].COBID				:= 16#180;			(* In order to disable the use of RTR frames for the PDOs, set bit 30 = "RTR not allowed" *)
	ExtConfig.TxPDO[2].COBID				:= 16#280;			(* Ex. 16#4000_0280 *)
	ExtConfig.TxPDO[3].COBID				:= 16#380;
	ExtConfig.TxPDO[4].COBID				:= 16#480;			(* NOTE! These values are base values. The input "Address" will automatically be added *)
	ExtConfig.TxPDO[5].COBID				:= 16#680;
	ExtConfig.TxPDO[6].COBID				:= 16#1C0;
	ExtConfig.TxPDO[7].COBID				:= 16#2C0;
	ExtConfig.TxPDO[8].COBID				:= 16#3C0;
	ExtConfig.TxPDO[9].COBID				:= 16#4C0;
	ExtConfig.TxPDO[10].COBID				:= 16#6C0;

	ExtConfig.RxPDO[1].COBID				:= 16#200;
	ExtConfig.RxPDO[2].COBID				:= 16#300;
	ExtConfig.RxPDO[3].COBID				:= 16#400;
	ExtConfig.RxPDO[4].COBID				:= 16#500;
	ExtConfig.RxPDO[5].COBID				:= 16#780;
	ExtConfig.RxPDO[6].COBID				:= 16#240;
	ExtConfig.RxPDO[7].COBID				:= 16#340;
	ExtConfig.RxPDO[8].COBID				:= 16#440;
	ExtConfig.RxPDO[9].COBID				:= 16#540;
	ExtConfig.RxPDO[10].COBID				:= 16#7C0;

	Done := TRUE;

END_IF
END_FUNCTION_BLOCK


(* @NESTEDCOMMENTS := 'Yes' *)
(* @PATH := '\/CodeSamples\/CANopen\/UniversalMaster' *)
(* @OBJECTFLAGS := '0, 8' *)
(* @SYMFILEFLAGS := '2048' *)
FUNCTION_BLOCK FB_Configuration_CANopenSlave_Phoenix_IL_CAN_BK_TC
VAR_INPUT
	Enable: BOOL; 			(* Activate config *)
END_VAR
VAR_OUTPUT
	Done: BOOL;				(* Config done *)
END_VAR
VAR_IN_OUT
	ExtConfig : MC_EXTENDEDCONFIG_COSLAVE	;
	(*
		########################################################################################################
			MC_EXTENDEDCONFIG_COSLAVE
		#########################################################################################################

						
		Variable								Value			Description
		-------------------------------------------------------------------------------------------------------------------------------------------------------------
		bWaitBeforeOperational 				BOOL;			When TRUE, after the coupler has been parameterized, it won't be switched in operational
																before this variable is FALSE. This can be used for example, to store the configuration with the FB
																MPLC_Universal_CANopen, with Service "SEWIOS_STORE", after a reset of the coppler 
		-------------------------------------------------------------------------------------------------------------------------------------------------------------
		bNoSettingsDownload 				BOOL;			TRUE : No configuration of the module. The configuration has to be done manually.
		-------------------------------------------------------------------------------------------------------------------------------------------------------------
		bResetUnconditional 					BOOL;			Even if the Connect FB isn't in fault it is possible to reset the bus coppler
		-------------------------------------------------------------------------------------------------------------------------------------------------------------
		bIOHold 								BOOL;			TRUE : Input data remain unchanged and the output data are not resetet also if the FB is in fault 
		-------------------------------------------------------------------------------------------------------------------------------------------------------------
		TimeOutHeartBeat					UINT;			If this value (ms) is different to zero, HeartbeatMode will be activated
		-------------------------------------------------------------------------------------------------------------------------------------------------------------
		TimeOutNodeGuarding 				UINT;			If this value (ms) is different to zero, NodeGuarding will be activated. 
																Caution ! The MOVI-PLC basic doesn´t support NodeGuarding 
		-------------------------------------------------------------------------------------------------------------------------------------------------------------
		TimeOutInitSequence					UINT;			Timeout for initialisation sequence (seconds) 
		-------------------------------------------------------------------------------------------------------------------------------------------------------------
		NumberOfRxPDO 					UINT;			Receive PDO : MOVI-PLC --> Slave  max. 32 
		-------------------------------------------------------------------------------------------------------------------------------------------------------------
		NumberOfTxPDO 						UINT;			Send PDO :      Slave --> MOVI-PLC  max 32 
		-------------------------------------------------------------------------------------------------------------------------------------------------------------	
		SyncTime 								USINT;			Cycle time of the sync telegram in ms. 
																Default = 0 : no sync will be started.
																If  SyncTime > 0, this FB initializes a sync telegram with the ID set at SyncCOBID. 
																The slave has to support synchronous communication 
		-------------------------------------------------------------------------------------------------------------------------------------------------------------
		SyncCOBID							UINT;			Index 1005h. ID of the sync telegram. Usually 16#80. IF 0, the ID won't be written.
		-------------------------------------------------------------------------------------------------------------------------------------------------------------
		SyncTimeOut 							INT := -1;		Index 1006h. Normally equal to SyncTime. 
																The slave usually set SyncTimeOut equal to SyncTime * 1.5. 
																If < 0, the index won't be written. 0 means no control over the sync interval 
		-------------------------------------------------------------------------------------------------------------------------------------------------------------
		stInitialParameter_COSlave 			MC_INITIALPARAMETER_COSLAVE;
												(*#################################################################
												With this struct, user defined parameters will be written to the BusCoupler after the
												initialization of the MPLC_ConnectUniversalSlave_CANopen. 
												Add the following code to your program to initialise the struct : 
												Example:
												Index 16#6423:	Activates the event-driven transmission of PDOs with analog inputs
												Index 16#3500:	Index from the manufacturer specific profile area
	
													stInitialParameter_COSlave.aIndex[1] := 16#6423;  	(* Index to write to *)
													stInitialParameter_COSlave.aSubIndex[1] := 0;   	(* SubIndex to write to *)
													stInitialParameter_COSlave.aBytes[1] := 1;   		(* Number of bytes to write  *)
													stInitialParameter_COSlave.aData[1] := 1;   			(* Data *)
	
													stInitialParameter_COSlave.aIndex[2] := 16#3500;  	(* Index to write to *)
													stInitialParameter_COSlave.aSubIndex[2] := 0;   	(* SubIndex to write to *)
													stInitialParameter_COSlave.aBytes[2] := 2;   		(* Number of bytes to write *)
													stInitialParameter_COSlave.aData[2] := 5;   			(* Data *)
	
												If there are more than 10 (DHP11B) or 64 (DHx41B) parameters to write, declare 
												NUMOF_INITIALPARAMETER in your program.
	
													VAR_GLOBAL CONSTANT
														NUMOF_INITIALPARAMETER : UDINT := 20;	
													END_VAR
	
												##################################################################*)
			-------------------------------------------------------------------------------------------------------------------------------------------------------------
		(* IDs of the PDO telegrams. The IDs are always calculated with the following IDs as a basis + the address of the bus coupler *)

		RxPDO 								ARRAY[1..32] OF MC_PDO_COSLAVE;			(* MOVI-PLC --> Slave *)
												(* := 16#200,16#300,16#400,16#500,16#780,16#240,16#340,16#440,16#540,16#7C0;	*)
		-------------------------------------------------------------------------------------------------------------------------------------------------------------
		TxPDO 								ARRAY[1..32] OF MC_PDO_COSLAVE; 			(* Slave --> MOVI-PLC *)
												(*:= 16#180,16#280,16#380,16#480,16#680,16#1C0,16#2C0,16#3C0,16#4C0,16#6C0;*)
	*)
END_VAR

(* @END_DECLARATION := '0' *)
IF Enable AND NOT Done THEN

	(*########################################################

		Configuration of CANopenSlave (Phoenix IL CAN BK TC)
		
	#########################################################

		TransmissionType for TxPDOs and RxPDOs:

			0:										Event controlled and sychron (with SYNC-Object)
			1-240:									Cyclic and synchron (with SYNC-Object)
			254:									Producer specified
			255:									Acyclic and eventcontrolled 
			255 and EventTime = InhibitTime:	Cyclic

	#########################################################	*)


	(*************************************************** TxPDOs of CANOpenSlave ( MOVI-PLC ReceiveObjects) ***********************************************************)

	ExtConfig.NumberOfTxPDO				:= 2;		(*  TxPDO ---> CANopenSlave Transmit *)

	ExtConfig.TxPDO[1].EventTime			:= 200;		(* Slave: Index 0x18xx SubIndex 5: CycleTime in ms for CANopenSlave TXPDO *)
	ExtConfig.TxPDO[1].InhibitTime			:= 5;		(* Slave: Index 0x18xx SubIndex 3: InhibitTime in ms for CANopenSlave TxPDO *)
	ExtConfig.TxPDO[1].TransmissionType	:= 255;		(* Slave: Index 0x18xx SubIndex 2: TransmissionType for this TxPDO *)

	ExtConfig.TxPDO[2].EventTime			:= 100;		(* Slave: Index 0x18xx SubIndex 5: CycleTime in ms for CANopenSlave TXPDO *)
	ExtConfig.TxPDO[2].InhibitTime			:= 100;		(* Slave: Index 0x18xx SubIndex 3: InhibitTime in ms for CANopenSlave TxPDO *)
	ExtConfig.TxPDO[2].TransmissionType	:= 255;		(* Slave: Index 0x18xx SubIndex 2: TransmissionType for this TxPDO *)


	(*************************************************** RxPDOs of CANOpenSlave ( MOVI-PLC TransmitObjects) **********************************************************)

	ExtConfig.NumberOfRxPDO				:= 2 (*3*);	(*  RxPDO ---> CANopenSlave Receive *)

	ExtConfig.RxPDO[1].EventTime			:= 200;		(* Master: CycleTime in ms for TransmitObjects (MOVI-PLC) *)
	ExtConfig.RxPDO[1].InhibitTime			:= 5;		(* Master: InhibitTime in ms for TransmitObjects (MOVI-PLC) *)
	ExtConfig.RxPDO[1].Length				:= 8;		(* Master: Length of this TransmitObject in bytes *)
	ExtConfig.RxPDO[1].TransmissionType	:= 255;		(* Slave: Index 0x14xx SubIndex 2: TransmissionType for this RxPDO *)

	ExtConfig.RxPDO[2].EventTime			:= 100;		(* Master: CycleTime in ms for TransmitObjects (MOVI-PLC) *)
	ExtConfig.RxPDO[2].InhibitTime			:= 100;		(* Master: InhibitTime in ms for TransmitObjects (MOVI-PLC) *)
	ExtConfig.RxPDO[2].Length				:= 8;		(* Master: Length of this TransmitObject in bytes *)
	ExtConfig.RxPDO[2].TransmissionType	:= 255;		(* Slave: Index 0x14xx SubIndex 2: TransmissionType for this RxPDO *)

(*	(* Special mapping for RxPDO3 *)
	ExtConfig.RxPDO[3].EventTime			:= 200;		(* Master: CycleTime in ms for TransmitObjects (MOVI-PLC) *)
	ExtConfig.RxPDO[3].InhibitTime			:= 5;		(* Master: InhibitTime in ms for TransmitObjects (MOVI-PLC) *)
	ExtConfig.RxPDO[3].Length				:= 2;		(* Master: Length of this TransmitObject in bytes *)
	ExtConfig.RxPDO[3].TransmissionType	:= 255;		(* Slave: Index 0x14xx SubIndex 2: TransmissionType for this RxPDO *)
*)

	(***************************************************** Additional parameters to set in the CANOpenSlave  ***************************************************************)

	(* Example of special mapping for RxPDO3 *)
	(* ################################ *)

(*	(* Deactivate PDO3 *)
	ExtConfig.stInitialParameter_COSlave.aIndex[1]			:= 16#1402;
	ExtConfig.stInitialParameter_COSlave.aSubIndex[1]	:= 1;
	ExtConfig.stInitialParameter_COSlave.aBytes[1]		:= 4;
	ExtConfig.stInitialParameter_COSlave.aData[1]			:= 16#8000_0000;

	(* Deactivate mapping for PDO3 *)
	ExtConfig.stInitialParameter_COSlave.aIndex[2]			:= 16#1602;
	ExtConfig.stInitialParameter_COSlave.aSubIndex[2]	:= 0;
	ExtConfig.stInitialParameter_COSlave.aBytes[2]		:= 1;
	ExtConfig.stInitialParameter_COSlave.aData[2]			:= 0;

	(* Map PDO3 Byte 1 *)
	ExtConfig.stInitialParameter_COSlave.aIndex[3]			:= 16#1602;
	ExtConfig.stInitialParameter_COSlave.aSubIndex[3]	:= 1;
	ExtConfig.stInitialParameter_COSlave.aBytes[3]		:= 4;
	ExtConfig.stInitialParameter_COSlave.aData[3]			:= 16#6200_09_08;

	(* Map PDO3 Byte 2 *)
	ExtConfig.stInitialParameter_COSlave.aIndex[4]			:= 16#1602;
	ExtConfig.stInitialParameter_COSlave.aSubIndex[4]	:= 2;
	ExtConfig.stInitialParameter_COSlave.aBytes[4]		:= 4;
	ExtConfig.stInitialParameter_COSlave.aData[4]			:= 16#6200_0A_08;

	(* Activate mapping for PDO3 *)
	ExtConfig.stInitialParameter_COSlave.aIndex[5]			:= 16#1602;
	ExtConfig.stInitialParameter_COSlave.aSubIndex[5]	:= 0;
	ExtConfig.stInitialParameter_COSlave.aBytes[5]		:= 1;
	ExtConfig.stInitialParameter_COSlave.aData[5]			:= 2;

	(* Activate PDO3 *)
	ExtConfig.stInitialParameter_COSlave.aIndex[6]			:= 16#1402;
	ExtConfig.stInitialParameter_COSlave.aSubIndex[6]	:= 1;
	ExtConfig.stInitialParameter_COSlave.aBytes[6]		:= 4;
	ExtConfig.stInitialParameter_COSlave.aData[6]			:= 16#0000_0403;
*)

	(********************************************** Additional configuration. Default values are in most cases sufficient *****************************************************)

	ExtConfig.bIOHold						:= FALSE;
	ExtConfig.bNoSettingsDownload			:= FALSE;
	ExtConfig.bWaitBeforeOperational		:= FALSE;
	ExtConfig.bResetUnconditional			:= FALSE;

	ExtConfig.TimeOutHeartBeat				:= 400;				(* [ms] *)
	ExtConfig.TimeOutNodeGuarding		:= 0;				(* [ms]. CAUTION ! DHP11B (MOVI-PLC basic) does NOT support NodeGuarding *)
	ExtConfig.TimeOutInitSequence			:= 10;				(* [seconds]. If the Init-Sequence takes longer than this TimeOut time --> Error *)
	ExtConfig.SyncCOBID						:= 0;				(* SyncObject ID for TransmissionType 0-240 (RxPDO). Usually 128. If 0, the ID will not be written *)
	ExtConfig.SyncTime						:= 0;				(* CycleTime for the SYNC-Object *)

	ExtConfig.TxPDO[1].COBID				:= 16#180;			(* In order to disable the use of RTR frames for the PDOs, set bit 30 = "RTR not allowed" *)
	ExtConfig.TxPDO[2].COBID				:= 16#280;			(* Ex. 16#4000_0280 *)
	ExtConfig.TxPDO[3].COBID				:= 16#380;
	ExtConfig.TxPDO[4].COBID				:= 16#480;			(* NOTE! These values are base values. The input "Address" will automatically be added *)
	ExtConfig.TxPDO[5].COBID				:= 16#680;
	ExtConfig.TxPDO[6].COBID				:= 16#1C0;
	ExtConfig.TxPDO[7].COBID				:= 16#2C0;
	ExtConfig.TxPDO[8].COBID				:= 16#3C0;
	ExtConfig.TxPDO[9].COBID				:= 16#4C0;
	ExtConfig.TxPDO[10].COBID				:= 16#6C0;

	ExtConfig.RxPDO[1].COBID				:= 16#200;
	ExtConfig.RxPDO[2].COBID				:= 16#300;
	ExtConfig.RxPDO[3].COBID				:= 16#400;
	ExtConfig.RxPDO[4].COBID				:= 16#500;
	ExtConfig.RxPDO[5].COBID				:= 16#780;
	ExtConfig.RxPDO[6].COBID				:= 16#240;
	ExtConfig.RxPDO[7].COBID				:= 16#340;
	ExtConfig.RxPDO[8].COBID				:= 16#440;
	ExtConfig.RxPDO[9].COBID				:= 16#540;
	ExtConfig.RxPDO[10].COBID				:= 16#7C0;

	Done := TRUE;

END_IF
END_FUNCTION_BLOCK


(* @NESTEDCOMMENTS := 'Yes' *)
(* @PATH := '\/CodeSamples\/CANopen\/UniversalMaster' *)
(* @OBJECTFLAGS := '0, 8' *)
(* @SYMFILEFLAGS := '2048' *)
FUNCTION_BLOCK FB_Configuration_CANopenSlave_Phoenix_ILB_CO_DI16_DO16
VAR_INPUT
	Enable: BOOL; 			(* Activate config *)
END_VAR
VAR_OUTPUT
	Done: BOOL;				(* Config done *)
END_VAR
VAR_IN_OUT
	ExtConfig : MC_EXTENDEDCONFIG_COSLAVE	;
	(*
		########################################################################################################
			MC_EXTENDEDCONFIG_COSLAVE
		#########################################################################################################

						
		Variable								Value			Description
		-------------------------------------------------------------------------------------------------------------------------------------------------------------
		bWaitBeforeOperational 				BOOL;			When TRUE, after the coupler has been parameterized, it won't be switched in operational
																before this variable is FALSE. This can be used for example, to store the configuration with the FB
																MPLC_Universal_CANopen, with Service "SEWIOS_STORE", after a reset of the coppler 
		-------------------------------------------------------------------------------------------------------------------------------------------------------------
		bNoSettingsDownload 				BOOL;			TRUE : No configuration of the module. The configuration has to be done manually.
		-------------------------------------------------------------------------------------------------------------------------------------------------------------
		bResetUnconditional 					BOOL;			Even if the Connect FB isn't in fault it is possible to reset the bus coppler
		-------------------------------------------------------------------------------------------------------------------------------------------------------------
		bIOHold 								BOOL;			TRUE : Input data remain unchanged and the output data are not resetet also if the FB is in fault 
		-------------------------------------------------------------------------------------------------------------------------------------------------------------
		TimeOutHeartBeat					UINT;			If this value (ms) is different to zero, HeartbeatMode will be activated
		-------------------------------------------------------------------------------------------------------------------------------------------------------------
		TimeOutNodeGuarding 				UINT;			If this value (ms) is different to zero, NodeGuarding will be activated. 
																Caution ! The MOVI-PLC basic doesn´t support NodeGuarding 
		-------------------------------------------------------------------------------------------------------------------------------------------------------------
		TimeOutInitSequence					UINT;			Timeout for initialisation sequence (seconds) 
		-------------------------------------------------------------------------------------------------------------------------------------------------------------
		NumberOfRxPDO 					UINT;			Receive PDO : MOVI-PLC --> Slave  max. 32 
		-------------------------------------------------------------------------------------------------------------------------------------------------------------
		NumberOfTxPDO 						UINT;			Send PDO :      Slave --> MOVI-PLC  max 32 
		-------------------------------------------------------------------------------------------------------------------------------------------------------------	
		SyncTime 								USINT;			Cycle time of the sync telegram in ms. 
																Default = 0 : no sync will be started.
																If  SyncTime > 0, this FB initializes a sync telegram with the ID set at SyncCOBID. 
																The slave has to support synchronous communication 
		-------------------------------------------------------------------------------------------------------------------------------------------------------------
		SyncCOBID							UINT;			Index 1005h. ID of the sync telegram. Usually 16#80. IF 0, the ID won't be written.
		-------------------------------------------------------------------------------------------------------------------------------------------------------------
		SyncTimeOut 							INT := -1;		Index 1006h. Normally equal to SyncTime. 
																The slave usually set SyncTimeOut equal to SyncTime * 1.5. 
																If < 0, the index won't be written. 0 means no control over the sync interval 
		-------------------------------------------------------------------------------------------------------------------------------------------------------------
		stInitialParameter_COSlave 			MC_INITIALPARAMETER_COSLAVE;
												(*#################################################################
												With this struct, user defined parameters will be written to the BusCoupler after the
												initialization of the MPLC_ConnectUniversalSlave_CANopen. 
												Add the following code to your program to initialise the struct : 
												Example:
												Index 16#6423:	Activates the event-driven transmission of PDOs with analog inputs
												Index 16#3500:	Index from the manufacturer specific profile area
	
													stInitialParameter_COSlave.aIndex[1] := 16#6423;  	(* Index to write to *)
													stInitialParameter_COSlave.aSubIndex[1] := 0;   	(* SubIndex to write to *)
													stInitialParameter_COSlave.aBytes[1] := 1;   		(* Number of bytes to write  *)
													stInitialParameter_COSlave.aData[1] := 1;   			(* Data *)
	
													stInitialParameter_COSlave.aIndex[2] := 16#3500;  	(* Index to write to *)
													stInitialParameter_COSlave.aSubIndex[2] := 0;   	(* SubIndex to write to *)
													stInitialParameter_COSlave.aBytes[2] := 2;   		(* Number of bytes to write *)
													stInitialParameter_COSlave.aData[2] := 5;   			(* Data *)
	
												If there are more than 10 (DHP11B) or 64 (DHx41B) parameters to write, declare 
												NUMOF_INITIALPARAMETER in your program.
	
													VAR_GLOBAL CONSTANT
														NUMOF_INITIALPARAMETER : UDINT := 20;	
													END_VAR
	
												##################################################################*)
			-------------------------------------------------------------------------------------------------------------------------------------------------------------
		(* IDs of the PDO telegrams. The IDs are always calculated with the following IDs as a basis + the address of the bus coupler *)

		RxPDO 								ARRAY[1..32] OF MC_PDO_COSLAVE;			(* MOVI-PLC --> Slave *)
												(* := 16#200,16#300,16#400,16#500,16#780,16#240,16#340,16#440,16#540,16#7C0;	*)
		-------------------------------------------------------------------------------------------------------------------------------------------------------------
		TxPDO 								ARRAY[1..32] OF MC_PDO_COSLAVE; 			(* Slave --> MOVI-PLC *)
												(*:= 16#180,16#280,16#380,16#480,16#680,16#1C0,16#2C0,16#3C0,16#4C0,16#6C0;*)
	*)
END_VAR

(* @END_DECLARATION := '0' *)
IF Enable AND NOT Done THEN

	(*########################################################

		Configuration of CANopenSlave (Phoenix ILB CO DI16 DO16)
		
	#########################################################

		TransmissionType for TxPDOs and RxPDOs:

			0:										Event controlled and sychron (with SYNC-Object)
			1-240:									Cyclic and synchron (with SYNC-Object)
			254:									Producer specified
			255:									Acyclic and eventcontrolled 
			255 and EventTime = InhibitTime:	Cyclic

	#########################################################	*)


	(*************************************************** TxPDOs of CANOpenSlave ( MOVI-PLC ReceiveObjects) ***********************************************************)

	ExtConfig.NumberOfTxPDO				:= 1;		(*  TxPDO ---> CANopenSlave Transmit *)

	ExtConfig.TxPDO[1].EventTime			:= 0;		(* Slave: Index 0x18xx SubIndex 5: CycleTime in ms for CANopenSlave TXPDO *)
	ExtConfig.TxPDO[1].InhibitTime			:= 0;		(* Slave: Index 0x18xx SubIndex 3: InhibitTime in ms for CANopenSlave TxPDO *)
	ExtConfig.TxPDO[1].TransmissionType	:= 255;		(* Slave: Index 0x18xx SubIndex 2: TransmissionType for this TxPDO *)


	(*************************************************** RxPDOs of CANOpenSlave ( MOVI-PLC TransmitObjects) **********************************************************)

	ExtConfig.NumberOfRxPDO				:= 1;		(*  RxPDO ---> CANopenSlave Receive *)

	ExtConfig.RxPDO[1].EventTime			:= 0;		(* Master: CycleTime in ms for TransmitObjects (MOVI-PLC) *)
	ExtConfig.RxPDO[1].InhibitTime			:= 0;		(* Master: InhibitTime in ms for TransmitObjects (MOVI-PLC) *)
	ExtConfig.RxPDO[1].Length				:= 2;		(* Master: Length of this TransmitObject in bytes *)
	ExtConfig.RxPDO[1].TransmissionType	:= 255;		(* Slave: Index 0x14xx SubIndex 2: TransmissionType for this RxPDO *)


	(***************************************************** Additional parameters to set in the CANOpenSlave  ***************************************************************)

(*	Example to write user defined parameters (i.e. Index 16#6200):
	
	ExtConfig.stInitialParameter_COSlave.aIndex[1]			:= 16#6200;
	ExtConfig.stInitialParameter_COSlave.aSubIndex[1]	:= 0;
	ExtConfig.stInitialParameter_COSlave.aBytes[1]		:= 1;
	ExtConfig.stInitialParameter_COSlave.aData[1]			:= 16#64;
*)

	(********************************************** Additional configuration. Default values are in most cases sufficient *****************************************************)

	ExtConfig.bIOHold						:= FALSE;
	ExtConfig.bNoSettingsDownload			:= FALSE;
	ExtConfig.bWaitBeforeOperational		:= FALSE;
	ExtConfig.bResetUnconditional			:= FALSE;

	ExtConfig.TimeOutHeartBeat				:= 0;				(* [ms] *)
	ExtConfig.TimeOutNodeGuarding		:= 400;				(* [ms]. CAUTION ! DHP11B (MOVI-PLC basic) does NOT support NodeGuarding *)
	ExtConfig.TimeOutInitSequence			:= 6;				(* [seconds]. If the Init-Sequence takes longer than this TimeOut time --> Error *)
	ExtConfig.SyncCOBID						:= 0;				(* SyncObject ID for TransmissionType 0-240 (RxPDO). Usually 128. If 0, the ID will not be written *)
	ExtConfig.SyncTime						:= 0;				(* CycleTime for the SYNC-Object *)

	ExtConfig.TxPDO[1].COBID				:= 16#180;			(* In order to disable the use of RTR frames for the PDOs, set bit 30 = "RTR not allowed" *)
	ExtConfig.TxPDO[2].COBID				:= 16#280;			(* Ex. 16#4000_0280 *)
	ExtConfig.TxPDO[3].COBID				:= 16#380;
	ExtConfig.TxPDO[4].COBID				:= 16#480;			(* NOTE! These values are base values. The input "Address" will automatically be added *)
	ExtConfig.TxPDO[5].COBID				:= 16#680;
	ExtConfig.TxPDO[6].COBID				:= 16#1C0;
	ExtConfig.TxPDO[7].COBID				:= 16#2C0;
	ExtConfig.TxPDO[8].COBID				:= 16#3C0;
	ExtConfig.TxPDO[9].COBID				:= 16#4C0;
	ExtConfig.TxPDO[10].COBID				:= 16#6C0;

	ExtConfig.RxPDO[1].COBID				:= 16#200;
	ExtConfig.RxPDO[2].COBID				:= 16#300;
	ExtConfig.RxPDO[3].COBID				:= 16#400;
	ExtConfig.RxPDO[4].COBID				:= 16#500;
	ExtConfig.RxPDO[5].COBID				:= 16#780;
	ExtConfig.RxPDO[6].COBID				:= 16#240;
	ExtConfig.RxPDO[7].COBID				:= 16#340;
	ExtConfig.RxPDO[8].COBID				:= 16#440;
	ExtConfig.RxPDO[9].COBID				:= 16#540;
	ExtConfig.RxPDO[10].COBID				:= 16#7C0;

	Done := TRUE;

END_IF
END_FUNCTION_BLOCK


(* @NESTEDCOMMENTS := 'Yes' *)
(* @PATH := '\/CodeSamples\/CANopen\/UniversalMaster' *)
(* @OBJECTFLAGS := '0, 8' *)
(* @SYMFILEFLAGS := '2048' *)
FUNCTION_BLOCK FB_Configuration_CANopenSlave_PNOZ
VAR_INPUT
	Enable: BOOL; 			(* Activate config *)
END_VAR
VAR_OUTPUT
	Done: BOOL;				(* Config done *)
END_VAR
VAR_IN_OUT
	ExtConfig : MC_EXTENDEDCONFIG_COSLAVE	;
	(*
		########################################################################################################
			MC_EXTENDEDCONFIG_COSLAVE
		#########################################################################################################

						
		Variable								Value			Description
		-------------------------------------------------------------------------------------------------------------------------------------------------------------
		bWaitBeforeOperational 				BOOL;			When TRUE, after the coupler has been parameterized, it won't be switched in operational
																before this variable is FALSE. This can be used for example, to store the configuration with the FB
																MPLC_Universal_CANopen, with Service "SEWIOS_STORE", after a reset of the coppler 
		-------------------------------------------------------------------------------------------------------------------------------------------------------------
		bNoSettingsDownload 				BOOL;			TRUE : No configuration of the module. The configuration has to be done manually.
		-------------------------------------------------------------------------------------------------------------------------------------------------------------
		bResetUnconditional 					BOOL;			Even if the Connect FB isn't in fault it is possible to reset the bus coppler
		-------------------------------------------------------------------------------------------------------------------------------------------------------------
		bIOHold 								BOOL;			TRUE : Input data remain unchanged and the output data are not resetet also if the FB is in fault 
		-------------------------------------------------------------------------------------------------------------------------------------------------------------
		TimeOutHeartBeat					UINT;			If this value (ms) is different to zero, HeartbeatMode will be activated
		-------------------------------------------------------------------------------------------------------------------------------------------------------------
		TimeOutNodeGuarding 				UINT;			If this value (ms) is different to zero, NodeGuarding will be activated. 
																Caution ! The MOVI-PLC basic doesn´t support NodeGuarding 
		-------------------------------------------------------------------------------------------------------------------------------------------------------------
		TimeOutInitSequence					UINT;			Timeout for initialisation sequence (seconds) 
		-------------------------------------------------------------------------------------------------------------------------------------------------------------
		NumberOfRxPDO 					UINT;			Receive PDO : MOVI-PLC --> Slave  max. 32 
		-------------------------------------------------------------------------------------------------------------------------------------------------------------
		NumberOfTxPDO 						UINT;			Send PDO :      Slave --> MOVI-PLC  max 32 
		-------------------------------------------------------------------------------------------------------------------------------------------------------------	
		SyncTime 								USINT;			Cycle time of the sync telegram in ms. 
																Default = 0 : no sync will be started.
																If  SyncTime > 0, this FB initializes a sync telegram with the ID set at SyncCOBID. 
																The slave has to support synchronous communication 
		-------------------------------------------------------------------------------------------------------------------------------------------------------------
		SyncCOBID							UINT;			Index 1005h. ID of the sync telegram. Usually 16#80. IF 0, the ID won't be written.
		-------------------------------------------------------------------------------------------------------------------------------------------------------------
		SyncTimeOut 							INT := -1;		Index 1006h. Normally equal to SyncTime. 
																The slave usually set SyncTimeOut equal to SyncTime * 1.5. 
																If < 0, the index won't be written. 0 means no control over the sync interval 
		-------------------------------------------------------------------------------------------------------------------------------------------------------------
		stInitialParameter_COSlave 			MC_INITIALPARAMETER_COSLAVE;
												(*#################################################################
												With this struct, user defined parameters will be written to the BusCoupler after the
												initialization of the MPLC_ConnectUniversalSlave_CANopen. 
												Add the following code to your program to initialise the struct : 
												Example:
												Index 16#6423:	Activates the event-driven transmission of PDOs with analog inputs
												Index 16#3500:	Index from the manufacturer specific profile area
	
													stInitialParameter_COSlave.aIndex[1] := 16#6423;  	(* Index to write to *)
													stInitialParameter_COSlave.aSubIndex[1] := 0;   	(* SubIndex to write to *)
													stInitialParameter_COSlave.aBytes[1] := 1;   		(* Number of bytes to write  *)
													stInitialParameter_COSlave.aData[1] := 1;   			(* Data *)
	
													stInitialParameter_COSlave.aIndex[2] := 16#3500;  	(* Index to write to *)
													stInitialParameter_COSlave.aSubIndex[2] := 0;   	(* SubIndex to write to *)
													stInitialParameter_COSlave.aBytes[2] := 2;   		(* Number of bytes to write *)
													stInitialParameter_COSlave.aData[2] := 5;   			(* Data *)
	
												If there are more than 10 (DHP11B) or 64 (DHx41B) parameters to write, declare 
												NUMOF_INITIALPARAMETER in your program.
	
													VAR_GLOBAL CONSTANT
														NUMOF_INITIALPARAMETER : UDINT := 20;	
													END_VAR
	
												##################################################################*)
			-------------------------------------------------------------------------------------------------------------------------------------------------------------
		(* IDs of the PDO telegrams. The IDs are always calculated with the following IDs as a basis + the address of the bus coupler *)

		RxPDO 								ARRAY[1..32] OF MC_PDO_COSLAVE;			(* MOVI-PLC --> Slave *)
												(* := 16#200,16#300,16#400,16#500,16#780,16#240,16#340,16#440,16#540,16#7C0;	*)
		-------------------------------------------------------------------------------------------------------------------------------------------------------------
		TxPDO 								ARRAY[1..32] OF MC_PDO_COSLAVE; 			(* Slave --> MOVI-PLC *)
												(*:= 16#180,16#280,16#380,16#480,16#680,16#1C0,16#2C0,16#3C0,16#4C0,16#6C0;*)
	*)
END_VAR

(* @END_DECLARATION := '0' *)
(* 21.12.2010	FL  noch nicht getestet *)


IF Enable AND NOT Done THEN

	(*########################################################

		Configuration of CANopenSlave PNOZ)
		
		NOTE! 
		
	#########################################################

		TransmissionType for TxPDOs and RxPDOs:

			0:										Event controlled and sychron (with SYNC-Object)
			1-240:									Cyclic and synchron (with SYNC-Object)
			254:									Producer specified
			255:									Acyclic and eventcontrolled 
			255 and EventTime = InhibitTime:	Cyclic

	#########################################################	*)

	ExtConfig.bWaitBeforeOperational			:=FALSE;
	ExtConfig.bNoSettingsDownload				:=FALSE;
	ExtConfig.bResetUnconditional				:=FALSE;
	ExtConfig.bIOHold 							:=FALSE;

	ExtConfig.TimeOutHeartBeat 				:=16#FFFF;
	ExtConfig.TimeOutNodeGuarding 			:=16#00;
	ExtConfig.TimeOutInitSequence 				:=16#10;

	ExtConfig.SyncCOBID							:= 128;				(* SyncObject ID for TransmissionType 0-240 (RxPDO). Usually 128. If 0, the ID will not be written *)
	ExtConfig.SyncTime							:= 0;				(* CycleTime for the SYNC-Object *)
	ExtConfig.SyncTimeOut 						:=-1;



	(**************************************************** TxPDOs of CANOpenSlave ( MOVI-PLC ReceiveObjects) ************************************************************)

	ExtConfig.NumberOfTxPDO		:= 3;		(*  TxPDO ---> CANopenSlave Transmit *)
(* TxPDO ---> Sende-PDO1:AusgangsDaten 0---7 *)
	ExtConfig.TxPDO[1].EventTime	:= 0;		(* Master: CycleTime in ms for TransmitObjects (MOVI-PLC) *)
	ExtConfig.TxPDO[1].Length		:= 8;		(* Master: Length of this TransmitObject in bytes *)
(*  TxPDO ---> Sende-PDO2: :AusgangsDaten 8---15 *)
	ExtConfig.TxPDO[2].EventTime	:= 0;		(* Master: CycleTime in ms for TransmitObjects (MOVI-PLC) *)
	ExtConfig.TxPDO[2].Length		:= 8;		(* Master: Length of this TransmitObject in bytes *)
(*  Sende PDO3: :AusgangsDaten 16---19  *)
	ExtConfig.TxPDO[3].EventTime	:= 0;		(* Master: CycleTime in ms for TransmitObjects (MOVI-PLC) *)
	ExtConfig.TxPDO[3].Length		:= 8;		(* Master: Length of this TransmitObject in bytes *)


	(*************************************************** RxPDOs of CANOpenSlave ( MOVI-PLC TransmitObjects) **********************************************************)
	ExtConfig.NumberOfRxPDO			:= 3;		(*  RxPDO ---> CANopenSlave Receive *)

	(* Empfangs-PDO: EingangsDaten 0---7 *)
	ExtConfig.RxPDO[1].InhibitTime		:= 0;		(* Master: InhibitTime in ms for TransmitObjects (MOVI-PLC) *)
	ExtConfig.RxPDO[1].Length			:= 8;		(* Master: Length of this TransmitObject in bytes *)

	(* Empfangs-PDO:EingangsDaten 8--15*)
	ExtConfig.RxPDO[2].InhibitTime		:= 0;		(* Master: InhibitTime in ms for TransmitObjects (MOVI-PLC) *)
	ExtConfig.RxPDO[2].Length			:= 8;		(* Master: Length of this TransmitObject in bytes *)
	(* Empfangs-PDO: EingangsDaten 16---19*)
	ExtConfig.RxPDO[3].InhibitTime		:= 0;		(* Master: InhibitTime in ms for TransmitObjects (MOVI-PLC) *)
	ExtConfig.RxPDO[3].Length			:= 8;		(* Master: Length of this TransmitObject in bytes *)


	(***************************************************** Additional parameters to set in the CANOpenSlave  ***************************************************************)

	(* Set rotation direction *)

	(********************************************** Additional configuration. Default values are in most cases sufficient *****************************************************)



	ExtConfig.TxPDO[1].COBID				:= 16#180;		(* Impossible to change*)
	ExtConfig.TxPDO[2].COBID				:= 16#280;		(* Impossible to change*)
	ExtConfig.TxPDO[3].COBID				:= 16#1C0;	(* Impossible to change*)

	ExtConfig.RxPDO[1].COBID				:= 16#200;		(* Impossible to change*)
	ExtConfig.RxPDO[2].COBID				:= 16#300;		(* Impossible to change*)
	ExtConfig.RxPDO[3].COBID				:= 16#240;		(* Impossible to change*)

	Done := TRUE;

END_IF
END_FUNCTION_BLOCK


(* @NESTEDCOMMENTS := 'Yes' *)
(* @PATH := '\/CodeSamples\/CANopen\/UniversalMaster' *)
(* @OBJECTFLAGS := '0, 8' *)
(* @SYMFILEFLAGS := '2048' *)
FUNCTION_BLOCK FB_Configuration_CANopenSlave_SchneiderFTB
VAR_INPUT
	Enable: BOOL; 			(* Activate config *)
END_VAR
VAR_OUTPUT
	Done: BOOL;				(* Config done *)
END_VAR
VAR_IN_OUT
	ExtConfig : MC_EXTENDEDCONFIG_COSLAVE	;
	(*
		########################################################################################################
			MC_EXTENDEDCONFIG_COSLAVE
		#########################################################################################################

						
		Variable								Value			Description
		-------------------------------------------------------------------------------------------------------------------------------------------------------------
		bWaitBeforeOperational :				 BOOL;	(* when TRUE, after the coupler has been parameterized, it won't be switched in operational
															before this variable is FALSE. This can be used for example, to store the configuration with the FB
															MPLC_Universal_CANopen, with Service "SEWIOS_STORE", after a reset of the coppler *)
		bNoSettingsDownload : 				BOOL;	(* when TRUE, all the parameters won't be downloaded to the coupler. This may be the case, once
															the coupler has been parameterized, and as long as the configuration and the coupler are not changed,
															it is not necessary to do it anymore *)
		bResetUnconditional :				BOOL;	(* even if the Connect FB isn't in fault it is possible to reset the bus coppler *)
		bIOHold :								BOOL;	(* when TRUE, the input data remain unchanged and the output data are not resetet also if the FB is in fault *)
		TimeOutHeartBeat :					UINT;	(* It is possible to use the NodeGuarding OR the HeartbeatMode (not both together). If you want to use one Mode
											  			  Consumer Heartbeat in ms*)
		bNoHeartBeat_Consumer:			BOOL := FALSE; (*Index 1016 SubIndex 0 not available*)
		DivTimeOutHeartBeat:				UINT:=4;(*	IF HeartbeatMode is activate AND ProducerHeartbeat is avaible,
															the Heartbeat Producertime is TimeOutHearBeat / this value.*)
		bNoHeartBeat_Producer: 			BOOL := FALSE;(* Index 1017 SubIndex 0 not available *)
		TimeOutNodeGuarding :				UINT;	(* the corresponding Timeout - Value has to be set > 0 (in ms). Caution ! The MOVI-PLC basic doesn´t support the Node Guarding *)
		bNoNodeGuarding: 					BOOL:=FALSE;(* the Index of NodeGuarding isn`t available *)
		TimeOutInitSequence:				UINT;	(* Time in seconds *)
		NumberOfRxPDO :					UINT;	(* MOVI-PLC --> Slave, max. 32 *)
		NumberOfTxPDO :					UINT;	(* Slave --> MOVI-PLC, max 32 *)
		OffsetOfRxPDO:						UINT;	(* Offset for the 1. RxPDO *)
		OffsetOfTxPDO:						UINT;	(* Offset for the 1. TxPDO *)
	
		SyncTime :							USINT;	(* cycle time of the sync telegram in ms. Default = 0 : no sync will be started.
															If > 0, this FB initializes a sync telegram with the following ID (if not 0). The slave has to support synchronous communication *)
		SyncCOBID :							UINT;	(* Index 1005h. ID of the sync telegram. Usually 16#80. If 0, the ID won't be written. *)
		SyncTimeOut :							INT := -1;	(* Index 1006h. Normally egal to SyncTime. The slave makes usually itself *1.5. If  <0, the index won't be written.
																0 means no control over the sync interval *)
	
		stInitialParameter_COSlave : 		MC_INITIALPARAMETER_COSLAVE;
												(*#################################################################
												 With this struct, ten user defined parameters will be written to the axis during the
												 initialization of MPLC_ConnectCANopenSlave. 
												 Add the following code to your program to initialise the struct : 
												Example:
												Index 16#6423:	Activates the event-driven transmission of PDOs with analog inputs
												Index 16#3000:	Index from the manufacturer specific profile area
	
													stInitialParameter_COSlave.aIndex[1] := 16#6423;  	(* Index to write to *)
													stInitialParameter_COSlave.aSubIndex[1] := 0;   	(* SubIndex to write to *)
													stInitialParameter_COSlave.aBytes[1] := 1;   		(* Number of bytes to write  *)
													stInitialParameter_COSlave.aData[1] := 1;   		(* Data *)
	
													stInitialParameter_COSlave.aIndex[2] := 16#3000;  	(* Index to write to *)
													stInitialParameter_COSlave.aSubIndex[2] := 0;   	(* SubIndex to write to *)
													stInitialParameter_COSlave.aBytes[2] := 2;   		(* Number of bytes to write *)
													stInitialParameter_COSlave.aData[2] := 5;   			(* Data *)
	
												If there are more than 10 parameters to write, declare NUMOF_INITIALPARAMETER
												in your program.
	
													VAR_GLOBAL CONSTANT
														NUMOF_INITIALPARAMETER : UDINT := 20;	
													END_VAR
	
												##################################################################*)

		bNoDeactivatePDO:					BOOL := FALSE; (* Change of Transmission Type, Inhibit- and Event- Time without deactivate RxPDO and TxPDO*)
		bNoTransmissionTyp_TxPDO: 		BOOL := FALSE; (* Transmission Type for TxPDO not changeable *)
		bNoTransmissionTyp_RxPDO: 		BOOL:= FALSE; (* Transmission Type for RxPDO not changeable *)
		bNoChangeCOBID_TxPDO      : 		BOOL := FALSE; (* COBID for TxPDO not changeable *)
		bNoChangeCOBID_RxPDO     : 		BOOL := FALSE; (* COBID for RxPDO not changeable *)
	
		(* IDs of the PDO telegrams. The IDs are always calculated with the following IDs as a basis + the address of the bus coppler *)
		RxPDO : ARRAY[1..32] OF MC_PDO_COSLAVE;(* := 16#200,16#300,16#400,16#500,16#780,16#240,16#340,16#440,16#540,16#7C0;		(* MOVI-PLC --> Bus coppler *)*)
		TxPDO : ARRAY[1..32] OF MC_PDO_COSLAVE; (*:= 16#180,16#280,16#380,16#480,16#680,16#1C0,16#2C0,16#3C0,16#4C0,16#6C0;	(* Bus coppler --> MOVI-PLC *)*)
	*)
END_VAR

(* @END_DECLARATION := '0' *)
IF Enable AND NOT Done THEN

	(*########################################################

		Configuration of CANopenSlave Schneider FTB 1CN .........
		
	#########################################################

		TransmissionType for TxPDOs and RxPDOs:

			0:										Event controlled and sychron (with SYNC-Object)
			1-240:									Cyclic and synchron (with SYNC-Object)
			254:									Producer specified
			255:									Acyclic and eventcontrolled 
			255 and EventTime = InhibitTime:	Cyclic

	#########################################################	*)


	(*************************************************** TxPDOs of CANOpenSlave ( MOVI-PLC ReceiveObjects) ***********************************************************)

	ExtConfig.NumberOfTxPDO				:= 1;		(*  TxPDO ---> CANopenSlave Transmit *)

	ExtConfig.TxPDO[1].EventTime			:= 100;		(* Slave: Index 0x18xx SubIndex 5: CycleTime in ms for CANopenSlave TXPDO *)
	ExtConfig.TxPDO[1].InhibitTime			:= 10;		(* Slave: Index 0x18xx SubIndex 3: InhibitTime in ms for CANopenSlave TxPDO *)
	ExtConfig.TxPDO[1].TransmissionType	:= 255;		(* Slave: Index 0x18xx SubIndex 2: TransmissionType for this TxPDO *)




	(*************************************************** RxPDOs of CANOpenSlave ( MOVI-PLC TransmitObjects) **********************************************************)

	ExtConfig.NumberOfRxPDO				:= 1;		(*  RxPDO ---> CANopenSlave Receive *)

	ExtConfig.RxPDO[1].EventTime			:= 100;		(* Master: CycleTime in ms for TransmitObjects (MOVI-PLC) *)
	ExtConfig.RxPDO[1].InhibitTime			:= 10;		(* Master: InhibitTime in ms for TransmitObjects (MOVI-PLC) *)
	ExtConfig.RxPDO[1].Length				:= 8;		(* Master: Length of this TransmitObject in bytes *)
	ExtConfig.RxPDO[1].TransmissionType	:= 255;		(* Slave: Index 0x14xx SubIndex 2: TransmissionType for this RxPDO *)




	(***************************************************** Additional parameters to set in the CANOpenSlave  ***************************************************************)
(* Parameter for FTB 1CN *)
	ExtConfig.stInitialParameter_COSlave.aIndex[1]			:= 16#2000;(**)
	ExtConfig.stInitialParameter_COSlave.aSubIndex[1]	:= 1;(* Input function channel 10..17*)
	ExtConfig.stInitialParameter_COSlave.aBytes[1]		:= 1;
	ExtConfig.stInitialParameter_COSlave.aData[1]			:= 2#00000000;(* 0=Input, 1=Diag Input *)

	ExtConfig.stInitialParameter_COSlave.aIndex[2]			:= 16#2001;(**)
	ExtConfig.stInitialParameter_COSlave.aSubIndex[2]	:= 1;(* Inpu/Output selection, channel 0..7,  *)
	ExtConfig.stInitialParameter_COSlave.aBytes[2]		:= 1;
	ExtConfig.stInitialParameter_COSlave.aData[2]			:= 2#00000000;(* 0=Input, 1=Output *)

	ExtConfig.stInitialParameter_COSlave.aIndex[3]			:= 16#2001;(**)
	ExtConfig.stInitialParameter_COSlave.aSubIndex[3]	:= 2;(* Inpu/Output selection, channel 10..17,  *)
	ExtConfig.stInitialParameter_COSlave.aBytes[3]		:= 1;
	ExtConfig.stInitialParameter_COSlave.aData[3]			:= 2#00000000;(* 0=Input, 1=Output *)


	(********************************************** Additional configuration. Default values are in most cases sufficient *****************************************************)

	ExtConfig.bIOHold						:= FALSE;
	ExtConfig.bNoSettingsDownload			:= FALSE;
	ExtConfig.bWaitBeforeOperational		:= FALSE;
	ExtConfig.bResetUnconditional			:= FALSE;

	ExtConfig.TimeOutHeartBeat				:= 250;				(* [ms] *)
(*	ExtConfig.DivTimeOutHeartBeat			:= 2;				(* Heartbeat Consumer = ExtConfig.TimeOutHeartBeat	 / ExtConfig.DivTimeOutHeartBeat *)*)
	ExtConfig.TimeOutNodeGuarding		:= 0;				(* [ms]. CAUTION ! DHP11B (MOVI-PLC basic) does NOT support NodeGuarding *)
	ExtConfig.TimeOutInitSequence			:= 10;				(* [seconds]. If the Init-Sequence takes longer than this TimeOut time --> Error *)
	ExtConfig.SyncCOBID						:= 0;				(* SyncObject ID for TransmissionType 0-240 (RxPDO). Usually 128. If 0, the ID will not be written *)
	ExtConfig.SyncTime						:= 0;				(* CycleTime for the SYNC-Object *)

	ExtConfig.TxPDO[1].COBID				:= 16#180;			(* In order to disable the use of RTR frames for the PDOs, set bit 30 = "RTR not allowed" *)
	ExtConfig.TxPDO[2].COBID				:= 16#280;			(* Ex. 16#4000_0280 *)
	ExtConfig.TxPDO[3].COBID				:= 16#380;
	ExtConfig.TxPDO[4].COBID				:= 16#480;			(* NOTE! These values are base values. The input "Address" will automatically be added *)
	ExtConfig.TxPDO[5].COBID				:= 16#680;
	ExtConfig.TxPDO[6].COBID				:= 16#1C0;
	ExtConfig.TxPDO[7].COBID				:= 16#2C0;
	ExtConfig.TxPDO[8].COBID				:= 16#3C0;
	ExtConfig.TxPDO[9].COBID				:= 16#4C0;
	ExtConfig.TxPDO[10].COBID				:= 16#6C0;

	ExtConfig.RxPDO[1].COBID				:= 16#200;
	ExtConfig.RxPDO[2].COBID				:= 16#300;
	ExtConfig.RxPDO[3].COBID				:= 16#400;
	ExtConfig.RxPDO[4].COBID				:= 16#500;
	ExtConfig.RxPDO[5].COBID				:= 16#780;
	ExtConfig.RxPDO[6].COBID				:= 16#240;
	ExtConfig.RxPDO[7].COBID				:= 16#340;
	ExtConfig.RxPDO[8].COBID				:= 16#440;
	ExtConfig.RxPDO[9].COBID				:= 16#540;
	ExtConfig.RxPDO[10].COBID				:= 16#7C0;

	Done := TRUE;

END_IF

END_FUNCTION_BLOCK


(* @NESTEDCOMMENTS := 'Yes' *)
(* @PATH := '\/CodeSamples\/CANopen\/UniversalMaster' *)
(* @OBJECTFLAGS := '0, 8' *)
(* @SYMFILEFLAGS := '2048' *)
FUNCTION_BLOCK FB_Configuration_CANopenSlave_SEW_OCC11B
VAR_INPUT
	Enable: BOOL; 			(* Activate config *)
END_VAR
VAR_OUTPUT
	Done: BOOL;				(* Config done *)
END_VAR
VAR_IN_OUT
	ExtConfig : MC_EXTENDEDCONFIG_COSLAVE	;
	(*
		########################################################################################################
			MC_EXTENDEDCONFIG_COSLAVE
		#########################################################################################################

						
		Variable								Value			Description
		-------------------------------------------------------------------------------------------------------------------------------------------------------------
		bWaitBeforeOperational 				BOOL;			When TRUE, after the coupler has been parameterized, it won't be switched in operational
																before this variable is FALSE. This can be used for example, to store the configuration with the FB
																MPLC_Universal_CANopen, with Service "SEWIOS_STORE", after a reset of the coppler 
		-------------------------------------------------------------------------------------------------------------------------------------------------------------
		bNoSettingsDownload 				BOOL;			TRUE : No configuration of the module. The configuration has to be done manually.
		-------------------------------------------------------------------------------------------------------------------------------------------------------------
		bResetUnconditional 					BOOL;			Even if the Connect FB isn't in fault it is possible to reset the bus coppler
		-------------------------------------------------------------------------------------------------------------------------------------------------------------
		bIOHold 								BOOL;			TRUE : Input data remain unchanged and the output data are not resetet also if the FB is in fault 
		-------------------------------------------------------------------------------------------------------------------------------------------------------------
		TimeOutHeartBeat					UINT;			If this value (ms) is different to zero, HeartbeatMode will be activated
		-------------------------------------------------------------------------------------------------------------------------------------------------------------
		TimeOutNodeGuarding 				UINT;			If this value (ms) is different to zero, NodeGuarding will be activated. 
																Caution ! The MOVI-PLC basic doesn´t support NodeGuarding 
		-------------------------------------------------------------------------------------------------------------------------------------------------------------
		TimeOutInitSequence					UINT;			Timeout for initialisation sequence (seconds) 
		-------------------------------------------------------------------------------------------------------------------------------------------------------------
		NumberOfRxPDO 					UINT;			Receive PDO : MOVI-PLC --> Slave  max. 32 
		-------------------------------------------------------------------------------------------------------------------------------------------------------------
		NumberOfTxPDO 						UINT;			Send PDO :      Slave --> MOVI-PLC  max 32 
		-------------------------------------------------------------------------------------------------------------------------------------------------------------	
		SyncTime 								USINT;			Cycle time of the sync telegram in ms. 
																Default = 0 : no sync will be started.
																If  SyncTime > 0, this FB initializes a sync telegram with the ID set at SyncCOBID. 
																The slave has to support synchronous communication 
		-------------------------------------------------------------------------------------------------------------------------------------------------------------
		SyncCOBID							UINT;			Index 1005h. ID of the sync telegram. Usually 16#80. IF 0, the ID won't be written.
		-------------------------------------------------------------------------------------------------------------------------------------------------------------
		SyncTimeOut 							INT := -1;		Index 1006h. Normally equal to SyncTime. 
																The slave usually set SyncTimeOut equal to SyncTime * 1.5. 
																If < 0, the index won't be written. 0 means no control over the sync interval 
		-------------------------------------------------------------------------------------------------------------------------------------------------------------
		stInitialParameter_COSlave 			MC_INITIALPARAMETER_COSLAVE;
												(*#################################################################
												With this struct, user defined parameters will be written to the BusCoupler after the
												initialization of the MPLC_ConnectUniversalSlave_CANopen. 
												Add the following code to your program to initialise the struct : 
												Example:
												Index 16#6423:	Activates the event-driven transmission of PDOs with analog inputs
												Index 16#3500:	Index from the manufacturer specific profile area
	
													stInitialParameter_COSlave.aIndex[1] := 16#6423;  	(* Index to write to *)
													stInitialParameter_COSlave.aSubIndex[1] := 0;   	(* SubIndex to write to *)
													stInitialParameter_COSlave.aBytes[1] := 1;   		(* Number of bytes to write  *)
													stInitialParameter_COSlave.aData[1] := 1;   			(* Data *)
	
													stInitialParameter_COSlave.aIndex[2] := 16#3500;  	(* Index to write to *)
													stInitialParameter_COSlave.aSubIndex[2] := 0;   	(* SubIndex to write to *)
													stInitialParameter_COSlave.aBytes[2] := 2;   		(* Number of bytes to write *)
													stInitialParameter_COSlave.aData[2] := 5;   			(* Data *)
	
												If there are more than 10 (DHP11B) or 64 (DHx41B) parameters to write, declare 
												NUMOF_INITIALPARAMETER in your program.
	
													VAR_GLOBAL CONSTANT
														NUMOF_INITIALPARAMETER : UDINT := 20;	
													END_VAR
	
												##################################################################*)
			-------------------------------------------------------------------------------------------------------------------------------------------------------------
		(* IDs of the PDO telegrams. The IDs are always calculated with the following IDs as a basis + the address of the bus coupler *)

		RxPDO 								ARRAY[1..32] OF MC_PDO_COSLAVE;			(* MOVI-PLC --> Slave *)
												(* := 16#200,16#300,16#400,16#500,16#780,16#240,16#340,16#440,16#540,16#7C0;	*)
		-------------------------------------------------------------------------------------------------------------------------------------------------------------
		TxPDO 								ARRAY[1..32] OF MC_PDO_COSLAVE; 			(* Slave --> MOVI-PLC *)
												(*:= 16#180,16#280,16#380,16#480,16#680,16#1C0,16#2C0,16#3C0,16#4C0,16#6C0;*)
	*)
END_VAR

(* @END_DECLARATION := '0' *)
IF Enable AND NOT Done THEN

	(*########################################################

		Configuration of CANopenSlave (SEW OCC11B)
		
	#########################################################

		TransmissionType for TxPDOs and RxPDOs:

			0:										Event controlled and sychron (with SYNC-Object)
			1-240:									Cyclic and synchron (with SYNC-Object)
			254:									Producer specified
			255:									Acyclic and eventcontrolled 
			255 and EventTime = InhibitTime:	Cyclic

	#########################################################	*)


	(*************************************************** TxPDOs of CANOpenSlave ( MOVI-PLC ReceiveObjects) ***********************************************************)

	ExtConfig.NumberOfTxPDO				:= 4;		(*  TxPDO ---> CANopenSlave Transmit *)

	ExtConfig.TxPDO[1].EventTime			:= 200;		(* Slave: Index 0x18xx SubIndex 5: CycleTime in ms for CANopenSlave TXPDO *)
	ExtConfig.TxPDO[1].InhibitTime			:= 5;		(* Slave: Index 0x18xx SubIndex 3: InhibitTime in ms for CANopenSlave TxPDO *)
	ExtConfig.TxPDO[1].TransmissionType	:= 255;		(* Slave: Index 0x18xx SubIndex 2: TransmissionType for this TxPDO *)

	ExtConfig.TxPDO[2].EventTime			:= 100;		(* Slave: Index 0x18xx SubIndex 5: CycleTime in ms for CANopenSlave TXPDO *)
	ExtConfig.TxPDO[2].InhibitTime			:= 100;		(* Slave: Index 0x18xx SubIndex 3: InhibitTime in ms for CANopenSlave TxPDO *)
	ExtConfig.TxPDO[2].TransmissionType	:= 255;		(* Slave: Index 0x18xx SubIndex 2: TransmissionType for this TxPDO *)

	ExtConfig.TxPDO[3].EventTime			:= 100;		(* Slave: Index 0x18xx SubIndex 5: CycleTime in ms for CANopenSlave TXPDO *)
	ExtConfig.TxPDO[3].InhibitTime			:= 100;		(* Slave: Index 0x18xx SubIndex 3: InhibitTime in ms for CANopenSlave TxPDO *)
	ExtConfig.TxPDO[3].TransmissionType	:= 255;		(* Slave: Index 0x18xx SubIndex 2: TransmissionType for this TxPDO *)

	ExtConfig.TxPDO[4].EventTime			:= 100;		(* Slave: Index 0x18xx SubIndex 5: CycleTime in ms for CANopenSlave TXPDO *)
	ExtConfig.TxPDO[4].InhibitTime			:= 100;		(* Slave: Index 0x18xx SubIndex 3: InhibitTime in ms for CANopenSlave TxPDO *)
	ExtConfig.TxPDO[4].TransmissionType	:= 255;		(* Slave: Index 0x18xx SubIndex 2: TransmissionType for this TxPDO *)


	(*************************************************** RxPDOs of CANOpenSlave ( MOVI-PLC TransmitObjects) **********************************************************)

	ExtConfig.NumberOfRxPDO				:= 4;		(*  RxPDO ---> CANopenSlave Receive *)

	ExtConfig.RxPDO[1].EventTime			:= 200;		(* Master: CycleTime in ms for TransmitObjects (MOVI-PLC) *)
	ExtConfig.RxPDO[1].InhibitTime			:= 5;		(* Master: InhibitTime in ms for TransmitObjects (MOVI-PLC) *)
	ExtConfig.RxPDO[1].Length				:= 1;		(* Master: Length of this TransmitObject in bytes *)
	ExtConfig.RxPDO[1].TransmissionType	:= 255;		(* Slave: Index 0x14xx SubIndex 2: TransmissionType for this RxPDO *)

	ExtConfig.RxPDO[2].EventTime			:= 100;		(* Master: CycleTime in ms for TransmitObjects (MOVI-PLC) *)
	ExtConfig.RxPDO[2].InhibitTime			:= 100;		(* Master: InhibitTime in ms for TransmitObjects (MOVI-PLC) *)
	ExtConfig.RxPDO[2].Length				:= 8;		(* Master: Length of this TransmitObject in bytes *)
	ExtConfig.RxPDO[2].TransmissionType	:= 255;		(* Slave: Index 0x14xx SubIndex 2: TransmissionType for this RxPDO *)

	ExtConfig.RxPDO[3].EventTime			:= 100;		(* Master: CycleTime in ms for TransmitObjects (MOVI-PLC) *)
	ExtConfig.RxPDO[3].InhibitTime			:= 100;		(* Master: InhibitTime in ms for TransmitObjects (MOVI-PLC) *)
	ExtConfig.RxPDO[3].Length				:= 8;		(* Master: Length of this TransmitObject in bytes *)
	ExtConfig.RxPDO[3].TransmissionType	:= 255;		(* Slave: Index 0x14xx SubIndex 2: TransmissionType for this RxPDO *)

	ExtConfig.RxPDO[4].EventTime			:= 100;		(* Master: CycleTime in ms for TransmitObjects (MOVI-PLC) *)
	ExtConfig.RxPDO[4].InhibitTime			:= 100;		(* Master: InhibitTime in ms for TransmitObjects (MOVI-PLC) *)
	ExtConfig.RxPDO[4].Length				:= 8;		(* Master: Length of this TransmitObject in bytes *)
	ExtConfig.RxPDO[4].TransmissionType	:= 255;		(* Slave: Index 0x14xx SubIndex 2: TransmissionType for this RxPDO *)


	(***************************************************** Additional parameters to set in the CANOpenSlave  ***************************************************************)

	(* Enable transmission of analog inputs *)
	ExtConfig.stInitialParameter_COSlave.aIndex[1]			:= 16#6423;
	ExtConfig.stInitialParameter_COSlave.aSubIndex[1]	:= 0;
	ExtConfig.stInitialParameter_COSlave.aBytes[1]		:= 1;
	ExtConfig.stInitialParameter_COSlave.aData[1]			:= 1;


	(********************************************** Additional configuration. Default values are in most cases sufficient *****************************************************)

	ExtConfig.bIOHold						:= FALSE;
	ExtConfig.bNoSettingsDownload			:= FALSE;
	ExtConfig.bWaitBeforeOperational		:= FALSE;
	ExtConfig.bResetUnconditional			:= FALSE;

	ExtConfig.TimeOutHeartBeat				:= 400;				(* [ms] *)
	ExtConfig.TimeOutNodeGuarding		:= 0;				(* [ms]. CAUTION ! DHP11B (MOVI-PLC basic) does NOT support NodeGuarding *)
	ExtConfig.TimeOutInitSequence			:= 10;				(* [seconds]. If the Init-Sequence takes longer than this TimeOut time --> Error *)
	ExtConfig.SyncCOBID						:= 0;				(* SyncObject ID for TransmissionType 0-240 (RxPDO). Usually 16#8000_0080. If 0, the ID will not be written *)
	ExtConfig.SyncTime						:= 0;				(* CycleTime for the SYNC-Object *)

	ExtConfig.SBUSGateway_Address			:= 0(*1001*);			(* OSC71B Address,when used *)

	ExtConfig.TxPDO[1].COBID				:= 16#180;			(* In order to disable the use of RTR frames for the PDOs, set bit 30 = "RTR not allowed" *)
	ExtConfig.TxPDO[2].COBID				:= 16#280;			(* Ex. 16#4000_0280 *)
	ExtConfig.TxPDO[3].COBID				:= 16#380;
	ExtConfig.TxPDO[4].COBID				:= 16#480;			(* NOTE! These values are base values. The input "Address" will automatically be added *)
	ExtConfig.TxPDO[5].COBID				:= 16#680;
	ExtConfig.TxPDO[6].COBID				:= 16#1C0;
	ExtConfig.TxPDO[7].COBID				:= 16#2C0;
	ExtConfig.TxPDO[8].COBID				:= 16#3C0;
	ExtConfig.TxPDO[9].COBID				:= 16#4C0;
	ExtConfig.TxPDO[10].COBID				:= 16#6C0;

	ExtConfig.RxPDO[1].COBID				:= 16#200;
	ExtConfig.RxPDO[2].COBID				:= 16#300;
	ExtConfig.RxPDO[3].COBID				:= 16#400;
	ExtConfig.RxPDO[4].COBID				:= 16#500;
	ExtConfig.RxPDO[5].COBID				:= 16#780;
	ExtConfig.RxPDO[6].COBID				:= 16#240;
	ExtConfig.RxPDO[7].COBID				:= 16#340;
	ExtConfig.RxPDO[8].COBID				:= 16#440;
	ExtConfig.RxPDO[9].COBID				:= 16#540;
	ExtConfig.RxPDO[10].COBID				:= 16#7C0;

	Done := TRUE;

END_IF
END_FUNCTION_BLOCK


(* @NESTEDCOMMENTS := 'Yes' *)
(* @PATH := '\/CodeSamples\/CANopen\/UniversalMaster' *)
(* @OBJECTFLAGS := '0, 8' *)
(* @SYMFILEFLAGS := '2048' *)
FUNCTION_BLOCK FB_Configuration_CANopenSlave_TR_AbsEncoder
VAR_INPUT
	Enable: BOOL; 			(* Activate config *)
END_VAR
VAR_OUTPUT
	Done: BOOL;				(* Config done *)
END_VAR
VAR_IN_OUT
	ExtConfig : MC_EXTENDEDCONFIG_COSLAVE	;
	(*
		########################################################################################################
			MC_EXTENDEDCONFIG_COSLAVE
		#########################################################################################################

						
		Variable								Value			Description
		-------------------------------------------------------------------------------------------------------------------------------------------------------------
		bWaitBeforeOperational 				BOOL;			When TRUE, after the coupler has been parameterized, it won't be switched in operational
																before this variable is FALSE. This can be used for example, to store the configuration with the FB
																MPLC_Universal_CANopen, with Service "SEWIOS_STORE", after a reset of the coppler 
		-------------------------------------------------------------------------------------------------------------------------------------------------------------
		bNoSettingsDownload 				BOOL;			TRUE : No configuration of the module. The configuration has to be done manually.
		-------------------------------------------------------------------------------------------------------------------------------------------------------------
		bResetUnconditional 					BOOL;			Even if the Connect FB isn't in fault it is possible to reset the bus coppler
		-------------------------------------------------------------------------------------------------------------------------------------------------------------
		bIOHold 								BOOL;			TRUE : Input data remain unchanged and the output data are not resetet also if the FB is in fault 
		-------------------------------------------------------------------------------------------------------------------------------------------------------------
		TimeOutHeartBeat					UINT;			If this value (ms) is different to zero, HeartbeatMode will be activated
		-------------------------------------------------------------------------------------------------------------------------------------------------------------
		TimeOutNodeGuarding 				UINT;			If this value (ms) is different to zero, NodeGuarding will be activated. 
																Caution ! The MOVI-PLC basic doesn´t support NodeGuarding 
		-------------------------------------------------------------------------------------------------------------------------------------------------------------
		TimeOutInitSequence					UINT;			Timeout for initialisation sequence (seconds) 
		-------------------------------------------------------------------------------------------------------------------------------------------------------------
		NumberOfRxPDO 					UINT;			Receive PDO : MOVI-PLC --> Slave  max. 32 
		-------------------------------------------------------------------------------------------------------------------------------------------------------------
		NumberOfTxPDO 						UINT;			Send PDO :      Slave --> MOVI-PLC  max 32 
		-------------------------------------------------------------------------------------------------------------------------------------------------------------	
		SyncTime 								USINT;			Cycle time of the sync telegram in ms. 
																Default = 0 : no sync will be started.
																If  SyncTime > 0, this FB initializes a sync telegram with the ID set at SyncCOBID. 
																The slave has to support synchronous communication 
		-------------------------------------------------------------------------------------------------------------------------------------------------------------
		SyncCOBID							UINT;			Index 1005h. ID of the sync telegram. Usually 16#80. IF 0, the ID won't be written.
		-------------------------------------------------------------------------------------------------------------------------------------------------------------
		SyncTimeOut 							INT := -1;		Index 1006h. Normally equal to SyncTime. 
																The slave usually set SyncTimeOut equal to SyncTime * 1.5. 
																If < 0, the index won't be written. 0 means no control over the sync interval 
		-------------------------------------------------------------------------------------------------------------------------------------------------------------
		stInitialParameter_COSlave 			MC_INITIALPARAMETER_COSLAVE;
												(*#################################################################
												With this struct, user defined parameters will be written to the BusCoupler after the
												initialization of the MPLC_ConnectUniversalSlave_CANopen. 
												Add the following code to your program to initialise the struct : 
												Example:
												Index 16#6423:	Activates the event-driven transmission of PDOs with analog inputs
												Index 16#3500:	Index from the manufacturer specific profile area
	
													stInitialParameter_COSlave.aIndex[1] := 16#6423;  	(* Index to write to *)
													stInitialParameter_COSlave.aSubIndex[1] := 0;   	(* SubIndex to write to *)
													stInitialParameter_COSlave.aBytes[1] := 1;   		(* Number of bytes to write  *)
													stInitialParameter_COSlave.aData[1] := 1;   			(* Data *)
	
													stInitialParameter_COSlave.aIndex[2] := 16#3500;  	(* Index to write to *)
													stInitialParameter_COSlave.aSubIndex[2] := 0;   	(* SubIndex to write to *)
													stInitialParameter_COSlave.aBytes[2] := 2;   		(* Number of bytes to write *)
													stInitialParameter_COSlave.aData[2] := 5;   			(* Data *)
	
												If there are more than 10 (DHP11B) or 64 (DHx41B) parameters to write, declare 
												NUMOF_INITIALPARAMETER in your program.
	
													VAR_GLOBAL CONSTANT
														NUMOF_INITIALPARAMETER : UDINT := 20;	
													END_VAR
	
												##################################################################*)
			-------------------------------------------------------------------------------------------------------------------------------------------------------------
		(* IDs of the PDO telegrams. The IDs are always calculated with the following IDs as a basis + the address of the bus coupler *)

		RxPDO 								ARRAY[1..32] OF MC_PDO_COSLAVE;			(* MOVI-PLC --> Slave *)
												(* := 16#200,16#300,16#400,16#500,16#780,16#240,16#340,16#440,16#540,16#7C0;	*)
		-------------------------------------------------------------------------------------------------------------------------------------------------------------
		TxPDO 								ARRAY[1..32] OF MC_PDO_COSLAVE; 			(* Slave --> MOVI-PLC *)
												(*:= 16#180,16#280,16#380,16#480,16#680,16#1C0,16#2C0,16#3C0,16#4C0,16#6C0;*)
	*)
END_VAR

(* @END_DECLARATION := '0' *)
IF Enable AND NOT Done THEN

	(*########################################################

		Configuration of CANopenSlave (T+R AbsEncoder)
		
	#########################################################

		TransmissionType for TxPDOs and RxPDOs:

			0:										Event controlled and sychron (with SYNC-Object)
			1-240:									Cyclic and synchron (with SYNC-Object)
			254:									Producer specified
			255:									Acyclic and eventcontrolled 
			255 and EventTime = InhibitTime:	Cyclic

	#########################################################	*)


	(*************************************************** TxPDOs of CANOpenSlave ( MOVI-PLC ReceiveObjects) ***********************************************************)

	ExtConfig.NumberOfTxPDO				:= 1;		(*  TxPDO ---> CANopenSlave Transmit *)

	ExtConfig.TxPDO[1].EventTime			:= 20;		(* Slave: Index 0x18xx SubIndex 5: CycleTime in ms for CANopenSlave TXPDO *)
	ExtConfig.TxPDO[1].InhibitTime			:= 20;		(* Slave: Index 0x18xx SubIndex 3: InhibitTime in ms for CANopenSlave TxPDO *)
	ExtConfig.TxPDO[1].TransmissionType	:= 254;		(* Slave: Index 0x18xx SubIndex 2: TransmissionType for this TxPDO *)


	(*************************************************** RxPDOs of CANOpenSlave ( MOVI-PLC TransmitObjects) **********************************************************)

	ExtConfig.NumberOfRxPDO				:= 0;		(*  RxPDO ---> CANopenSlave Receive *)

	(* ExtConfig.RxPDO[1].EventTime		:= 0;		(* Master: CycleTime in ms for TransmitObjects (MOVI-PLC) *)
	ExtConfig.RxPDO[1].InhibitTime			:= 0;		(* Master: InhibitTime in ms for TransmitObjects (MOVI-PLC) *)
	ExtConfig.RxPDO[1].Length				:= 2;		(* Master: Length of this TransmitObject in bytes *)
	ExtConfig.RxPDO[1].TransmissionType	:= 255;		(* Slave: Index 0x14xx SubIndex 2: TransmissionType for this RxPDO *)*)


	(***************************************************** Additional parameters to set in the CANOpenSlave  ***************************************************************)

	(* Set rotation direction *)
	ExtConfig.stInitialParameter_COSlave.aIndex[1]			:= 16#6000;
	ExtConfig.stInitialParameter_COSlave.aSubIndex[1]	:= 0;
	ExtConfig.stInitialParameter_COSlave.aBytes[1]		:= 2;
	ExtConfig.stInitialParameter_COSlave.aData[1]			:= 0;		(* 0 = CV, 1 = CCV *)

	(* Set cyclic timer for Tx PDO1 *)
	ExtConfig.stInitialParameter_COSlave.aIndex[2]			:= 16#6200;
	ExtConfig.stInitialParameter_COSlave.aSubIndex[2]	:= 0;
	ExtConfig.stInitialParameter_COSlave.aBytes[2]		:= 2;
	ExtConfig.stInitialParameter_COSlave.aData[2]			:= 20;		(* [ms] *)

	(* Write reference offset to AbsEncoder, Index 6003.0, data = new position *)
	(* Write Delivery state to AbsEncoder, Index 1011.1, data = 16#6C_6F_61_64 (load) *)
	(* Save values in Flash memory in the AbsEncoder, Index 1010.1, data = 16#73_61_76_65 (save) *)


	(********************************************** Additional configuration. Default values are in most cases sufficient *****************************************************)

	ExtConfig.bIOHold						:= FALSE;
	ExtConfig.bNoSettingsDownload			:= FALSE;
	ExtConfig.bWaitBeforeOperational		:= FALSE;
	ExtConfig.bResetUnconditional			:= FALSE;

	ExtConfig.TimeOutHeartBeat				:= 0;				(* [ms] *)
	ExtConfig.TimeOutNodeGuarding		:= 400;				(* [ms]. CAUTION ! DHP11B (MOVI-PLC basic) does NOT support NodeGuarding *)
	ExtConfig.TimeOutInitSequence			:= 5;				(* [seconds]. If the Init-Sequence takes longer than this TimeOut time --> Error *)
	ExtConfig.SyncCOBID						:= 0;				(* SyncObject ID for TransmissionType 0-240 (RxPDO). Usually 128. If 0, the ID will not be written *)
	ExtConfig.SyncTime						:= 0;				(* CycleTime for the SYNC-Object *)

	ExtConfig.TxPDO[1].COBID				:= 16#180;			(* In order to disable the use of RTR frames for the PDOs, set bit 30 = "RTR not allowed" *)
	ExtConfig.TxPDO[2].COBID				:= 16#280;			(* Ex. 16#4000_0280 *)
	ExtConfig.TxPDO[3].COBID				:= 16#380;
	ExtConfig.TxPDO[4].COBID				:= 16#480;			(* NOTE! These values are base values. The input "Address" will automatically be added *)
	ExtConfig.TxPDO[5].COBID				:= 16#680;
	ExtConfig.TxPDO[6].COBID				:= 16#1C0;
	ExtConfig.TxPDO[7].COBID				:= 16#2C0;
	ExtConfig.TxPDO[8].COBID				:= 16#3C0;
	ExtConfig.TxPDO[9].COBID				:= 16#4C0;
	ExtConfig.TxPDO[10].COBID				:= 16#6C0;

	ExtConfig.RxPDO[1].COBID				:= 16#200;
	ExtConfig.RxPDO[2].COBID				:= 16#300;
	ExtConfig.RxPDO[3].COBID				:= 16#400;
	ExtConfig.RxPDO[4].COBID				:= 16#500;
	ExtConfig.RxPDO[5].COBID				:= 16#780;
	ExtConfig.RxPDO[6].COBID				:= 16#240;
	ExtConfig.RxPDO[7].COBID				:= 16#340;
	ExtConfig.RxPDO[8].COBID				:= 16#440;
	ExtConfig.RxPDO[9].COBID				:= 16#540;
	ExtConfig.RxPDO[10].COBID				:= 16#7C0;

	Done := TRUE;

END_IF
END_FUNCTION_BLOCK


(* @NESTEDCOMMENTS := 'Yes' *)
(* @PATH := '\/CodeSamples\/CANopen\/UniversalMaster' *)
(* @OBJECTFLAGS := '0, 8' *)
(* @SYMFILEFLAGS := '2048' *)
FUNCTION_BLOCK FB_Configuration_CANopenSlave_Wachendorff
VAR_INPUT
	Enable: BOOL; 			(* Activate config *)
END_VAR
VAR_OUTPUT
	Done: BOOL;				(* Config done *)
END_VAR
VAR_IN_OUT
	ExtConfig : MC_EXTENDEDCONFIG_COSLAVE	;
	(*
		########################################################################################################
			MC_EXTENDEDCONFIG_COSLAVE
		#########################################################################################################

						
		Variable								Value			Description
		-------------------------------------------------------------------------------------------------------------------------------------------------------------
		bWaitBeforeOperational 				BOOL;			When TRUE, after the coupler has been parameterized, it won't be switched in operational
																before this variable is FALSE. This can be used for example, to store the configuration with the FB
																MPLC_Universal_CANopen, with Service "SEWIOS_STORE", after a reset of the coppler 
		-------------------------------------------------------------------------------------------------------------------------------------------------------------
		bNoSettingsDownload 				BOOL;			TRUE : No configuration of the module. The configuration has to be done manually.
		-------------------------------------------------------------------------------------------------------------------------------------------------------------
		bResetUnconditional 					BOOL;			Even if the Connect FB isn't in fault it is possible to reset the bus coppler
		-------------------------------------------------------------------------------------------------------------------------------------------------------------
		bIOHold 								BOOL;			TRUE : Input data remain unchanged and the output data are not resetet also if the FB is in fault 
		-------------------------------------------------------------------------------------------------------------------------------------------------------------
		TimeOutHeartBeat					UINT;			If this value (ms) is different to zero, HeartbeatMode will be activated

		bNoHeartBeat_Producer:				BOOL := FALSE; (*Index 1017 SubIndex 0 not available *)
		-------------------------------------------------------------------------------------------------------------------------------------------------------------
		TimeOutNodeGuarding 				UINT;			If this value (ms) is different to zero, NodeGuarding will be activated. 
																Caution ! The MOVI-PLC basic doesn´t support NodeGuarding 
	
		bNoNodeGuarding:					BOOL:=FALSE; (* the Index of NodeGuarding isn`t available *)
		-------------------------------------------------------------------------------------------------------------------------------------------------------------
		TimeOutInitSequence					UINT;			Timeout for initialisation sequence (seconds) 
		-------------------------------------------------------------------------------------------------------------------------------------------------------------
		NumberOfRxPDO 					UINT;			Receive PDO : MOVI-PLC --> Slave  max. 32 
		-------------------------------------------------------------------------------------------------------------------------------------------------------------
		NumberOfTxPDO 						UINT;			Send PDO :      Slave --> MOVI-PLC  max 32 
		-------------------------------------------------------------------------------------------------------------------------------------------------------------	
		OffsetOfRxPDO:						UINT;			Offset for the 1. RxPDO
		-------------------------------------------------------------------------------------------------------------------------------------------------------------		
		OffsetOfTxPDO:						UINT;			Offset for the 1. TxPDO
		-------------------------------------------------------------------------------------------------------------------------------------------------------------	
		SyncTime 								USINT;			Cycle time of the sync telegram in ms. 
																Default = 0 : no sync will be started.
																If  SyncTime > 0, this FB initializes a sync telegram with the ID set at SyncCOBID. 
																The slave has to support synchronous communication 
		-------------------------------------------------------------------------------------------------------------------------------------------------------------
		SyncCOBID							UINT;			Index 1005h. ID of the sync telegram. Usually 16#80. IF 0, the ID won't be written.
		-------------------------------------------------------------------------------------------------------------------------------------------------------------
		SyncTimeOut 							INT := -1;		Index 1006h. Normally equal to SyncTime. 
																The slave usually set SyncTimeOut equal to SyncTime * 1.5. 
																If < 0, the index won't be written. 0 means no control over the sync interval 
		-------------------------------------------------------------------------------------------------------------------------------------------------------------
		stInitialParameter_COSlave 			MC_INITIALPARAMETER_COSLAVE;
												(*#################################################################
												With this struct, user defined parameters will be written to the BusCoupler after the
												initialization of the MPLC_ConnectUniversalSlave_CANopen. 
												Add the following code to your program to initialise the struct : 
												Example:
												Index 16#6423:	Activates the event-driven transmission of PDOs with analog inputs
												Index 16#3500:	Index from the manufacturer specific profile area
	
													stInitialParameter_COSlave.aIndex[1] := 16#6423;  	(* Index to write to *)
													stInitialParameter_COSlave.aSubIndex[1] := 0;   	(* SubIndex to write to *)
													stInitialParameter_COSlave.aBytes[1] := 1;   		(* Number of bytes to write  *)
													stInitialParameter_COSlave.aData[1] := 1;   			(* Data *)
	
													stInitialParameter_COSlave.aIndex[2] := 16#3500;  	(* Index to write to *)
													stInitialParameter_COSlave.aSubIndex[2] := 0;   	(* SubIndex to write to *)
													stInitialParameter_COSlave.aBytes[2] := 2;   		(* Number of bytes to write *)
													stInitialParameter_COSlave.aData[2] := 5;   			(* Data *)
	
												If there are more than 10 (DHP11B) or 64 (DHx41B) parameters to write, declare 
												NUMOF_INITIALPARAMETER in your program.
	
													VAR_GLOBAL CONSTANT
														NUMOF_INITIALPARAMETER : UDINT := 20;	
													END_VAR
	
												##################################################################*)

		bNoDeactivatePDO:			BOOL := FALSE; (* Change of Transmission Type, Inhibit- and Event- Time without deactivate RxPDO and TxPDO*)

			-------------------------------------------------------------------------------------------------------------------------------------------------------------
		(* IDs of the PDO telegrams. The IDs are always calculated with the following IDs as a basis + the address of the bus coupler *)

		RxPDO 								ARRAY[1..32] OF MC_PDO_COSLAVE;			(* MOVI-PLC --> Slave *)
												(* := 16#200,16#300,16#400,16#500,16#780,16#240,16#340,16#440,16#540,16#7C0;	*)
		-------------------------------------------------------------------------------------------------------------------------------------------------------------
		TxPDO 								ARRAY[1..32] OF MC_PDO_COSLAVE; 			(* Slave --> MOVI-PLC *)
												(*:= 16#180,16#280,16#380,16#480,16#680,16#1C0,16#2C0,16#3C0,16#4C0,16#6C0;*)
	*)
END_VAR
{library private}
VAR
	fbCANopen_aktiv: CANopen_activ;
	Error: BOOL;
	Error_ID: DINT;
END_VAR
(* @END_DECLARATION := '0' *)
IF Enable AND NOT Done THEN

(*  !!!!!!!  only once TO activate !!!!!!*)
(*
	(*######################################################*)
		(* set Baudrate and CAN-ID *)
	fbCANopen_aktiv(Node:= SBUS_Node_2,
					Address_Default := 60,(* Default Address or old Address 0...127*)
					Address:= 60,(* new Address 1...63*)
					Baudrate:=2, (* 0 = 1 M , 2 = 500 k , 3 = 250 k baud*)
					Error => Error,
					ErrorID=> Error_ID);


		RETURN;
	(*######################################################*)
*)


	(*########################################################

		Configuration of CANopenSlave (Wachendorff AbsEncoder)
		
	#########################################################

		TransmissionType for TxPDOs and RxPDOs:

			0:										Event controlled and sychron (with SYNC-Object)
			1-240:									Cyclic and synchron (with SYNC-Object)
			254:									Producer specified
			255:									Acyclic and eventcontrolled 
			255 and EventTime = InhibitTime:	Cyclic

	#########################################################	*)

(*	ExtConfig.OffsetOfTxPDO := 2;*)
	(*************************************************** TxPDOs of CANOpenSlave ( MOVI-PLC ReceiveObjects) ***********************************************************)

	ExtConfig.NumberOfTxPDO				:= 3;		(*  TxPDO ---> CANopenSlave Transmit *)

	ExtConfig.TxPDO[1].EventTime			:= 20;		(* Slave: Index 0x18xx SubIndex 5: CycleTime in ms for CANopenSlave TXPDO *)
	ExtConfig.TxPDO[1].InhibitTime			:= 10;		(* Slave: Index 0x18xx SubIndex 3: InhibitTime in ms for CANopenSlave TxPDO *)
	ExtConfig.TxPDO[1].TransmissionType	:= 254;		(* Slave: Index 0x18xx SubIndex 2: TransmissionType for this TxPDO *)

	ExtConfig.TxPDO[2].EventTime			:= 0;		(* Slave: Index 0x18xx SubIndex 5: CycleTime in ms for CANopenSlave TXPDO *)
	ExtConfig.TxPDO[2].InhibitTime			:= 0;		(* Slave: Index 0x18xx SubIndex 3: InhibitTime in ms for CANopenSlave TxPDO *)
	ExtConfig.TxPDO[2].TransmissionType	:= 1;		(* Slave: Index 0x18xx SubIndex 2: TransmissionType for this TxPDO *)

	ExtConfig.TxPDO[3].EventTime			:= 0;		(* Slave: Index 0x18xx SubIndex 5: CycleTime in ms for CANopenSlave TXPDO *)
	ExtConfig.TxPDO[3].InhibitTime			:= 0;		(* Slave: Index 0x18xx SubIndex 3: InhibitTime in ms for CANopenSlave TxPDO *)
	ExtConfig.TxPDO[3].TransmissionType	:= 1;		(* Slave: Index 0x18xx SubIndex 2: TransmissionType for this TxPDO *)

	(*************************************************** RxPDOs of CANOpenSlave ( MOVI-PLC TransmitObjects) **********************************************************)

	ExtConfig.NumberOfRxPDO				:= 0;		(*  RxPDO ---> CANopenSlave Receive *)

	(* ExtConfig.RxPDO[1].EventTime		:= 0;		(* Master: CycleTime in ms for TransmitObjects (MOVI-PLC) *)
	ExtConfig.RxPDO[1].InhibitTime			:= 0;		(* Master: InhibitTime in ms for TransmitObjects (MOVI-PLC) *)
	ExtConfig.RxPDO[1].Length				:= 2;		(* Master: Length of this TransmitObject in bytes *)
	ExtConfig.RxPDO[1].TransmissionType	:= 255;		(* Slave: Index 0x14xx SubIndex 2: TransmissionType for this RxPDO *)*)


	(***************************************************** Additional parameters to set in the CANOpenSlave  ***************************************************************)

	(* Set rotation direction *)
	ExtConfig.stInitialParameter_COSlave.aIndex[1]			:= 16#6000;
	ExtConfig.stInitialParameter_COSlave.aSubIndex[1]	:= 0;
	ExtConfig.stInitialParameter_COSlave.aBytes[1]		:= 2;
	ExtConfig.stInitialParameter_COSlave.aData[1]			:= 0;		(* 0 = CV, 1 = CCV *)

(*	(* Set cyclic timer for Tx PDO1 *)
	ExtConfig.stInitialParameter_COSlave.aIndex[2]			:= 16#6200;
	ExtConfig.stInitialParameter_COSlave.aSubIndex[2]	:= 0;
	ExtConfig.stInitialParameter_COSlave.aBytes[2]		:= 2;
	ExtConfig.stInitialParameter_COSlave.aData[2]			:= 20;		(* [ms] *)*)

(* deactivate Tx PDO1 *)
	ExtConfig.stInitialParameter_COSlave.aIndex[2]			:= 16#1800;
	ExtConfig.stInitialParameter_COSlave.aSubIndex[2]	:= 2;
	ExtConfig.stInitialParameter_COSlave.aBytes[2]		:= 1;
	ExtConfig.stInitialParameter_COSlave.aData[2]			:= 16#FF;

	ExtConfig.stInitialParameter_COSlave.aIndex[3]			:= 16#1800;
	ExtConfig.stInitialParameter_COSlave.aSubIndex[3]	:= 5;
	ExtConfig.stInitialParameter_COSlave.aBytes[3]		:= 2;
	ExtConfig.stInitialParameter_COSlave.aData[3]			:= 16#0000;

(* deactivate Tx PDO2 *)
	ExtConfig.stInitialParameter_COSlave.aIndex[4]			:= 16#1801;
	ExtConfig.stInitialParameter_COSlave.aSubIndex[4]	:= 2;
	ExtConfig.stInitialParameter_COSlave.aBytes[4]		:= 1;
	ExtConfig.stInitialParameter_COSlave.aData[4]			:= 16#FF;

	ExtConfig.stInitialParameter_COSlave.aIndex[5]			:= 16#1801;
	ExtConfig.stInitialParameter_COSlave.aSubIndex[5]	:= 5;
	ExtConfig.stInitialParameter_COSlave.aBytes[5]		:= 2;
	ExtConfig.stInitialParameter_COSlave.aData[5]			:= 16#0000;

	(* Write reference offset to AbsEncoder, Index 6003.0, data = new position *)
	(* Write Delivery state to AbsEncoder, Index 1011.1, data = 16#6C_6F_61_64 (load) *)
	(* Save values in Flash memory in the AbsEncoder, Index 1010.1, data = 16#73_61_76_65 (save) *)


	(********************************************** Additional configuration. Default values are in most cases sufficient *****************************************************)

	ExtConfig.bIOHold						:= FALSE;
	ExtConfig.bNoSettingsDownload			:= FALSE;
	ExtConfig.bWaitBeforeOperational		:= FALSE;
	ExtConfig.bResetUnconditional			:= FALSE;

	ExtConfig.TimeOutHeartBeat				:= 400;				(* [ms] *)
	ExtConfig.TimeOutNodeGuarding		:= 0;				(* [ms]. CAUTION ! DHP11B (MOVI-PLC basic) does NOT support NodeGuarding *)
	ExtConfig.TimeOutInitSequence			:= 15;				(* [seconds]. If the Init-Sequence takes longer than this TimeOut time --> Error *)
	ExtConfig.SyncCOBID						:= 128;				(* SyncObject ID for TransmissionType 0-240 (RxPDO). Usually 128. If 0, the ID will not be written *)
	ExtConfig.SyncTime						:= 5;				(* CycleTime for the SYNC-Object *)

	ExtConfig.TxPDO[1].COBID				:= 16#180;			(* In order to disable the use of RTR frames for the PDOs, set bit 30 = "RTR not allowed" *)
	ExtConfig.TxPDO[2].COBID				:= 16#280;			(* Ex. 16#4000_0280 *)
	ExtConfig.TxPDO[3].COBID				:= 16#380;
	ExtConfig.TxPDO[4].COBID				:= 16#480;			(* NOTE! These values are base values. The input "Address" will automatically be added *)
	ExtConfig.TxPDO[5].COBID				:= 16#680;
	ExtConfig.TxPDO[6].COBID				:= 16#1C0;
	ExtConfig.TxPDO[7].COBID				:= 16#2C0;
	ExtConfig.TxPDO[8].COBID				:= 16#3C0;
	ExtConfig.TxPDO[9].COBID				:= 16#4C0;
	ExtConfig.TxPDO[10].COBID				:= 16#6C0;

	ExtConfig.RxPDO[1].COBID				:= 16#200;
	ExtConfig.RxPDO[2].COBID				:= 16#300;
	ExtConfig.RxPDO[3].COBID				:= 16#400;
	ExtConfig.RxPDO[4].COBID				:= 16#500;
	ExtConfig.RxPDO[5].COBID				:= 16#780;
	ExtConfig.RxPDO[6].COBID				:= 16#240;
	ExtConfig.RxPDO[7].COBID				:= 16#340;
	ExtConfig.RxPDO[8].COBID				:= 16#440;
	ExtConfig.RxPDO[9].COBID				:= 16#540;
	ExtConfig.RxPDO[10].COBID				:= 16#7C0;

	Done := TRUE;
END_IF
END_FUNCTION_BLOCK


(* @NESTEDCOMMENTS := 'Yes' *)
(* @PATH := '\/CodeSamples\/CANopen\/UniversalMaster' *)
(* @OBJECTFLAGS := '0, 8' *)
(* @SYMFILEFLAGS := '2048' *)
FUNCTION_BLOCK FB_Configuration_CANopenSlave_WAGO_750_337
VAR_INPUT
	Enable: BOOL; 			(* Activate config *)
END_VAR
VAR_OUTPUT
	Done: BOOL;				(* Config done *)
END_VAR
VAR_IN_OUT
	ExtConfig : MC_EXTENDEDCONFIG_COSLAVE	;
	(*
		########################################################################################################
			MC_EXTENDEDCONFIG_COSLAVE
		#########################################################################################################

						
		Variable								Value			Description
		-------------------------------------------------------------------------------------------------------------------------------------------------------------
		bWaitBeforeOperational 				BOOL;			When TRUE, after the coupler has been parameterized, it won't be switched in operational
																before this variable is FALSE. This can be used for example, to store the configuration with the FB
																MPLC_Universal_CANopen, with Service "SEWIOS_STORE", after a reset of the coppler 
		-------------------------------------------------------------------------------------------------------------------------------------------------------------
		bNoSettingsDownload 				BOOL;			TRUE : No configuration of the module. The configuration has to be done manually.
		-------------------------------------------------------------------------------------------------------------------------------------------------------------
		bResetUnconditional 					BOOL;			Even if the Connect FB isn't in fault it is possible to reset the bus coppler
		-------------------------------------------------------------------------------------------------------------------------------------------------------------
		bIOHold 								BOOL;			TRUE : Input data remain unchanged and the output data are not resetet also if the FB is in fault 
		-------------------------------------------------------------------------------------------------------------------------------------------------------------
		TimeOutHeartBeat					UINT;			If this value (ms) is different to zero, HeartbeatMode will be activated
		-------------------------------------------------------------------------------------------------------------------------------------------------------------
		TimeOutNodeGuarding 				UINT;			If this value (ms) is different to zero, NodeGuarding will be activated. 
																Caution ! The MOVI-PLC basic doesn´t support NodeGuarding 
		-------------------------------------------------------------------------------------------------------------------------------------------------------------
		TimeOutInitSequence					UINT;			Timeout for initialisation sequence (seconds) 
		-------------------------------------------------------------------------------------------------------------------------------------------------------------
		NumberOfRxPDO 					UINT;			Receive PDO : MOVI-PLC --> Slave  max. 32 
		-------------------------------------------------------------------------------------------------------------------------------------------------------------
		NumberOfTxPDO 						UINT;			Send PDO :      Slave --> MOVI-PLC  max 32 
		-------------------------------------------------------------------------------------------------------------------------------------------------------------	
		SyncTime 								USINT;			Cycle time of the sync telegram in ms. 
																Default = 0 : no sync will be started.
																If  SyncTime > 0, this FB initializes a sync telegram with the ID set at SyncCOBID. 
																The slave has to support synchronous communication 
		-------------------------------------------------------------------------------------------------------------------------------------------------------------
		SyncCOBID							UINT;			Index 1005h. ID of the sync telegram. Usually 16#80. IF 0, the ID won't be written.
		-------------------------------------------------------------------------------------------------------------------------------------------------------------
		SyncTimeOut 							INT := -1;		Index 1006h. Normally equal to SyncTime. 
																The slave usually set SyncTimeOut equal to SyncTime * 1.5. 
																If < 0, the index won't be written. 0 means no control over the sync interval 
		-------------------------------------------------------------------------------------------------------------------------------------------------------------
		stInitialParameter_COSlave 			MC_INITIALPARAMETER_COSLAVE;
												(*#################################################################
												With this struct, user defined parameters will be written to the BusCoupler after the
												initialization of the MPLC_ConnectUniversalSlave_CANopen. 
												Add the following code to your program to initialise the struct : 
												Example:
												Index 16#6423:	Activates the event-driven transmission of PDOs with analog inputs
												Index 16#3500:	Index from the manufacturer specific profile area
	
													stInitialParameter_COSlave.aIndex[1] := 16#6423;  	(* Index to write to *)
													stInitialParameter_COSlave.aSubIndex[1] := 0;   	(* SubIndex to write to *)
													stInitialParameter_COSlave.aBytes[1] := 1;   		(* Number of bytes to write  *)
													stInitialParameter_COSlave.aData[1] := 1;   			(* Data *)
	
													stInitialParameter_COSlave.aIndex[2] := 16#3500;  	(* Index to write to *)
													stInitialParameter_COSlave.aSubIndex[2] := 0;   	(* SubIndex to write to *)
													stInitialParameter_COSlave.aBytes[2] := 2;   		(* Number of bytes to write *)
													stInitialParameter_COSlave.aData[2] := 5;   			(* Data *)
	
												If there are more than 10 (DHP11B) or 64 (DHx41B) parameters to write, declare 
												NUMOF_INITIALPARAMETER in your program.
	
													VAR_GLOBAL CONSTANT
														NUMOF_INITIALPARAMETER : UDINT := 20;	
													END_VAR
	
												##################################################################*)
			-------------------------------------------------------------------------------------------------------------------------------------------------------------
		(* IDs of the PDO telegrams. The IDs are always calculated with the following IDs as a basis + the address of the bus coupler *)

		RxPDO 								ARRAY[1..32] OF MC_PDO_COSLAVE;			(* MOVI-PLC --> Slave *)
												(* := 16#200,16#300,16#400,16#500,16#780,16#240,16#340,16#440,16#540,16#7C0;	*)
		-------------------------------------------------------------------------------------------------------------------------------------------------------------
		TxPDO 								ARRAY[1..32] OF MC_PDO_COSLAVE; 			(* Slave --> MOVI-PLC *)
												(*:= 16#180,16#280,16#380,16#480,16#680,16#1C0,16#2C0,16#3C0,16#4C0,16#6C0;*)
	*)
END_VAR

(* @END_DECLARATION := '0' *)
IF Enable AND NOT Done THEN

	(*########################################################

		Configuration of CANopenSlave (WAGO 750-337)
		
	#########################################################

		TransmissionType for TxPDOs and RxPDOs:

			0:										Event controlled and sychron (with SYNC-Object)
			1-240:									Cyclic and synchron (with SYNC-Object)
			254:									Producer specified
			255:									Acyclic and eventcontrolled 
			255 and EventTime = InhibitTime:	Cyclic

	#########################################################	*)


	(*************************************************** TxPDOs of CANOpenSlave ( MOVI-PLC ReceiveObjects) ***********************************************************)

	ExtConfig.NumberOfTxPDO				:= 2;		(*  TxPDO ---> CANopenSlave Transmit *)

	ExtConfig.TxPDO[1].EventTime			:= 200;		(* Slave: Index 0x18xx SubIndex 5: CycleTime in ms for CANopenSlave TXPDO *)
	ExtConfig.TxPDO[1].InhibitTime			:= 5;		(* Slave: Index 0x18xx SubIndex 3: InhibitTime in ms for CANopenSlave TxPDO *)
	ExtConfig.TxPDO[1].TransmissionType	:= 255;		(* Slave: Index 0x18xx SubIndex 2: TransmissionType for this TxPDO *)

	ExtConfig.TxPDO[2].EventTime			:= 100;		(* Slave: Index 0x18xx SubIndex 5: CycleTime in ms for CANopenSlave TXPDO *)
	ExtConfig.TxPDO[2].InhibitTime			:= 100;		(* Slave: Index 0x18xx SubIndex 3: InhibitTime in ms for CANopenSlave TxPDO *)
	ExtConfig.TxPDO[2].TransmissionType	:= 255;		(* Slave: Index 0x18xx SubIndex 2: TransmissionType for this TxPDO *)


	(*************************************************** RxPDOs of CANOpenSlave ( MOVI-PLC TransmitObjects) **********************************************************)

	ExtConfig.NumberOfRxPDO				:= 2;		(*  RxPDO ---> CANopenSlave Receive *)

	ExtConfig.RxPDO[1].EventTime			:= 200;		(* Master: CycleTime in ms for TransmitObjects (MOVI-PLC) *)
	ExtConfig.RxPDO[1].InhibitTime			:= 5;		(* Master: InhibitTime in ms for TransmitObjects (MOVI-PLC) *)
	ExtConfig.RxPDO[1].Length				:= 8;		(* Master: Length of this TransmitObject in bytes *)
	ExtConfig.RxPDO[1].TransmissionType	:= 255;		(* Slave: Index 0x14xx SubIndex 2: TransmissionType for this RxPDO *)

	ExtConfig.RxPDO[2].EventTime			:= 100;		(* Master: CycleTime in ms for TransmitObjects (MOVI-PLC) *)
	ExtConfig.RxPDO[2].InhibitTime			:= 100;		(* Master: InhibitTime in ms for TransmitObjects (MOVI-PLC) *)
	ExtConfig.RxPDO[2].Length				:= 8;		(* Master: Length of this TransmitObject in bytes *)
	ExtConfig.RxPDO[2].TransmissionType	:= 255;		(* Slave: Index 0x14xx SubIndex 2: TransmissionType for this RxPDO *)


	(***************************************************** Additional parameters to set in the CANOpenSlave  ***************************************************************)

	(* Enable transmission of analog inputs *)
	ExtConfig.stInitialParameter_COSlave.aIndex[1]			:= 16#6423;
	ExtConfig.stInitialParameter_COSlave.aSubIndex[1]	:= 0;
	ExtConfig.stInitialParameter_COSlave.aBytes[1]		:= 1;
	ExtConfig.stInitialParameter_COSlave.aData[1]			:= 1;


	(********************************************** Additional configuration. Default values are in most cases sufficient *****************************************************)

	ExtConfig.bIOHold						:= FALSE;
	ExtConfig.bNoSettingsDownload			:= FALSE;
	ExtConfig.bWaitBeforeOperational		:= FALSE;
	ExtConfig.bResetUnconditional			:= FALSE;

	ExtConfig.TimeOutHeartBeat				:= 400;				(* [ms] *)
	ExtConfig.TimeOutNodeGuarding		:= 0;				(* [ms]. CAUTION ! DHP11B (MOVI-PLC basic) does NOT support NodeGuarding *)
	ExtConfig.TimeOutInitSequence			:= 10;				(* [seconds]. If the Init-Sequence takes longer than this TimeOut time --> Error *)
	ExtConfig.SyncCOBID						:= 0;				(* SyncObject ID for TransmissionType 0-240 (RxPDO). Usually 128. If 0, the ID will not be written *)
	ExtConfig.SyncTime						:= 0;				(* CycleTime for the SYNC-Object *)

	ExtConfig.TxPDO[1].COBID				:= 16#180;			(* In order to disable the use of RTR frames for the PDOs, set bit 30 = "RTR not allowed" *)
	ExtConfig.TxPDO[2].COBID				:= 16#280;			(* Ex. 16#4000_0280 *)
	ExtConfig.TxPDO[3].COBID				:= 16#380;
	ExtConfig.TxPDO[4].COBID				:= 16#480;			(* NOTE! These values are base values. The input "Address" will automatically be added *)
	ExtConfig.TxPDO[5].COBID				:= 16#680;
	ExtConfig.TxPDO[6].COBID				:= 16#1C0;
	ExtConfig.TxPDO[7].COBID				:= 16#2C0;
	ExtConfig.TxPDO[8].COBID				:= 16#3C0;
	ExtConfig.TxPDO[9].COBID				:= 16#4C0;
	ExtConfig.TxPDO[10].COBID				:= 16#6C0;

	ExtConfig.RxPDO[1].COBID				:= 16#200;
	ExtConfig.RxPDO[2].COBID				:= 16#300;
	ExtConfig.RxPDO[3].COBID				:= 16#400;
	ExtConfig.RxPDO[4].COBID				:= 16#500;
	ExtConfig.RxPDO[5].COBID				:= 16#780;
	ExtConfig.RxPDO[6].COBID				:= 16#240;
	ExtConfig.RxPDO[7].COBID				:= 16#340;
	ExtConfig.RxPDO[8].COBID				:= 16#440;
	ExtConfig.RxPDO[9].COBID				:= 16#540;
	ExtConfig.RxPDO[10].COBID				:= 16#7C0;

	Done := TRUE;

END_IF
END_FUNCTION_BLOCK


(* @NESTEDCOMMENTS := 'Yes' *)
(* @PATH := '\/CodeSamples\/CANopen\/UniversalMaster' *)
(* @OBJECTFLAGS := '0, 8' *)
(* @SYMFILEFLAGS := '2048' *)
(************************************************************************************
*
*                 Code sample  " PRG_CANopen_IVO_AbsEncoder "                 
*
*************************************************************************************
*
* (c) 2009 by SEW-EURODRIVE GmbH & Co KG
*
************************************************************************************
************************************************************************************
*
* PRG_CANopen_IVO_AbsEncoder
*
* This code sample demonstrates, how to configure and connect a 
* CANOpen IVO absolute encoder via CAN.
*
* Remarks : 
* - Use CANopen devices on a separate CAN and don´t mix it with SEW drives.
* - Set the Baudrate in plc configuration 
* 
************************************************************************************)
PROGRAM PRG_CANopen_IVO_AbsEncoder
VAR
	(* Configuration file IVO abs encoder *)
	fbConfig_IVO: FB_Configuration_CANopenSlave_IVO_AbsEncoder;
	stConfig_IVO: MC_EXTENDEDCONFIG_COSLAVE;
	bConfigDone_IVO: BOOL;

	(* Connect IVO abs encoder *)
	fbConnect_IVO: MPLC_ConnectUniversalSlave_CANopen;
	bReset_IVO: BOOL;
	stDiag_IVO: MC_DIAG_COSLAVE;
	aInputs_IVO: ARRAY [1..32] OF ARRAY [1..4] OF WORD;
	aOutputs_IVO: ARRAY [1..32] OF ARRAY [1..4] OF WORD;
	bConnectDone_IVO: BOOL;
	bConnectError_IVO: BOOL;
	nConnectErrorID_IVO: UDINT;
	stAxis_IVO: AXIS_REF;
END_VAR
(* @END_DECLARATION := '0' *)
_FBD_BODY
_NETWORKS : 2
_NETWORK

_COMMENT
''
_END_COMMENT
_ASSIGN
_FUNCTIONBLOCK
fbConfig_IVO
_BOX_EXPR : 2
_OPERAND
_EXPRESSION
_POSITIV
TRUE
_OPERAND
_EXPRESSION
_POSITIV
stConfig_IVO
_EXPRESSION
_POSITIV
FB_Configuration_CANopenSlave_IVO_AbsEncoder
_OUTPUTS : 0
_EXPRESSION
_POSITIV
_OUTPUTS : 1
_OUTPUT
_POSITIV
_NO_SET
bConfigDone_IVO
_NETWORK

_COMMENT
''
_END_COMMENT
_ASSIGN
_FUNCTIONBLOCK
fbConnect_IVO
_BOX_EXPR : 8
_OPERAND
_EXPRESSION
_POSITIV
bConfigDone_IVO
_OPERAND
_EXPRESSION
_POSITIV
SBUS_NODE_2
_OPERAND
_EXPRESSION
_POSITIV
1
_OPERAND
_EXPRESSION
_POSITIV
bReset_IVO
_OPERAND
_EXPRESSION
_POSITIV
stConfig_IVO
_OPERAND
_EXPRESSION
_POSITIV
stDiag_IVO
_OPERAND
_EXPRESSION
_POSITIV
aInputs_IVO
_OPERAND
_EXPRESSION
_POSITIV
aOutputs_IVO
_EXPRESSION
_POSITIV
MPLC_ConnectUniversalSlave_CANopen
_OUTPUTS : 3
_OUTPUT
_POSITIV
_NO_SET
bConnectError_IVO
_OUTPUT
_POSITIV
_NO_SET
nConnectErrorID_IVO
_OUTPUT
_POSITIV
_NO_SET
stAxis_IVO
_EXPRESSION
_POSITIV
_OUTPUTS : 1
_OUTPUT
_POSITIV
_NO_SET
bConnectDone_IVO

END_PROGRAM

LIBRARY
05_Utilities\MPLCUtilities.lib 30.1.17 00:00:00
(* @LIBRARYSYMFILEINFO := '0' *)
NumOfPOUs: 12
MPLC_ClockMemoryByte: 2048
MPLC_Connect_IP67_IOModul_EtherCAT: 2048
MPLC_ConnectIOModul_CANopen: 2048
MPLC_ConnectIOModul_CANopen_with_RTR: 2048
MPLC_ConnectMOVIMOT_MxD: 2048
MPLC_ConnectUniversalSlave_CANopen: 2048
MPLC_ConnectUniversalSlave_EtherCAT: 2048
MPLC_CycleTime: 2048
MPLC_Parameter_CANopenIO: 2048
MPLC_ParameterRW_CANopen: 2048
MPLC_ParameterRW_CANopen64: 2048
MPLC_RealTimeClockManager: 2048
NumOfGVLs: 2
GlobalVar_Utilities: 2048
Version_MPLCUtilities: 2048
END_LIBRARY

LIBRARY
11_System\SysLibFileAsync.lib 27.1.17 13:50:06
(* @LIBRARYSYMFILEINFO := '0' *)
NumOfPOUs: 14
SysFileCloseAllOpenAsync: 2048
SysFileCloseAsync: 0
SysFileCopyAsync: 0
SysFileDeleteAsync: 0
SysFileEOFAsync: 0
SysFileGetLastErrorAsync: 2048
SysFileGetPosAsync: 0
SysFileGetSizeAsync: 0
SysFileGetTimeAsync: 0
SysFileOpenAsync: 0
SysFileReadAsync: 0
SysFileRenameAsync: 0
SysFileSetPosAsync: 0
SysFileWriteAsync: 0
NumOfGVLs: 1
GlobalVarsFileAsync: 0
END_LIBRARY

LIBRARY
11_System\SysLibRtc.lib 27.1.17 13:50:06
(* @LIBRARYSYMFILEINFO := '0' *)
NumOfPOUs: 4
SysRtcCheckBattery: 0
SysRtcGetHourMode: 0
SysRtcGetTime: 0
SysRtcSetTime: 0
NumOfGVLs: 1
Globale_Variablen: 0
END_LIBRARY

LIBRARY
12_Additional\Util.lib 27.1.17 13:50:06
(* @LIBRARYSYMFILEINFO := '0' *)
NumOfPOUs: 22
BCD_TO_INT: 2048
BLINK: 2048
CHARCURVE: 2048
DERIVATIVE: 2048
EXTRACT: 2048
GEN: 2048
HYSTERESIS: 2048
INT_TO_BCD: 2048
INTEGRAL: 2048
LIMITALARM: 2048
PACK: 2048
PD: 2048
PID: 2048
PID_FIXCYCLE: 2048
PUTBIT: 2048
RAMP_INT: 2048
RAMP_REAL: 2048
STATISTICS_INT: 2048
STATISTICS_REAL: 2048
UNPACK: 2048
VARIANCE: 2048
Version_Util: 2048
NumOfGVLs: 1
Globale_Variablen: 0
END_LIBRARY
